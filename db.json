{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-a4/source/css/a11y-dark.min.css","path":"css/a11y-dark.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/css/fonts.css","path":"css/fonts.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/css/lightgallery-bundle.min.css","path":"css/lightgallery-bundle.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/css/markdown.css","path":"css/markdown.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/css/reset.css","path":"css/reset.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/css/returnToLastPage.css","path":"css/returnToLastPage.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/css/returnToTop.css","path":"css/returnToTop.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/css/toc.css","path":"css/toc.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/css/ui.css","path":"css/ui.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/css/waline.css","path":"css/waline.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/css/unicons.css","path":"css/unicons.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/fonts/LXGWWenKaiLite-Bold.woff2","path":"fonts/LXGWWenKaiLite-Bold.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/fonts/LXGWWenKaiLite-Regular.woff2","path":"fonts/LXGWWenKaiLite-Regular.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/fonts/lg.svg","path":"fonts/lg.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/fonts/lg.ttf","path":"fonts/lg.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/fonts/lg.woff","path":"fonts/lg.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/fonts/lg.woff2","path":"fonts/lg.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/fonts/notoserifsc-medium-webfont.woff","path":"fonts/notoserifsc-medium-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/fonts/notoserifsc-medium-webfont.woff2","path":"fonts/notoserifsc-medium-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/fonts/unicons.woff2","path":"fonts/unicons.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/img/A4-favicon.png","path":"img/A4-favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/img/archive.png","path":"img/archive.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/img/comment.png","path":"img/comment.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/img/A4800x500.png","path":"img/A4800x500.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/img/index.png","path":"img/index.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/img/market.png","path":"img/market.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/img/tags&&categories.png","path":"img/tags&&categories.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/darkmode-js.min.js","path":"js/darkmode-js.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/hitokoto.js","path":"js/hitokoto.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/randomHeaderContent.js","path":"js/randomHeaderContent.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/returnToLastPage.js","path":"js/returnToLastPage.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/returnToTop.js","path":"js/returnToTop.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/roughNotation.js","path":"js/roughNotation.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/waline.mjs","path":"js/waline.mjs","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/css/highlight/highlight.styl","path":"css/highlight/highlight.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/css/highlight/style1.styl","path":"css/highlight/style1.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/lightgallery/lightgallery.umd.min.js","path":"js/lightgallery/lightgallery.umd.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/lightgallery/plugins/lg-autoplay.umd.min.js","path":"js/lightgallery/plugins/lg-autoplay.umd.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/lightgallery/plugins/lg-fullscreen.umd.min.js","path":"js/lightgallery/plugins/lg-fullscreen.umd.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/lightgallery/plugins/lg-paper.umd.min.js","path":"js/lightgallery/plugins/lg-paper.umd.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/lightgallery/plugins/lg-rotate.umd.min.js","path":"js/lightgallery/plugins/lg-rotate.umd.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/lightgallery/plugins/lg-thumbnail.umd.min.js","path":"js/lightgallery/plugins/lg-thumbnail.umd.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-a4/source/js/lightgallery/plugins/lg-zoom.umd.min.js","path":"js/lightgallery/plugins/lg-zoom.umd.min.js","modified":0,"renderable":1},{"_id":"source/image/weituo","path":"image/weituo","modified":0,"renderable":0},{"_id":"source/image/weituo2","path":"image/weituo2","modified":0,"renderable":0},{"_id":"source/image/weituo3","path":"image/weituo3","modified":0,"renderable":0},{"_id":"source/img/favicon.webp","path":"img/favicon.webp","modified":0,"renderable":0},{"_id":"source/video/LilliaRedesign.mp4","path":"video/LilliaRedesign.mp4","modified":0,"renderable":0},{"_id":"source/image/Typora/1.png","path":"image/Typora/1.png","modified":0,"renderable":0},{"_id":"source/image/Typora/2.png","path":"image/Typora/2.png","modified":0,"renderable":0},{"_id":"source/image/Typora/3.png","path":"image/Typora/3.png","modified":0,"renderable":0},{"_id":"source/image/Typora/4.png","path":"image/Typora/4.png","modified":0,"renderable":0},{"_id":"source/image/Typora/5.png","path":"image/Typora/5.png","modified":0,"renderable":0},{"_id":"source/image/Typora/6.png","path":"image/Typora/6.png","modified":0,"renderable":0},{"_id":"source/image/Typora/Close.png","path":"image/Typora/Close.png","modified":0,"renderable":0},{"_id":"source/image/Typora/Delay.png","path":"image/Typora/Delay.png","modified":0,"renderable":0},{"_id":"source/image/Typora/Fade.png","path":"image/Typora/Fade.png","modified":0,"renderable":0},{"_id":"source/image/Typora/Lowpassfilter.png","path":"image/Typora/Lowpassfilter.png","modified":0,"renderable":0},{"_id":"source/image/Typora/ProfilerFilteringToolbar.png","path":"image/Typora/ProfilerFilteringToolbar.png","modified":0,"renderable":0},{"_id":"source/image/Typora/Reset.png","path":"image/Typora/Reset.png","modified":0,"renderable":0},{"_id":"source/image/Typora/Pitch.png","path":"image/Typora/Pitch.png","modified":0,"renderable":0},{"_id":"source/image/Typora/add generic path.png","path":"image/Typora/add generic path.png","modified":0,"renderable":0},{"_id":"source/image/Typora/add path.png","path":"image/Typora/add path.png","modified":0,"renderable":0},{"_id":"source/image/Typora/add to current packkage.png","path":"image/Typora/add to current packkage.png","modified":0,"renderable":0},{"_id":"source/image/Typora/add.png","path":"image/Typora/add.png","modified":0,"renderable":0},{"_id":"source/image/Typora/addtolayout.png","path":"image/Typora/addtolayout.png","modified":0,"renderable":0},{"_id":"source/image/Typora/auxiliary_bus.png","path":"image/Typora/auxiliary_bus.png","modified":0,"renderable":0},{"_id":"source/image/Typora/blue.png","path":"image/Typora/blue.png","modified":0,"renderable":0},{"_id":"source/image/Typora/bypass.png","path":"image/Typora/bypass.png","modified":0,"renderable":0},{"_id":"source/image/Typora/caster_mute.png","path":"image/Typora/caster_mute.png","modified":0,"renderable":0},{"_id":"source/image/Typora/choose.png","path":"image/Typora/choose.png","modified":0,"renderable":0},{"_id":"source/image/Typora/configureColumns.png","path":"image/Typora/configureColumns.png","modified":0,"renderable":0},{"_id":"source/image/Typora/duck.png","path":"image/Typora/duck.png","modified":0,"renderable":0},{"_id":"source/image/Typora/ducking.png","path":"image/Typora/ducking.png","modified":0,"renderable":0},{"_id":"source/image/Typora/effect_1.png","path":"image/Typora/effect_1.png","modified":0,"renderable":0},{"_id":"source/image/Typora/effect_@.png","path":"image/Typora/effect_@.png","modified":0,"renderable":0},{"_id":"source/image/Typora/eyes.png","path":"image/Typora/eyes.png","modified":0,"renderable":0},{"_id":"source/image/Typora/fp_add.png","path":"image/Typora/fp_add.png","modified":0,"renderable":0},{"_id":"source/image/Typora/fp_copytoclipboard.png","path":"image/Typora/fp_copytoclipboard.png","modified":0,"renderable":0},{"_id":"source/image/Typora/fp_editlayout.png","path":"image/Typora/fp_editlayout.png","modified":0,"renderable":0},{"_id":"source/image/Typora/fp_remove.png","path":"image/Typora/fp_remove.png","modified":0,"renderable":0},{"_id":"source/image/Typora/fp_removeallmissingfiles.png","path":"image/Typora/fp_removeallmissingfiles.png","modified":0,"renderable":0},{"_id":"source/image/Typora/gray.png","path":"image/Typora/gray.png","modified":0,"renderable":0},{"_id":"source/image/Typora/line_1.png","path":"image/Typora/line_1.png","modified":0,"renderable":0},{"_id":"source/image/Typora/line_3.png","path":"image/Typora/line_3.png","modified":0,"renderable":0},{"_id":"source/image/Typora/line_4.png","path":"image/Typora/line_4.png","modified":0,"renderable":0},{"_id":"source/image/Typora/live.png","path":"image/Typora/live.png","modified":0,"renderable":0},{"_id":"source/image/Typora/master_bus.png","path":"image/Typora/master_bus.png","modified":0,"renderable":0},{"_id":"source/image/Typora/mute.png","path":"image/Typora/mute.png","modified":0,"renderable":0},{"_id":"source/image/Typora/nable_bypass.png","path":"image/Typora/nable_bypass.png","modified":0,"renderable":0},{"_id":"source/image/Typora/line_2.png","path":"image/Typora/line_2.png","modified":0,"renderable":0},{"_id":"source/image/Typora/orange.png","path":"image/Typora/orange.png","modified":0,"renderable":0},{"_id":"source/image/Typora/pause.png","path":"image/Typora/pause.png","modified":0,"renderable":0},{"_id":"source/image/Typora/performance setting.png","path":"image/Typora/performance setting.png","modified":0,"renderable":0},{"_id":"source/image/Typora/playback.png","path":"image/Typora/playback.png","modified":0,"renderable":0},{"_id":"source/image/Typora/position.png","path":"image/Typora/position.png","modified":0,"renderable":0},{"_id":"source/image/Typora/remove path.png","path":"image/Typora/remove path.png","modified":0,"renderable":0},{"_id":"source/image/Typora/rtpc.png","path":"image/Typora/rtpc.png","modified":0,"renderable":0},{"_id":"source/image/Typora/save.png","path":"image/Typora/save.png","modified":0,"renderable":0},{"_id":"source/image/Typora/search.png","path":"image/Typora/search.png","modified":0,"renderable":0},{"_id":"source/image/Typora/search_2.png","path":"image/Typora/search_2.png","modified":0,"renderable":0},{"_id":"source/image/Typora/select all.png","path":"image/Typora/select all.png","modified":0,"renderable":0},{"_id":"source/image/Typora/select none.png","path":"image/Typora/select none.png","modified":0,"renderable":0},{"_id":"source/image/Typora/setting.png","path":"image/Typora/setting.png","modified":0,"renderable":0},{"_id":"source/image/Typora/stateGroup.png","path":"image/Typora/stateGroup.png","modified":0,"renderable":0},{"_id":"source/image/Typora/stop.png","path":"image/Typora/stop.png","modified":0,"renderable":0},{"_id":"source/image/Typora/unselectAll.png","path":"image/Typora/unselectAll.png","modified":0,"renderable":0},{"_id":"source/image/Typora/update path.png","path":"image/Typora/update path.png","modified":0,"renderable":0},{"_id":"source/image/Typora/voice volume.png","path":"image/Typora/voice volume.png","modified":0,"renderable":0},{"_id":"source/image/Typora/white.png","path":"image/Typora/white.png","modified":0,"renderable":0},{"_id":"source/image/ksohtml924/wps1.jpg","path":"image/ksohtml924/wps1.jpg","modified":0,"renderable":0},{"_id":"source/image/ksohtml924/wps10.jpg","path":"image/ksohtml924/wps10.jpg","modified":0,"renderable":0},{"_id":"source/image/ksohtml924/wps11.jpg","path":"image/ksohtml924/wps11.jpg","modified":0,"renderable":0},{"_id":"source/image/ksohtml924/wps12.jpg","path":"image/ksohtml924/wps12.jpg","modified":0,"renderable":0},{"_id":"source/image/ksohtml924/wps13.jpg","path":"image/ksohtml924/wps13.jpg","modified":0,"renderable":0},{"_id":"source/image/ksohtml924/wps14.jpg","path":"image/ksohtml924/wps14.jpg","modified":0,"renderable":0},{"_id":"source/image/ksohtml924/wps2.png","path":"image/ksohtml924/wps2.png","modified":0,"renderable":0},{"_id":"source/image/ksohtml924/wps3.jpg","path":"image/ksohtml924/wps3.jpg","modified":0,"renderable":0},{"_id":"source/image/ksohtml924/wps4.jpg","path":"image/ksohtml924/wps4.jpg","modified":0,"renderable":0},{"_id":"source/image/ksohtml924/wps5.jpg","path":"image/ksohtml924/wps5.jpg","modified":0,"renderable":0},{"_id":"source/image/ksohtml924/wps6.jpg","path":"image/ksohtml924/wps6.jpg","modified":0,"renderable":0},{"_id":"source/image/ksohtml924/wps7.jpg","path":"image/ksohtml924/wps7.jpg","modified":0,"renderable":0},{"_id":"source/image/ksohtml924/wps9.png","path":"image/ksohtml924/wps9.png","modified":0,"renderable":0},{"_id":"source/image/ksohtml924/wps8.jpg","path":"image/ksohtml924/wps8.jpg","modified":0,"renderable":0},{"_id":"source/image/Works/guodaxia.png","path":"image/Works/guodaxia.png","modified":0,"renderable":0},{"_id":"source/image/Works/image-20241108142218797.png","path":"image/Works/image-20241108142218797.png","modified":0,"renderable":0},{"_id":"source/image/Works/image-20241128163143502.png","path":"image/Works/image-20241128163143502.png","modified":0,"renderable":0},{"_id":"source/image/Works/image-20241128163249375.png","path":"image/Works/image-20241128163249375.png","modified":0,"renderable":0},{"_id":"source/image/Works/image-20241128163335812.png","path":"image/Works/image-20241128163335812.png","modified":0,"renderable":0},{"_id":"source/image/Works/image-20241128163425391.png","path":"image/Works/image-20241128163425391.png","modified":0,"renderable":0},{"_id":"source/image/Works/image-20241128163530552.png","path":"image/Works/image-20241128163530552.png","modified":0,"renderable":0},{"_id":"source/image/Works/image-20241128163559693.png","path":"image/Works/image-20241128163559693.png","modified":0,"renderable":0},{"_id":"source/image/Works/image-20241128163629704.png","path":"image/Works/image-20241128163629704.png","modified":0,"renderable":0},{"_id":"source/image/Works/image-20241128163652040.png","path":"image/Works/image-20241128163652040.png","modified":0,"renderable":0},{"_id":"source/image/Works/image-20241128163721553.png","path":"image/Works/image-20241128163721553.png","modified":0,"renderable":0},{"_id":"source/image/Works/image-20241128164245032.png","path":"image/Works/image-20241128164245032.png","modified":0,"renderable":0},{"_id":"source/image/Works/mix_console.jpg","path":"image/Works/mix_console.jpg","modified":0,"renderable":0},{"_id":"source/image/Works/mix_console2.jpg","path":"image/Works/mix_console2.jpg","modified":0,"renderable":0},{"_id":"source/image/Works/xiaoqiao1.png","path":"image/Works/xiaoqiao1.png","modified":0,"renderable":0},{"_id":"source/image/Works/xiaoqiao2.png","path":"image/Works/xiaoqiao2.png","modified":0,"renderable":0},{"_id":"source/image/Works/yinxiaozhushou.png","path":"image/Works/yinxiaozhushou.png","modified":0,"renderable":0},{"_id":"source/image/plugins/1-1731738661057-1","path":"image/plugins/1-1731738661057-1","modified":0,"renderable":0},{"_id":"source/image/plugins/10-1731738661057-10.png","path":"image/plugins/10-1731738661057-10.png","modified":0,"renderable":0},{"_id":"source/image/plugins/11-1731738661057-12","path":"image/plugins/11-1731738661057-12","modified":0,"renderable":0},{"_id":"source/image/plugins/12-1731738661057-11","path":"image/plugins/12-1731738661057-11","modified":0,"renderable":0},{"_id":"source/image/plugins/13-1731738661057-13","path":"image/plugins/13-1731738661057-13","modified":0,"renderable":0},{"_id":"source/image/plugins/14-1731738661057-14","path":"image/plugins/14-1731738661057-14","modified":0,"renderable":0},{"_id":"source/image/plugins/15-1731738661057-15","path":"image/plugins/15-1731738661057-15","modified":0,"renderable":0},{"_id":"source/image/plugins/16-1731738661057-16","path":"image/plugins/16-1731738661057-16","modified":0,"renderable":0},{"_id":"source/image/plugins/17-1731738661057-17","path":"image/plugins/17-1731738661057-17","modified":0,"renderable":0},{"_id":"source/image/plugins/18-1731738661057-18","path":"image/plugins/18-1731738661057-18","modified":0,"renderable":0},{"_id":"source/image/plugins/19-1731738661057-19","path":"image/plugins/19-1731738661057-19","modified":0,"renderable":0},{"_id":"source/image/plugins/2-1731738661057-2.png","path":"image/plugins/2-1731738661057-2.png","modified":0,"renderable":0},{"_id":"source/image/plugins/3-1731738661057-3.png","path":"image/plugins/3-1731738661057-3.png","modified":0,"renderable":0},{"_id":"source/image/plugins/4-1731738661057-4.png","path":"image/plugins/4-1731738661057-4.png","modified":0,"renderable":0},{"_id":"source/image/plugins/5-1731738661057-5.png","path":"image/plugins/5-1731738661057-5.png","modified":0,"renderable":0},{"_id":"source/image/plugins/7-1731738661057-7.png","path":"image/plugins/7-1731738661057-7.png","modified":0,"renderable":0},{"_id":"source/image/plugins/8-1731738661057-8.png","path":"image/plugins/8-1731738661057-8.png","modified":0,"renderable":0},{"_id":"source/image/plugins/9-1731738661057-9.png","path":"image/plugins/9-1731738661057-9.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241105215834060.png","path":"image/plugins/image-20241105215834060.png","modified":0,"renderable":0},{"_id":"source/image/plugins/6-1731738661057-6.png","path":"image/plugins/6-1731738661057-6.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241105220224257.png","path":"image/plugins/image-20241105220224257.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115211414880.png","path":"image/plugins/image-20241115211414880.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115211442488.png","path":"image/plugins/image-20241115211442488.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115211522282.png","path":"image/plugins/image-20241115211522282.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115211725750.png","path":"image/plugins/image-20241115211725750.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115211752915.png","path":"image/plugins/image-20241115211752915.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115211900992.png","path":"image/plugins/image-20241115211900992.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115211932623.png","path":"image/plugins/image-20241115211932623.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212035104.png","path":"image/plugins/image-20241115212035104.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212134397.png","path":"image/plugins/image-20241115212134397.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212223351.png","path":"image/plugins/image-20241115212223351.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212249085.png","path":"image/plugins/image-20241115212249085.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212325460.png","path":"image/plugins/image-20241115212325460.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212424168.png","path":"image/plugins/image-20241115212424168.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212353272.png","path":"image/plugins/image-20241115212353272.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212457855.png","path":"image/plugins/image-20241115212457855.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212525780.png","path":"image/plugins/image-20241115212525780.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212552111.png","path":"image/plugins/image-20241115212552111.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212617107.png","path":"image/plugins/image-20241115212617107.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212640312.png","path":"image/plugins/image-20241115212640312.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212756604.png","path":"image/plugins/image-20241115212756604.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212817839.png","path":"image/plugins/image-20241115212817839.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212849947.png","path":"image/plugins/image-20241115212849947.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115212917144.png","path":"image/plugins/image-20241115212917144.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115213215222.png","path":"image/plugins/image-20241115213215222.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115213322228.png","path":"image/plugins/image-20241115213322228.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115213503997.png","path":"image/plugins/image-20241115213503997.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115213622701.png","path":"image/plugins/image-20241115213622701.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115213713048.png","path":"image/plugins/image-20241115213713048.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115214150403.png","path":"image/plugins/image-20241115214150403.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115214318192.png","path":"image/plugins/image-20241115214318192.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115214524815.png","path":"image/plugins/image-20241115214524815.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241115213646159.png","path":"image/plugins/image-20241115213646159.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241116141716730.png","path":"image/plugins/image-20241116141716730.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241116141752644.png","path":"image/plugins/image-20241116141752644.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241116141858814.png","path":"image/plugins/image-20241116141858814.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241116141943894.png","path":"image/plugins/image-20241116141943894.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241116142022791.png","path":"image/plugins/image-20241116142022791.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241116142234089.png","path":"image/plugins/image-20241116142234089.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241116142427292.png","path":"image/plugins/image-20241116142427292.png","modified":0,"renderable":0},{"_id":"source/image/plugins/image-20241116142511129.png","path":"image/plugins/image-20241116142511129.png","modified":0,"renderable":0},{"_id":"source/image/image-20250215162814914.png","path":"image/image-20250215162814914.png","modified":0,"renderable":0},{"_id":"source/image/屏幕截图 2025-02-17 181103.png","path":"image/屏幕截图 2025-02-17 181103.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/声学原理和音频硬件原理.md","hash":"021f3cd60df927eb0b398eae2cce1b90f0855ce7","modified":1744540873689},{"_id":"source/_posts/直播音频设计方案.md","hash":"5ff15e6e679b32e82e17387331f0fda2a0fd1558","modified":1744540939132},{"_id":"source/_posts/无忧传媒工作内容归档.md","hash":"61698ef82e19769531643be8202f29e8894bee71","modified":1744731593861},{"_id":"source/_posts/音频软件开发_基于ffmpeg的音频格式转换器.md","hash":"39fb594aeaf9cb0949a75d0b985236262b05692c","modified":1734163272328},{"_id":"source/_posts/音频软件开发_音效助手开发.md","hash":"09584931568151cca7b6795581d1dee807c79be9","modified":1744540904955},{"_id":"source/_posts/调音台_MIDAS-M32-DN32-LIVE调音台直播链路.md","hash":"4c341299e0f2c8e6818db44b9aab8868cae0528b","modified":1731674624937},{"_id":"source/about/index.md","hash":"dfd8996cde2ec094bc01d5b15f5897debb743d7d","modified":1744538778860},{"_id":"source/index/index.md","hash":"30eedf9aae7e9a864bd00c4f668cf38f8f997902","modified":1745553536539},{"_id":"source/list/index.md","hash":"150c70639afcaa2e3ae05c3b17c755dcdb40bea4","modified":1744541254273},{"_id":"source/image/Typora/....png","hash":"011e6eb57acc39a4088b0a75e08f57d5a8b643f8","modified":1683255608355},{"_id":"source/works/index.md","hash":"9f7a3153497a22a09e2a8ae12bcfad5136d24742","modified":1745553678565},{"_id":"source/image/Typora/3.png","hash":"ea02884caa242c9087f4d4612a31d85b32db1125","modified":1681978362926},{"_id":"source/image/Typora/4.png","hash":"207884b403c16a536981ecc16e6e7931a9decf7b","modified":1681978362679},{"_id":"source/image/Typora/6.png","hash":"5469d1f7a175923bcf0dcd64699cd6139c02cb7a","modified":1681978362606},{"_id":"source/image/Typora/5.png","hash":"0e2a235bb58e707ed90cc45f1d77d0e48dcf8b2f","modified":1681978363013},{"_id":"source/image/Typora/Delay.png","hash":"c08ae3055888c3075ef774b5335ec9bcc19a88bc","modified":1683252599054},{"_id":"source/image/Typora/Close.png","hash":"c0189c08dc2ac0e4ac2f8e85237b14cd3b93a6ea","modified":1682674000116},{"_id":"source/image/Typora/Fade.png","hash":"2042bce925681574a3c025a1fedc5189a5f34a0d","modified":1683252605851},{"_id":"source/image/Typora/Lowpassfilter.png","hash":"003e9f1ce86e869a2a1ad2b9cc502fb2320d3576","modified":1683253097459},{"_id":"source/image/Typora/ProfilerFilteringToolbar.png","hash":"a3c4cfda7a0d35933e386bbccbdd4ed9e4847213","modified":1682672219547},{"_id":"source/image/Typora/Reset.png","hash":"cd8f30e3ca1917d4d0fc1618a80d11443488d32c","modified":1682673993081},{"_id":"source/image/Typora/Pitch.png","hash":"fde80254f8c280f4c7a2a560143557b22f8bc083","modified":1683252857907},{"_id":"source/image/Typora/add generic path.png","hash":"df2aa9065e377ac4eb12ad4023895238dcd21e84","modified":1683255370214},{"_id":"source/image/Typora/add path.png","hash":"adae19a632afb9e0fb11a76125507e0ae1af954d","modified":1683255377241},{"_id":"source/image/Typora/add to current packkage.png","hash":"10180d6fba2a127dd7b69fc8dbda265f6dd5475f","modified":1683269507401},{"_id":"source/image/Typora/add.png","hash":"a527e2074ed86b019bed584976d032a56b47421a","modified":1683254047989},{"_id":"source/image/Typora/addtolayout.png","hash":"cfdb0ef071dc3a7776ef6c3d873d074db4cd8861","modified":1683270268196},{"_id":"source/image/Typora/auxiliary_bus.png","hash":"19326108de3ae5c3c5e74552772b137f3589e607","modified":1683254228183},{"_id":"source/image/Typora/bypass.png","hash":"7881cfbb07ad6371055a20f304ab76b857a34bc5","modified":1683195704663},{"_id":"source/image/Typora/caster_mute.png","hash":"ca96d17cddc807fedc7843e1813fbc52a5744062","modified":1683252870140},{"_id":"source/image/Typora/choose.png","hash":"9d8822a7a8b24d9b0874895e31da4b58395b8059","modified":1683195300258},{"_id":"source/image/Typora/blue.png","hash":"aaf33d902bb359e34b4b89be692cb9aa91b57e3e","modified":1682673077951},{"_id":"source/image/Typora/configureColumns.png","hash":"5cf8a6aa581c1f4da5e06d491715a69f48b2c3c0","modified":1683255586730},{"_id":"source/image/Typora/duck.png","hash":"f2cbf5db0c5b2676f1b6e13c2ad234eb29ff9b98","modified":1682672844747},{"_id":"source/image/Typora/ducking.png","hash":"5fdd9cc4c49656142e2e4a69b336f54331b72210","modified":1683195695575},{"_id":"source/image/Typora/effect_1.png","hash":"c175fb956d42002a2eb183339a47096b36b8714c","modified":1683254256043},{"_id":"source/image/Typora/effect_@.png","hash":"d20be5d32fce269c83214e1e8d1060368d091296","modified":1683254239791},{"_id":"source/image/Typora/eyes.png","hash":"76064245405a7873e630186b4d7c1f55b4da82be","modified":1682672238983},{"_id":"source/image/Typora/fp_add.png","hash":"6627effe8fad2f2206695efa7b53b32f29032e1f","modified":1683269693005},{"_id":"source/image/Typora/fp_copytoclipboard.png","hash":"9263cf4c15a22a2fbb58485b38e948cea22a33eb","modified":1683270024155},{"_id":"source/image/Typora/fp_editlayout.png","hash":"7570142134e0be04ec2cd40c6ba4b65d64cd7030","modified":1683269713932},{"_id":"source/image/Typora/fp_remove.png","hash":"5d4009cf040e67e60803fb6a6c7fd6dba5ae4231","modified":1683269699138},{"_id":"source/image/Typora/fp_removeallmissingfiles.png","hash":"df1be5309b441249f17b7545f9481c63e2436994","modified":1683270334238},{"_id":"source/image/Typora/gray.png","hash":"bc9bbac2f7b655d5062dcc0024a0d77157946295","modified":1682673095579},{"_id":"source/image/Typora/line_1.png","hash":"98e1594a1497b8aa156a99981c9eb92e8a0f8927","modified":1683254021447},{"_id":"source/image/Typora/line_3.png","hash":"a0583657bb93a9baf98d2c9ee0e7aa61c887c636","modified":1683254034038},{"_id":"source/image/Typora/line_4.png","hash":"a127358e68e44a0cc6c66125b9fde6597a9269e9","modified":1683254040075},{"_id":"source/image/Typora/live.png","hash":"c1e217cce350ed866776225d4d05bb28eec5df2e","modified":1683187053673},{"_id":"source/image/Typora/master_bus.png","hash":"67489a6a09da8bca4f504683b6d5e8c4c3089d76","modified":1683254204367},{"_id":"source/image/Typora/mute.png","hash":"5a623da268f7debbe5a87646b0ff933b65d2e34b","modified":1683195764777},{"_id":"source/image/Typora/nable_bypass.png","hash":"b086b3184d602d12f41f7e065072f8333983a2dd","modified":1683252885665},{"_id":"source/image/Typora/line_2.png","hash":"2f6ecc5b24651b88fdee3e49e8ef3c312f459800","modified":1683254028352},{"_id":"source/image/Typora/orange.png","hash":"5934a0c05bd1d685599cd5d6489499f4bbd0647e","modified":1682673086628},{"_id":"source/image/Typora/pause.png","hash":"6515cba994b848f3dba7bd060dbe4377575e0f76","modified":1683252592162},{"_id":"source/image/Typora/playback.png","hash":"d771e58c836374e6eba71b08ab47532aab95d3f3","modified":1683195678229},{"_id":"source/image/Typora/performance setting.png","hash":"d727d1b3a2e9ec013834d0995fe4bc1a7d813efc","modified":1683186386193},{"_id":"source/image/Typora/position.png","hash":"e8df7c2f859e3e2d4622b8312d9a5d93b1922c4e","modified":1683254268341},{"_id":"source/image/Typora/remove path.png","hash":"93237d5ce3af23e45aa60f01cab2c0e993614d3f","modified":1683255389247},{"_id":"source/image/Typora/search_2.png","hash":"350e8f590137cfd0e0922775c787673d4702c984","modified":1682673068182},{"_id":"source/image/Typora/select all.png","hash":"7e63668775cb85f9947120838d83de1224f767ce","modified":1682673768774},{"_id":"source/image/Typora/select none.png","hash":"a35d7533dd3e1d9cc32c32dab9447e6b4aaf8eb1","modified":1682673778251},{"_id":"source/image/Typora/setting.png","hash":"25331697cf80e678e8a6736b53ccacf9c778a712","modified":1683254295966},{"_id":"source/image/Typora/stateGroup.png","hash":"832cd4ec3d96f444d1db21ebf468197b1d7f07dc","modified":1683254287817},{"_id":"source/image/Typora/stop.png","hash":"5163e0b9203f0313b35e2c94dd05bec4d0461e60","modified":1683252578897},{"_id":"source/image/Typora/unselectAll.png","hash":"33f93993ac2b27a710831b394e62e6ae5e671277","modified":1683255398215},{"_id":"source/image/Typora/update path.png","hash":"a8ad6a634198e5963de77fbedd5d1c78f6d4b445","modified":1683255383899},{"_id":"source/image/Typora/voice volume.png","hash":"cf1f5bbc15fd908547ecbbf0f464ad4cc86f1c5c","modified":1683252850678},{"_id":"source/image/Typora/white.png","hash":"1ef759e03eced8550c115edd450f5b442ef7fba8","modified":1682673103669},{"_id":"source/image/ksohtml924/wps1.jpg","hash":"8bc06837978ccaff508d12970408a6e6af26fc10","modified":1730706689606},{"_id":"source/image/ksohtml924/wps10.jpg","hash":"ab51493957940dafdf5d06af4eeac96afffdb083","modified":1730706741264},{"_id":"source/image/ksohtml924/wps11.jpg","hash":"1b87cd5ee8615a59b8b6befb3098e500404e2e40","modified":1730706741264},{"_id":"source/image/ksohtml924/wps12.jpg","hash":"881e5d8beb6bed2606bbe26ddef769348defd0e0","modified":1730706741264},{"_id":"source/image/ksohtml924/wps13.jpg","hash":"521014e425ae80cb195391cacd1082d4f1b166e5","modified":1730706741265},{"_id":"source/image/ksohtml924/wps14.jpg","hash":"16de1452672970ca4b5863ed9d401acd4f80daaf","modified":1730706741265},{"_id":"source/image/ksohtml924/wps3.jpg","hash":"ab51493957940dafdf5d06af4eeac96afffdb083","modified":1730706689607},{"_id":"source/image/ksohtml924/wps4.jpg","hash":"1b87cd5ee8615a59b8b6befb3098e500404e2e40","modified":1730706689607},{"_id":"source/image/ksohtml924/wps5.jpg","hash":"881e5d8beb6bed2606bbe26ddef769348defd0e0","modified":1730706689608},{"_id":"source/image/ksohtml924/wps6.jpg","hash":"521014e425ae80cb195391cacd1082d4f1b166e5","modified":1730706689608},{"_id":"source/image/ksohtml924/wps7.jpg","hash":"16de1452672970ca4b5863ed9d401acd4f80daaf","modified":1730706689609},{"_id":"source/image/ksohtml924/wps8.jpg","hash":"8bc06837978ccaff508d12970408a6e6af26fc10","modified":1730706741262},{"_id":"source/image/Works/image-20241128163559693.png","hash":"0bc545c127bdb130c71b7d0dd153e4f2ef0ef260","modified":1732782964728},{"_id":"source/image/plugins/3-1731738661057-3.png","hash":"75a23062821e3b976e6a104cbb0a7166fe351baf","modified":1731738661108},{"_id":"source/image/plugins/4-1731738661057-4.png","hash":"9ac8088405cedd9057e996a1e71fde48e7d7e4eb","modified":1731738661108},{"_id":"source/image/plugins/6-1731738661057-6.png","hash":"49c5deed69a67ca2a1ccc864957ae768bbd0e464","modified":1731738661108},{"_id":"source/image/plugins/image-20241116141943894.png","hash":"9b0dbf0da6dd44d7ff26deb840bf30167f4d0c66","modified":1731738661139},{"_id":"source/image/Typora/rtpc.png","hash":"8e6eb90f232653df8f82e08e28d96c7ec29584af","modified":1683254273494},{"_id":"source/image/Typora/save.png","hash":"9f391a603739f5c5bc54c0e1519346c6eeb94d19","modified":1682673049849},{"_id":"source/image/Typora/search.png","hash":"c3e6d2bc1fbaf4629e05b046caf7f1eea7be100a","modified":1682673057975},{"_id":"source/image/weituo","hash":"e1d3f241fd183d45acf998bbd06c8a1f2daf780d","modified":1730180981514},{"_id":"source/image/Typora/1.png","hash":"066160d1a5d21a0d7be7e2709344be6ed23d3ec4","modified":1681978363775},{"_id":"source/image/Works/image-20241128163143502.png","hash":"4dd6f7322de3393b9044035aaa9f7e902eae347e","modified":1732782720572},{"_id":"source/image/Works/image-20241128163249375.png","hash":"94f6968cc0623dea5236c654fd94f32b77666876","modified":1732782775056},{"_id":"source/image/Works/image-20241128163335812.png","hash":"2ebfb8e464ea6e06f8904802a36eaf821db7e2d1","modified":1732782821537},{"_id":"source/image/Works/image-20241128163425391.png","hash":"bccff22920faa36bc83e2628aa12351e12289040","modified":1732782869490},{"_id":"source/image/Works/image-20241128163530552.png","hash":"04c14b3c37cbcefd1e262a031de0cd6168f7b0a0","modified":1732782934386},{"_id":"source/image/Works/image-20241128163629704.png","hash":"5c9b2f7be023fcff75b0a1b4c1e0899041c2c672","modified":1732782993310},{"_id":"source/image/Works/image-20241128163652040.png","hash":"e4d2a801cd4dae85db6827fb211b457678fff329","modified":1732783015297},{"_id":"source/image/Works/image-20241128163721553.png","hash":"e442df039fcc9c1b125f0f25cc09da810d3cf07e","modified":1732783044918},{"_id":"source/image/Works/image-20241128164245032.png","hash":"1ff48cac98c41fd2aa18ebe007f270c6578cb27b","modified":1732783368744},{"_id":"source/image/plugins/10-1731738661057-10.png","hash":"402e2859fc42e07e0a324fe4fa8640be7aa7b425","modified":1731738661140},{"_id":"source/image/plugins/15-1731738661057-15","hash":"4d37fb932c01f64544ab7768eaf9366af8864215","modified":1731738661140},{"_id":"source/image/plugins/image-20241115211414880.png","hash":"4ca5612d94e3c0a101057a33cac27e9a59b08411","modified":1731738661140},{"_id":"source/image/plugins/image-20241115211725750.png","hash":"653a082c1e0b85f7179609d6369926519e61ab0a","modified":1731738661140},{"_id":"source/image/plugins/image-20241115212617107.png","hash":"aa5e07f6e651076fe64cf62548969caf26f9bd2e","modified":1731738661154},{"_id":"source/image/plugins/image-20241115213503997.png","hash":"5c27c99447f165b3b34a291023202252bc16e210","modified":1731738661154},{"_id":"source/image/plugins/image-20241116142427292.png","hash":"f19bb0bda5b205d8ea71ade6ed7ddfd9d108dfe1","modified":1731738661154},{"_id":"source/image/weituo3","hash":"40be38ee19e5ad94685743e21378ce1469167ad9","modified":1730182917791},{"_id":"source/image/Typora/2.png","hash":"b220d88cdfcc08ec5833131df13fab2fe5b4707d","modified":1681978364160},{"_id":"source/image/plugins/1-1731738661057-1","hash":"5022565df1f440e51c735e03cf03e34f4c06c82f","modified":1731738661154},{"_id":"source/image/plugins/12-1731738661057-11","hash":"6cb8beab7ad6fbf7b881b273273ac462c93b2966","modified":1731738661154},{"_id":"source/image/plugins/16-1731738661057-16","hash":"18de1d45ed768830b97c1f7c678f0bc423ab4ef7","modified":1731738661154},{"_id":"source/image/plugins/18-1731738661057-18","hash":"ae3b12b291e5395c08fb86ee709d79f69f742987","modified":1731738661154},{"_id":"source/image/plugins/image-20241115212249085.png","hash":"0a0b643dbc90148b1ac4ed79c9e0fc3c2baabac3","modified":1731738661154},{"_id":"source/image/plugins/image-20241115212640312.png","hash":"892ab85e8a85287c23d264d5d45fd9bc9f6b9944","modified":1731738661154},{"_id":"source/image/plugins/image-20241115213322228.png","hash":"764f77ba16d6f1489400f45a0876c857cea952f3","modified":1731738661155},{"_id":"source/image/plugins/image-20241115214318192.png","hash":"af7363cce756a30c8acdc519963e0005624a446a","modified":1731738661155},{"_id":"source/image/plugins/image-20241116141752644.png","hash":"4a4686c20d2d15e85c09c9482cb07490878193c4","modified":1731738661155},{"_id":"source/image/plugins/image-20241116142511129.png","hash":"b0e3556db9d3bf35f2c8783761e674b6f91beb3e","modified":1731738661155},{"_id":"source/image/plugins/13-1731738661057-13","hash":"2c42c7a3b8f6dceebed818ae09a11628dcbd5056","modified":1731738661167},{"_id":"source/image/plugins/2-1731738661057-2.png","hash":"3620b15192b6ce988e66866396be075b04d28c08","modified":1731738661155},{"_id":"source/image/plugins/5-1731738661057-5.png","hash":"8f767f755b66b5c5bb05d97534254252887c7b16","modified":1731738661155},{"_id":"source/image/plugins/7-1731738661057-7.png","hash":"690f601a2cc937aeacc327137807bc2647eedb7d","modified":1731738661167},{"_id":"source/image/plugins/8-1731738661057-8.png","hash":"317b92bcc45e654d35862bcbd732d530327bee45","modified":1731738661167},{"_id":"source/image/plugins/image-20241115211900992.png","hash":"133c38227ecc6e60e7142b9ea76720f149b5d9fb","modified":1731738661167},{"_id":"source/image/plugins/image-20241115212325460.png","hash":"975d836d6336bdc71115d05ddee75f76ac6c1968","modified":1731738661181},{"_id":"source/image/plugins/image-20241115212817839.png","hash":"acf09f633be8ac9ac9ec43a9f503f4e7241b7f40","modified":1731738661181},{"_id":"source/image/plugins/image-20241115213646159.png","hash":"f7261d3d04f4645534582d259f19424278ab2cfe","modified":1731738661181},{"_id":"source/image/plugins/image-20241116142022791.png","hash":"ee2c751b5c28d51fe837f8d57637d5065d800dca","modified":1731738661181},{"_id":"source/image/weituo2","hash":"2290416fb431dd0fab01545aa141717d5a7a880c","modified":1730182828260},{"_id":"source/image/Works/yinxiaozhushou.png","hash":"c40e7c65f31e52a14d3906a464fe512ab65a79bf","modified":1731303305034},{"_id":"source/image/plugins/14-1731738661057-14","hash":"6d174dc7588696fc274a12b0cd9d36d51abe381e","modified":1731738661181},{"_id":"source/image/plugins/image-20241115212552111.png","hash":"7a9af464f3c0b76487eab15d7699a2aea18e931b","modified":1731738661182},{"_id":"source/image/plugins/image-20241115213713048.png","hash":"1680efca5968ab842de6bc18f5ceac367e44dace","modified":1731738661182},{"_id":"source/image/plugins/image-20241116141716730.png","hash":"c0be4a739346839d31de5367f65fff768dbd82ad","modified":1731738661182},{"_id":"source/image/plugins/17-1731738661057-17","hash":"ed6e95cc2504cd889985664e026e904f6dde5021","modified":1731738661183},{"_id":"source/image/plugins/image-20241115212035104.png","hash":"8359f07432a08077b2880865f5f8bb1a5342e7d2","modified":1731738661183},{"_id":"source/image/plugins/image-20241115212223351.png","hash":"b27c37ab782eda351a14d4060ec07f38b4f9ac87","modified":1731738661183},{"_id":"source/image/plugins/image-20241115212525780.png","hash":"77d0577c751d1c5ef228a1c9f5c5b37c964bb34e","modified":1731738661183},{"_id":"source/image/plugins/11-1731738661057-12","hash":"d567f457f7e9905499e90e925e76c33bd379a68d","modified":1731738661184},{"_id":"source/image/plugins/9-1731738661057-9.png","hash":"6303197004ff31f502ff729a34abcf86c44985ce","modified":1731738661184},{"_id":"source/image/plugins/image-20241115211442488.png","hash":"3de8a316d3e82bbcc463ae15cee544d607a635a1","modified":1731738661184},{"_id":"source/image/plugins/image-20241115211752915.png","hash":"dcd2b59a9f59fc72e5b5909a634bffbd47080149","modified":1731738661184},{"_id":"source/image/plugins/image-20241115212424168.png","hash":"14f64fedaad23067382ac4931d6371a6208eeef9","modified":1731738661185},{"_id":"source/image/plugins/image-20241115212756604.png","hash":"4b8c16d925296e05c1e6c5b129ce488e2adbcf20","modified":1731738661185},{"_id":"source/image/plugins/image-20241115213622701.png","hash":"7d60c5f62d0d7e54c6f76e36a8a34572e2bd756c","modified":1731738661185},{"_id":"source/image/plugins/image-20241116141858814.png","hash":"6a3545630fa3c78feca1b999fdba31ad8324ff8c","modified":1731738661185},{"_id":"source/image/Works/image-20241108142218797.png","hash":"f7c43b63c41521ea9a0f51ff1028b279121b7488","modified":1731046938882},{"_id":"source/image/plugins/19-1731738661057-19","hash":"de3abaf455538153398ddf98a61efd4b1391de0a","modified":1731738661186},{"_id":"node_modules/hexo-theme-a4/DONATION.md","hash":"ffd0ad1d46c907b68a15bac5da6d75f954b278af","modified":1744637882911},{"_id":"node_modules/hexo-theme-a4/LICENSE","hash":"ce8126c92ca2cb6a667652ceca97e9a9768eb186","modified":1744637882643},{"_id":"node_modules/hexo-theme-a4/README.md","hash":"ba92aefb67ca5d52a47c33052e3b72bad3b2ee43","modified":1744637882915},{"_id":"node_modules/hexo-theme-a4/README-EN.md","hash":"6bce66457a2a8eec84d2832b8db3115a480dd679","modified":1744637882913},{"_id":"node_modules/hexo-theme-a4/README_zh-TW.md","hash":"484d4c53fa1b25359cd94b381d633b9d12e3ee91","modified":1744637882912},{"_id":"node_modules/hexo-theme-a4/_config.yml","hash":"ab97ea4cb4d3e1fb017f045cfb872a34d1e427df","modified":1744637883008},{"_id":"node_modules/hexo-theme-a4/package.json","hash":"143db1fdaaab975b8f7e4706c9a37f0229518052","modified":1744637882910},{"_id":"node_modules/hexo-theme-a4/.github/FUNDING.yml","hash":"20fa3a3d1a4626a1056375b5579f33e692f7b521","modified":1744637883009},{"_id":"node_modules/hexo-theme-a4/layout/categories.ejs","hash":"e7b8d49061fa71dcfb99fcfd42f309d894243a4d","modified":1744637882819},{"_id":"node_modules/hexo-theme-a4/layout/index.ejs","hash":"e325c49cbbcc6cc0daa553d884d1e46c1b3acb31","modified":1744637882841},{"_id":"node_modules/hexo-theme-a4/layout/layout.ejs","hash":"9ab2d7ace5432406b1d46525a2ac560d12f5494e","modified":1744637882843},{"_id":"node_modules/hexo-theme-a4/layout/list.ejs","hash":"30eb9de44b69432c7d81ee7034aea36728d5d1e1","modified":1744637882846},{"_id":"node_modules/hexo-theme-a4/layout/post.ejs","hash":"88c9d574ebe800ea66663f00cf559e00d98fe39e","modified":1744637882852},{"_id":"node_modules/hexo-theme-a4/layout/tags.ejs","hash":"473869c30a7fd70710c684672ef0941334bdf7f9","modified":1744637882858},{"_id":"node_modules/hexo-theme-a4/layout/_partial/404-template.ejs","hash":"eed21859018fd882f12cf923dcafb21b6a9c419a","modified":1744637882804},{"_id":"node_modules/hexo-theme-a4/layout/_partial/categories-list.ejs","hash":"3a638936244d1e079e893198f1b779bebe628072","modified":1744637882814},{"_id":"node_modules/hexo-theme-a4/layout/_partial/footer.ejs","hash":"29fc39ca93d25eeb159cc98d6cfad438793ffeaf","modified":1744637882831},{"_id":"node_modules/hexo-theme-a4/layout/_partial/header.ejs","hash":"e12df1151006cddf94834cdd7cba122d7fef70f1","modified":1744637882837},{"_id":"node_modules/hexo-theme-a4/layout/_partial/head.ejs","hash":"46c25b0bde05eaba863cc0a1782ca88c2685f58b","modified":1744637882834},{"_id":"node_modules/hexo-theme-a4/layout/_partial/paginator.ejs","hash":"980bf0a0be798c19df4b0827aa4b90b35c872425","modified":1744637882848},{"_id":"node_modules/hexo-theme-a4/layout/_partial/post-header.ejs","hash":"3ee16c0a37d3f5a037f6f701803e250949f0b5ea","modified":1744637882850},{"_id":"node_modules/hexo-theme-a4/scripts/events/404.js","hash":"ff22b5ef9d4011f892afb1bd925a1c3832a4bffb","modified":1744637882873},{"_id":"node_modules/hexo-theme-a4/layout/_partial/recent-updates.ejs","hash":"3852f16f9338fec18756145ecfdddd99b606d346","modified":1744637882854},{"_id":"node_modules/hexo-theme-a4/scripts/events/print-theme-info.js","hash":"de15983154f33180a626a9f315547e73eafcfb7a","modified":1744637882898},{"_id":"node_modules/hexo-theme-a4/layout/_partial/tags-list.ejs","hash":"c46f42af0b59432dad954112474ea58d9c55cee2","modified":1744637882856},{"_id":"node_modules/hexo-theme-a4/scripts/events/recent-updates.js","hash":"4cd57a6afd5963a3029fc681b079580d5c4da1cc","modified":1744637882900},{"_id":"node_modules/hexo-theme-a4/scripts/events/wordcount.js","hash":"a55beb3650dff18060f0b24c31ab3421d894ac36","modified":1744637882908},{"_id":"node_modules/hexo-theme-a4/source/css/a11y-dark.min.css","hash":"c9195e658896b7713de1e5bf66720de3acdcd771","modified":1744637882667},{"_id":"node_modules/hexo-theme-a4/source/css/fonts.css","hash":"f1375f78ea897cd3d847d3363526c6a73684edfc","modified":1744637882686},{"_id":"node_modules/hexo-theme-a4/source/css/lightgallery-bundle.min.css","hash":"f498bff98ae4c6dd6a8dedf8e46531360533c77e","modified":1744637882714},{"_id":"node_modules/hexo-theme-a4/source/css/markdown.css","hash":"cbe54ced8806568a4ccbd638608b0ffbe082feed","modified":1744637882728},{"_id":"node_modules/hexo-theme-a4/source/css/reset.css","hash":"f1a75dda120f84aea18a3ee7c9beae8a9c0cc672","modified":1744637882741},{"_id":"node_modules/hexo-theme-a4/source/css/returnToLastPage.css","hash":"790a4886a39e78933641854f05c9f48f027ee480","modified":1744637882751},{"_id":"node_modules/hexo-theme-a4/source/css/returnToTop.css","hash":"b7c61fbc069cff08bcfd0d23a4357fda760ca2ed","modified":1744637882759},{"_id":"node_modules/hexo-theme-a4/source/css/style.css","hash":"048d3b1e96b4893235c3e7f7ebe9d203bd637b4e","modified":1744637882768},{"_id":"node_modules/hexo-theme-a4/source/css/toc.css","hash":"b1370bdcfaf6fedd556d21a36545aa9b061a2884","modified":1744637882775},{"_id":"node_modules/hexo-theme-a4/source/css/ui.css","hash":"9b00f7d6493774fe9aa8fd1f936ea05af8f5e496","modified":1744637882782},{"_id":"node_modules/hexo-theme-a4/source/css/waline.css","hash":"169c69a6180934467897ce6602c5cf6f96550ad2","modified":1744637882798},{"_id":"node_modules/hexo-theme-a4/source/css/unicons.css","hash":"d5975fdcfe8adf98491d605a46acff3eec9eacc9","modified":1744637882792},{"_id":"node_modules/hexo-theme-a4/source/fonts/lg.svg","hash":"334ed729917686828da669ed1c1b34fa2f8dd7d7","modified":1744637882961},{"_id":"node_modules/hexo-theme-a4/source/fonts/lg.ttf","hash":"93d02badb7f8f91e9329c55e2b866f4cbb3af53b","modified":1744637882962},{"_id":"node_modules/hexo-theme-a4/source/fonts/lg.woff","hash":"19b8409145bd7b59916050598e1d6f5eef47c969","modified":1744637882963},{"_id":"node_modules/hexo-theme-a4/source/fonts/lg.woff2","hash":"c95dcd27d474aac92e4298ed7ee41d0eda540b85","modified":1744637882964},{"_id":"node_modules/hexo-theme-a4/source/fonts/notoserifsc-medium-webfont.woff","hash":"7aa9e57b5675f249508c84fb1336ffde6984b464","modified":1744637882963},{"_id":"node_modules/hexo-theme-a4/source/fonts/notoserifsc-medium-webfont.woff2","hash":"806572f21641767c96587f3f9029b7a6a3a12970","modified":1744637883005},{"_id":"node_modules/hexo-theme-a4/source/images/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1744637882867},{"_id":"node_modules/hexo-theme-a4/source/img/A4-favicon.png","hash":"071a1843b9837f8e62da12225764af60082358aa","modified":1744637882921},{"_id":"node_modules/hexo-theme-a4/source/img/favicon.ico","hash":"88cc67aa88538239e06c60c1c5480630141679f0","modified":1744637882871},{"_id":"node_modules/hexo-theme-a4/source/js/darkmode-js.min.js","hash":"4d727f5869eb024ba2a0861224425864f09550a2","modified":1744637882876},{"_id":"node_modules/hexo-theme-a4/source/js/hitokoto.js","hash":"3f67d37cb9be697638879a066bf1fa0bde9c7248","modified":1744637882881},{"_id":"node_modules/hexo-theme-a4/source/js/randomHeaderContent.js","hash":"9ead7f97417622c9b1d8b5557d638829ee6d34ec","modified":1744637882899},{"_id":"node_modules/hexo-theme-a4/source/js/returnToLastPage.js","hash":"1156b5195ab27b96068f78bc84fb48f339228537","modified":1744637882903},{"_id":"node_modules/hexo-theme-a4/source/js/returnToTop.js","hash":"ad340f49b94e6b7d30362dd784ace3a2690b23de","modified":1744637882904},{"_id":"node_modules/hexo-theme-a4/source/js/roughNotation.js","hash":"206a529be99e27e0b14137b845eacc6a2a9eb704","modified":1744637882906},{"_id":"node_modules/hexo-theme-a4/source/js/toc.js","hash":"78529109230f9d5ce3a91ac1278f6a8d3910d237","modified":1744637882907},{"_id":"node_modules/hexo-theme-a4/layout/_partial/comments/artalk.ejs","hash":"841a6cb5dd5544cebab1b1a4c1e85138dfec27ec","modified":1744637882811},{"_id":"node_modules/hexo-theme-a4/layout/_partial/comments/comment.ejs","hash":"5a0004f6d810a160289ecb87a3e55088cb269e06","modified":1744637882825},{"_id":"node_modules/hexo-theme-a4/layout/_partial/comments/waline.ejs","hash":"f9f512e568e1ab133783b34bf1ee65dd87ff9c29","modified":1744637882862},{"_id":"node_modules/hexo-theme-a4/layout/_partial/configcss/font.ejs","hash":"d7cf68b214e4e700584d270d24662c62b075bc08","modified":1744637882828},{"_id":"node_modules/hexo-theme-a4/layout/_partial/comments/twikoo.ejs","hash":"0316681c3d19a3050180e9a7802f90ca410a7d4b","modified":1744637882860},{"_id":"node_modules/hexo-theme-a4/layout/_partial/configcss/imageShow.ejs","hash":"d193a86d36f40974c9207c38f3a111dd718fd51d","modified":1744637882838},{"_id":"node_modules/hexo-theme-a4/layout/_partial/configcss/width.ejs","hash":"5e24e7f7ef6385f203b1c0f706f8d1a6a185d6d9","modified":1744637882864},{"_id":"node_modules/hexo-theme-a4/scripts/events/gallery/gallery.js","hash":"1b0c6370a4bb373e91948777fddd4baabf9ad735","modified":1744637882879},{"_id":"node_modules/hexo-theme-a4/layout/_partial/configcss/color.ejs","hash":"56b374c0ee7384a5c764a2586f99b71800b72b20","modified":1744637882823},{"_id":"node_modules/hexo-theme-a4/scripts/events/gallery/renderer.js","hash":"a633365ef40edb903df15be0d223200cb2f915cf","modified":1744637882902},{"_id":"node_modules/hexo-theme-a4/source/css/highlight/_variables.styl","hash":"d9980a54a303b8d43492016c3fec89ef862674c3","modified":1744637882959},{"_id":"node_modules/hexo-theme-a4/source/css/highlight/highlight.styl","hash":"3dfc13b90aac4e5513a91e621452c739180abfe2","modified":1744637882959},{"_id":"node_modules/hexo-theme-a4/source/css/highlight/style1.styl","hash":"721ae9095f5a694feb02185d50b08340fd491bc6","modified":1744637882960},{"_id":"node_modules/hexo-theme-a4/source/js/lightgallery/lightgallery.umd.min.js","hash":"f3b20b42e985fd865c5c837abddd631eb4a0bf3f","modified":1744637882896},{"_id":"node_modules/hexo-theme-a4/source/js/lightgallery/plugins/lg-autoplay.umd.min.js","hash":"bf12dfe7c2a9e9f7d60b6256808b0d119734a6b6","modified":1744637882884},{"_id":"node_modules/hexo-theme-a4/source/js/lightgallery/plugins/lg-fullscreen.umd.min.js","hash":"e4e59c55ccca0093a1ecf16a0260cc278d2761a8","modified":1744637882885},{"_id":"node_modules/hexo-theme-a4/source/js/lightgallery/plugins/lg-paper.umd.min.js","hash":"e2185b5effa23e8cd3de4da53b805869d7b95a25","modified":1744637882887},{"_id":"node_modules/hexo-theme-a4/source/js/lightgallery/plugins/lg-rotate.umd.min.js","hash":"b692fb1de46690c57c850eb6ec6874f9f5d87d4d","modified":1744637882888},{"_id":"node_modules/hexo-theme-a4/source/js/lightgallery/plugins/lg-thumbnail.umd.min.js","hash":"02e732da96ca5ab6131aec5477724eb99dc45ebb","modified":1744637882890},{"_id":"node_modules/hexo-theme-a4/source/js/lightgallery/plugins/lg-zoom.umd.min.js","hash":"9c035aa445ac03c3ad97769ef71787009417fac9","modified":1744637882892},{"_id":"source/image/plugins/image-20241115214150403.png","hash":"d75042adbefa9a26f9c65b07f4525aab0a62b4d4","modified":1731738661186},{"_id":"source/image/plugins/image-20241116142234089.png","hash":"7b057899dd7343b4b460e59083a68a4b06b49873","modified":1731738661186},{"_id":"source/image/ksohtml924/wps2.png","hash":"fd860810ae766dbb9fda045ef02921f89d5d8334","modified":1730706689607},{"_id":"source/image/ksohtml924/wps9.png","hash":"fd860810ae766dbb9fda045ef02921f89d5d8334","modified":1730706741263},{"_id":"source/image/plugins/image-20241105215834060.png","hash":"05eb11ac41339bd6b814ee8bdc8f10b131af7329","modified":1731738661188},{"_id":"source/image/plugins/image-20241115211522282.png","hash":"7c6d3c3c5987792edd72b5eea1a7554f3a54b7b9","modified":1731738661187},{"_id":"node_modules/hexo-theme-a4/source/img/A4800x500.png","hash":"89b8c7c5ac138040b90cfa9a59f22fd1bad2f4c8","modified":1744637882923},{"_id":"source/image/plugins/image-20241115212457855.png","hash":"7995db302e7fe1ccac6d1e716ae05e8f031aef03","modified":1731738661187},{"_id":"source/image/plugins/image-20241115212849947.png","hash":"4ba637a44f33d59034aba0cfc3cecc8b1f4e4ade","modified":1731738661187},{"_id":"source/image/plugins/image-20241115213215222.png","hash":"f239c7b8bf672d7bdb603251926b8f6bb96247fd","modified":1731738661188},{"_id":"source/img/favicon.webp","hash":"4cebc847fd18987ec6feda20331f4aa3912b4e89","modified":1744543075080},{"_id":"source/image/Works/guodaxia.png","hash":"464fef41651d0660c8c875ea37ff6bcbc1e9e864","modified":1731305490428},{"_id":"node_modules/hexo-theme-a4/source/fonts/unicons.woff2","hash":"cf4d57c94f25dc76fbbea9bc1ca2a04f07b18c7c","modified":1744637883007},{"_id":"node_modules/hexo-theme-a4/source/img/market.png","hash":"d01a7a247c337b6d57f9e92282014cd9ce2742e0","modified":1744637882952},{"_id":"node_modules/hexo-theme-a4/source/js/waline.mjs","hash":"c2c6dd80d2a4c2fe0add14d62480706f3f98dc53","modified":1744637882919},{"_id":"source/image/plugins/image-20241115212353272.png","hash":"00f88facc5f040479ed6ee345811f05bec28cd24","modified":1731738661190},{"_id":"source/image/plugins/image-20241115211932623.png","hash":"2c2e09d6964784a731d8c726294e11fa0d4cc157","modified":1731738661193},{"_id":"source/image/plugins/image-20241115212917144.png","hash":"19d6106754c99b03e4b0314e3f742d3d77745c86","modified":1731738661200},{"_id":"source/image/Works/xiaoqiao2.png","hash":"6bf8a6e86484c1a7e090a4d6aba4daea57f72563","modified":1731304403606},{"_id":"node_modules/hexo-theme-a4/source/img/index.png","hash":"3790e348a9505a4674a1064b1a39f04fbe623921","modified":1744637882949},{"_id":"source/image/plugins/image-20241115214524815.png","hash":"e9f680ab3dabfb5ce943cc5de8ba6b99e35a68d7","modified":1731738661203},{"_id":"source/image/plugins/image-20241115212134397.png","hash":"96b6e7faf2089720b70cbe08ac257ba87d9cd15b","modified":1731738661204},{"_id":"node_modules/hexo-theme-a4/source/img/comment.png","hash":"135daf6ffacb237130f3b4bb310e143d1ea0c54f","modified":1744637882938},{"_id":"node_modules/hexo-theme-a4/source/img/favicon.png","hash":"a902d607b2c187ec1a0d8d325104a355ff19e2be","modified":1744637882944},{"_id":"node_modules/hexo-theme-a4/source/img/tags&&categories.png","hash":"647c22f4a496f82219804bbb4385f62464e8ab2c","modified":1744637882958},{"_id":"source/image/plugins/image-20241105220224257.png","hash":"a62ad68aa0c95318156fdf2fe340b547efca305d","modified":1731738661205},{"_id":"node_modules/hexo-theme-a4/source/img/archive.png","hash":"0e976edda0d6c74806d8ffbb44e2b4d917e26981","modified":1744637882931},{"_id":"source/image/Works/xiaoqiao1.png","hash":"cc16638247df61dda5c311bb4bcd8f3f0d22efa5","modified":1731304371331},{"_id":"source/image/Works/mix_console2.jpg","hash":"f1c0dcd6529a2795e4ac15a9a0fa15bd80619926","modified":1731674612705},{"_id":"source/image/Works/mix_console.jpg","hash":"f12d8b9a951e3ba172abad3833972b9279f7d94e","modified":1731674533306},{"_id":"node_modules/hexo-theme-a4/source/fonts/LXGWWenKaiLite-Regular.woff2","hash":"e66dcd89dc0fdc3fd924d2e2586a958d07d98add","modified":1744637883005},{"_id":"node_modules/hexo-theme-a4/source/fonts/LXGWWenKaiLite-Bold.woff2","hash":"5297ae11b2e9344d85fd402b7b18c2d1b638c751","modified":1744637882985},{"_id":"source/video/LilliaRedesign.mp4","hash":"a803f2a47c1313c11e11f37441563bdde822f00e","modified":1743434321857},{"_id":"public/404.html","hash":"cfef4b48a83701b45c494e166fa72e522dbd037a","modified":1744641549039},{"_id":"public/recent-updates/index.html","hash":"62e337ea96657bff7c6205d3f677c1be2415ed69","modified":1745553555170},{"_id":"public/index/index.html","hash":"96238d51e017b0fe882bd4d448a961ba8dd64149","modified":1745553555170},{"_id":"public/about/index.html","hash":"ceac5e81747a02c08e2cf2e684460d8116f23835","modified":1744641549039},{"_id":"public/list/index.html","hash":"480b259b799d230ebbf64bc08f9b679fd16fa531","modified":1745553555170},{"_id":"public/works/index.html","hash":"e1415c04a5d82c2a8734db903187090218625148","modified":1745553693851},{"_id":"public/index.html","hash":"60973132706e3b96740339831429278b0129de1d","modified":1745553555170},{"_id":"public/archives/index.html","hash":"907130ec9823b62a7b09f44ae79074a7d620ae59","modified":1744641549039},{"_id":"public/2025/04/13/调音台_MIDAS-M32-DN32-LIVE调音台直播链路/index.html","hash":"cda8b903a75e4d32594fbf67e53da4c95a4942a2","modified":1745553555170},{"_id":"public/archives/2025/04/index.html","hash":"907130ec9823b62a7b09f44ae79074a7d620ae59","modified":1744641549039},{"_id":"public/archives/2025/index.html","hash":"907130ec9823b62a7b09f44ae79074a7d620ae59","modified":1744641549039},{"_id":"public/2025/04/13/直播音频设计方案/index.html","hash":"3f471f71b120d28bac3922a4a06eb769bc315b09","modified":1745553555170},{"_id":"public/2025/04/13/音频软件开发_基于ffmpeg的音频格式转换器/index.html","hash":"5481e66be69b289969b878e27bd5178f53ffedfb","modified":1744641549039},{"_id":"public/2025/04/13/音频软件开发_音效助手开发/index.html","hash":"468f9ed2f881d29d7b16994264e9e7177d68f814","modified":1744641549039},{"_id":"public/2025/04/13/声学原理和音频硬件原理/index.html","hash":"7d3336dc15a2faa1ff02543ccadc64ad2ac103c8","modified":1744641549039},{"_id":"public/2025/04/13/无忧传媒工作内容归档/index.html","hash":"79a17c1608788df5413a8529f6100777fa175172","modified":1744641549039},{"_id":"public/fonts/lg.svg","hash":"334ed729917686828da669ed1c1b34fa2f8dd7d7","modified":1744641549039},{"_id":"public/fonts/lg.woff","hash":"19b8409145bd7b59916050598e1d6f5eef47c969","modified":1744641549039},{"_id":"public/fonts/lg.ttf","hash":"93d02badb7f8f91e9329c55e2b866f4cbb3af53b","modified":1744641549039},{"_id":"public/fonts/lg.woff2","hash":"c95dcd27d474aac92e4298ed7ee41d0eda540b85","modified":1744641549039},{"_id":"public/fonts/notoserifsc-medium-webfont.woff2","hash":"806572f21641767c96587f3f9029b7a6a3a12970","modified":1744641549039},{"_id":"public/fonts/notoserifsc-medium-webfont.woff","hash":"7aa9e57b5675f249508c84fb1336ffde6984b464","modified":1744641549039},{"_id":"public/images/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1744641549039},{"_id":"public/img/A4-favicon.png","hash":"071a1843b9837f8e62da12225764af60082358aa","modified":1744641549039},{"_id":"public/img/favicon.ico","hash":"88cc67aa88538239e06c60c1c5480630141679f0","modified":1744641549039},{"_id":"public/image/Typora/3.png","hash":"ea02884caa242c9087f4d4612a31d85b32db1125","modified":1744641549039},{"_id":"public/image/Typora/4.png","hash":"207884b403c16a536981ecc16e6e7931a9decf7b","modified":1744641549039},{"_id":"public/image/Typora/6.png","hash":"5469d1f7a175923bcf0dcd64699cd6139c02cb7a","modified":1744641549039},{"_id":"public/image/Typora/5.png","hash":"0e2a235bb58e707ed90cc45f1d77d0e48dcf8b2f","modified":1744641549039},{"_id":"public/image/Typora/Delay.png","hash":"c08ae3055888c3075ef774b5335ec9bcc19a88bc","modified":1744641549039},{"_id":"public/image/Typora/Close.png","hash":"c0189c08dc2ac0e4ac2f8e85237b14cd3b93a6ea","modified":1744641549039},{"_id":"public/image/Typora/Fade.png","hash":"2042bce925681574a3c025a1fedc5189a5f34a0d","modified":1744641549039},{"_id":"public/image/Typora/ProfilerFilteringToolbar.png","hash":"a3c4cfda7a0d35933e386bbccbdd4ed9e4847213","modified":1744641549039},{"_id":"public/image/Typora/Lowpassfilter.png","hash":"003e9f1ce86e869a2a1ad2b9cc502fb2320d3576","modified":1744641549039},{"_id":"public/image/Typora/Reset.png","hash":"cd8f30e3ca1917d4d0fc1618a80d11443488d32c","modified":1744641549039},{"_id":"public/image/Typora/add path.png","hash":"adae19a632afb9e0fb11a76125507e0ae1af954d","modified":1744641549039},{"_id":"public/image/Typora/Pitch.png","hash":"fde80254f8c280f4c7a2a560143557b22f8bc083","modified":1744641549039},{"_id":"public/image/Typora/add generic path.png","hash":"df2aa9065e377ac4eb12ad4023895238dcd21e84","modified":1744641549039},{"_id":"public/image/Typora/add to current packkage.png","hash":"10180d6fba2a127dd7b69fc8dbda265f6dd5475f","modified":1744641549039},{"_id":"public/image/Typora/add.png","hash":"a527e2074ed86b019bed584976d032a56b47421a","modified":1744641549039},{"_id":"public/image/Typora/bypass.png","hash":"7881cfbb07ad6371055a20f304ab76b857a34bc5","modified":1744641549039},{"_id":"public/image/Typora/blue.png","hash":"aaf33d902bb359e34b4b89be692cb9aa91b57e3e","modified":1744641549039},{"_id":"public/image/Typora/addtolayout.png","hash":"cfdb0ef071dc3a7776ef6c3d873d074db4cd8861","modified":1744641549039},{"_id":"public/image/Typora/duck.png","hash":"f2cbf5db0c5b2676f1b6e13c2ad234eb29ff9b98","modified":1744641549039},{"_id":"public/image/Typora/choose.png","hash":"9d8822a7a8b24d9b0874895e31da4b58395b8059","modified":1744641549039},{"_id":"public/image/Typora/auxiliary_bus.png","hash":"19326108de3ae5c3c5e74552772b137f3589e607","modified":1744641549039},{"_id":"public/image/Typora/configureColumns.png","hash":"5cf8a6aa581c1f4da5e06d491715a69f48b2c3c0","modified":1744641549039},{"_id":"public/image/Typora/ducking.png","hash":"5fdd9cc4c49656142e2e4a69b336f54331b72210","modified":1744641549039},{"_id":"public/image/Typora/eyes.png","hash":"76064245405a7873e630186b4d7c1f55b4da82be","modified":1744641549039},{"_id":"public/image/Typora/fp_add.png","hash":"6627effe8fad2f2206695efa7b53b32f29032e1f","modified":1744641549039},{"_id":"public/image/Typora/effect_1.png","hash":"c175fb956d42002a2eb183339a47096b36b8714c","modified":1744641549039},{"_id":"public/image/Typora/fp_copytoclipboard.png","hash":"9263cf4c15a22a2fbb58485b38e948cea22a33eb","modified":1744641549039},{"_id":"public/image/Typora/fp_editlayout.png","hash":"7570142134e0be04ec2cd40c6ba4b65d64cd7030","modified":1744641549039},{"_id":"public/image/Typora/fp_remove.png","hash":"5d4009cf040e67e60803fb6a6c7fd6dba5ae4231","modified":1744641549039},{"_id":"public/image/Typora/effect_@.png","hash":"d20be5d32fce269c83214e1e8d1060368d091296","modified":1744641549039},{"_id":"public/image/Typora/gray.png","hash":"bc9bbac2f7b655d5062dcc0024a0d77157946295","modified":1744641549039},{"_id":"public/image/Typora/line_1.png","hash":"98e1594a1497b8aa156a99981c9eb92e8a0f8927","modified":1744641549039},{"_id":"public/image/Typora/fp_removeallmissingfiles.png","hash":"df1be5309b441249f17b7545f9481c63e2436994","modified":1744641549039},{"_id":"public/image/Typora/line_3.png","hash":"a0583657bb93a9baf98d2c9ee0e7aa61c887c636","modified":1744641549039},{"_id":"public/image/Typora/line_4.png","hash":"a127358e68e44a0cc6c66125b9fde6597a9269e9","modified":1744641549039},{"_id":"public/image/Typora/live.png","hash":"c1e217cce350ed866776225d4d05bb28eec5df2e","modified":1744641549039},{"_id":"public/image/Typora/caster_mute.png","hash":"ca96d17cddc807fedc7843e1813fbc52a5744062","modified":1744641549039},{"_id":"public/image/Typora/nable_bypass.png","hash":"b086b3184d602d12f41f7e065072f8333983a2dd","modified":1744641549039},{"_id":"public/image/Typora/mute.png","hash":"5a623da268f7debbe5a87646b0ff933b65d2e34b","modified":1744641549039},{"_id":"public/image/Typora/performance setting.png","hash":"d727d1b3a2e9ec013834d0995fe4bc1a7d813efc","modified":1744641549039},{"_id":"public/image/Typora/master_bus.png","hash":"67489a6a09da8bca4f504683b6d5e8c4c3089d76","modified":1744641549039},{"_id":"public/image/Typora/pause.png","hash":"6515cba994b848f3dba7bd060dbe4377575e0f76","modified":1744641549039},{"_id":"public/image/Typora/orange.png","hash":"5934a0c05bd1d685599cd5d6489499f4bbd0647e","modified":1744641549039},{"_id":"public/image/Typora/line_2.png","hash":"2f6ecc5b24651b88fdee3e49e8ef3c312f459800","modified":1744641549039},{"_id":"public/image/Typora/playback.png","hash":"d771e58c836374e6eba71b08ab47532aab95d3f3","modified":1744641549039},{"_id":"public/image/Typora/position.png","hash":"e8df7c2f859e3e2d4622b8312d9a5d93b1922c4e","modified":1744641549039},{"_id":"public/image/Typora/remove path.png","hash":"93237d5ce3af23e45aa60f01cab2c0e993614d3f","modified":1744641549039},{"_id":"public/image/Typora/rtpc.png","hash":"8e6eb90f232653df8f82e08e28d96c7ec29584af","modified":1744641549039},{"_id":"public/image/Typora/save.png","hash":"9f391a603739f5c5bc54c0e1519346c6eeb94d19","modified":1744641549039},{"_id":"public/image/Typora/search.png","hash":"c3e6d2bc1fbaf4629e05b046caf7f1eea7be100a","modified":1744641549039},{"_id":"public/image/Typora/search_2.png","hash":"350e8f590137cfd0e0922775c787673d4702c984","modified":1744641549039},{"_id":"public/image/Typora/select none.png","hash":"a35d7533dd3e1d9cc32c32dab9447e6b4aaf8eb1","modified":1744641549039},{"_id":"public/image/Typora/setting.png","hash":"25331697cf80e678e8a6736b53ccacf9c778a712","modified":1744641549039},{"_id":"public/image/Typora/select all.png","hash":"7e63668775cb85f9947120838d83de1224f767ce","modified":1744641549039},{"_id":"public/image/Typora/stateGroup.png","hash":"832cd4ec3d96f444d1db21ebf468197b1d7f07dc","modified":1744641549039},{"_id":"public/image/Typora/stop.png","hash":"5163e0b9203f0313b35e2c94dd05bec4d0461e60","modified":1744641549039},{"_id":"public/image/Typora/white.png","hash":"1ef759e03eced8550c115edd450f5b442ef7fba8","modified":1744641549039},{"_id":"public/image/Typora/voice volume.png","hash":"cf1f5bbc15fd908547ecbbf0f464ad4cc86f1c5c","modified":1744641549039},{"_id":"public/image/Typora/unselectAll.png","hash":"33f93993ac2b27a710831b394e62e6ae5e671277","modified":1744641549039},{"_id":"public/image/Typora/update path.png","hash":"a8ad6a634198e5963de77fbedd5d1c78f6d4b445","modified":1744641549039},{"_id":"public/image/ksohtml924/wps1.jpg","hash":"8bc06837978ccaff508d12970408a6e6af26fc10","modified":1744641549039},{"_id":"public/image/ksohtml924/wps11.jpg","hash":"1b87cd5ee8615a59b8b6befb3098e500404e2e40","modified":1744641549039},{"_id":"public/image/ksohtml924/wps12.jpg","hash":"881e5d8beb6bed2606bbe26ddef769348defd0e0","modified":1744641549039},{"_id":"public/image/ksohtml924/wps10.jpg","hash":"ab51493957940dafdf5d06af4eeac96afffdb083","modified":1744641549039},{"_id":"public/image/ksohtml924/wps14.jpg","hash":"16de1452672970ca4b5863ed9d401acd4f80daaf","modified":1744641549039},{"_id":"public/image/ksohtml924/wps13.jpg","hash":"521014e425ae80cb195391cacd1082d4f1b166e5","modified":1744641549039},{"_id":"public/image/ksohtml924/wps4.jpg","hash":"1b87cd5ee8615a59b8b6befb3098e500404e2e40","modified":1744641549039},{"_id":"public/image/ksohtml924/wps3.jpg","hash":"ab51493957940dafdf5d06af4eeac96afffdb083","modified":1744641549039},{"_id":"public/image/ksohtml924/wps5.jpg","hash":"881e5d8beb6bed2606bbe26ddef769348defd0e0","modified":1744641549039},{"_id":"public/image/ksohtml924/wps6.jpg","hash":"521014e425ae80cb195391cacd1082d4f1b166e5","modified":1744641549039},{"_id":"public/image/ksohtml924/wps8.jpg","hash":"8bc06837978ccaff508d12970408a6e6af26fc10","modified":1744641549039},{"_id":"public/image/ksohtml924/wps7.jpg","hash":"16de1452672970ca4b5863ed9d401acd4f80daaf","modified":1744641549039},{"_id":"public/image/Works/image-20241128163559693.png","hash":"0bc545c127bdb130c71b7d0dd153e4f2ef0ef260","modified":1744641549039},{"_id":"public/img/A4800x500.png","hash":"89b8c7c5ac138040b90cfa9a59f22fd1bad2f4c8","modified":1744641549039},{"_id":"public/image/weituo","hash":"e1d3f241fd183d45acf998bbd06c8a1f2daf780d","modified":1744641549039},{"_id":"public/image/Typora/1.png","hash":"066160d1a5d21a0d7be7e2709344be6ed23d3ec4","modified":1744641549039},{"_id":"public/image/plugins/3-1731738661057-3.png","hash":"75a23062821e3b976e6a104cbb0a7166fe351baf","modified":1744641549039},{"_id":"public/image/plugins/4-1731738661057-4.png","hash":"9ac8088405cedd9057e996a1e71fde48e7d7e4eb","modified":1744641549039},{"_id":"public/image/plugins/6-1731738661057-6.png","hash":"49c5deed69a67ca2a1ccc864957ae768bbd0e464","modified":1744641549039},{"_id":"public/css/a11y-dark.min.css","hash":"c9195e658896b7713de1e5bf66720de3acdcd771","modified":1744641549039},{"_id":"public/css/reset.css","hash":"f1a75dda120f84aea18a3ee7c9beae8a9c0cc672","modified":1744641549039},{"_id":"public/css/fonts.css","hash":"f1375f78ea897cd3d847d3363526c6a73684edfc","modified":1744641549039},{"_id":"public/css/markdown.css","hash":"cbe54ced8806568a4ccbd638608b0ffbe082feed","modified":1744641549039},{"_id":"public/css/returnToLastPage.css","hash":"790a4886a39e78933641854f05c9f48f027ee480","modified":1744641549039},{"_id":"public/css/returnToTop.css","hash":"b7c61fbc069cff08bcfd0d23a4357fda760ca2ed","modified":1744641549039},{"_id":"public/css/toc.css","hash":"b1370bdcfaf6fedd556d21a36545aa9b061a2884","modified":1744641549039},{"_id":"public/css/style.css","hash":"048d3b1e96b4893235c3e7f7ebe9d203bd637b4e","modified":1744641549039},{"_id":"public/css/ui.css","hash":"9b00f7d6493774fe9aa8fd1f936ea05af8f5e496","modified":1744641549039},{"_id":"public/js/darkmode-js.min.js","hash":"4d727f5869eb024ba2a0861224425864f09550a2","modified":1744641549039},{"_id":"public/js/hitokoto.js","hash":"3f67d37cb9be697638879a066bf1fa0bde9c7248","modified":1744641549039},{"_id":"public/js/randomHeaderContent.js","hash":"9ead7f97417622c9b1d8b5557d638829ee6d34ec","modified":1744641549039},{"_id":"public/js/returnToTop.js","hash":"ad340f49b94e6b7d30362dd784ace3a2690b23de","modified":1744641549039},{"_id":"public/js/returnToLastPage.js","hash":"1156b5195ab27b96068f78bc84fb48f339228537","modified":1744641549039},{"_id":"public/js/toc.js","hash":"78529109230f9d5ce3a91ac1278f6a8d3910d237","modified":1744641549039},{"_id":"public/js/roughNotation.js","hash":"206a529be99e27e0b14137b845eacc6a2a9eb704","modified":1744641549039},{"_id":"public/css/highlight/highlight.css","hash":"59016961113fa60a5f7571e10a21254c458e943f","modified":1744641549039},{"_id":"public/js/lightgallery/plugins/lg-autoplay.umd.min.js","hash":"bf12dfe7c2a9e9f7d60b6256808b0d119734a6b6","modified":1744641549039},{"_id":"public/css/highlight/style1.css","hash":"136fb43ceb001fac5b7487cf023481ce8fdd5553","modified":1744641549039},{"_id":"public/js/lightgallery/plugins/lg-fullscreen.umd.min.js","hash":"e4e59c55ccca0093a1ecf16a0260cc278d2761a8","modified":1744641549039},{"_id":"public/js/lightgallery/plugins/lg-paper.umd.min.js","hash":"e2185b5effa23e8cd3de4da53b805869d7b95a25","modified":1744641549039},{"_id":"public/js/lightgallery/plugins/lg-rotate.umd.min.js","hash":"b692fb1de46690c57c850eb6ec6874f9f5d87d4d","modified":1744641549039},{"_id":"public/js/lightgallery/plugins/lg-thumbnail.umd.min.js","hash":"02e732da96ca5ab6131aec5477724eb99dc45ebb","modified":1744641549039},{"_id":"public/css/lightgallery-bundle.min.css","hash":"f498bff98ae4c6dd6a8dedf8e46531360533c77e","modified":1744641549039},{"_id":"public/css/waline.css","hash":"169c69a6180934467897ce6602c5cf6f96550ad2","modified":1744641549039},{"_id":"public/js/lightgallery/lightgallery.umd.min.js","hash":"f3b20b42e985fd865c5c837abddd631eb4a0bf3f","modified":1744641549039},{"_id":"public/css/unicons.css","hash":"d5975fdcfe8adf98491d605a46acff3eec9eacc9","modified":1744641549039},{"_id":"public/js/lightgallery/plugins/lg-zoom.umd.min.js","hash":"9c035aa445ac03c3ad97769ef71787009417fac9","modified":1744641549039},{"_id":"public/image/plugins/image-20241116141943894.png","hash":"9b0dbf0da6dd44d7ff26deb840bf30167f4d0c66","modified":1744641549039},{"_id":"public/image/Works/image-20241128163143502.png","hash":"4dd6f7322de3393b9044035aaa9f7e902eae347e","modified":1744641549039},{"_id":"public/image/Works/image-20241128163530552.png","hash":"04c14b3c37cbcefd1e262a031de0cd6168f7b0a0","modified":1744641549039},{"_id":"public/image/Works/image-20241128163249375.png","hash":"94f6968cc0623dea5236c654fd94f32b77666876","modified":1744641549039},{"_id":"public/image/Works/image-20241128163335812.png","hash":"2ebfb8e464ea6e06f8904802a36eaf821db7e2d1","modified":1744641549039},{"_id":"public/image/Works/image-20241128163425391.png","hash":"bccff22920faa36bc83e2628aa12351e12289040","modified":1744641549039},{"_id":"public/fonts/unicons.woff2","hash":"cf4d57c94f25dc76fbbea9bc1ca2a04f07b18c7c","modified":1744641549039},{"_id":"public/img/market.png","hash":"d01a7a247c337b6d57f9e92282014cd9ce2742e0","modified":1744641549039},{"_id":"public/js/waline.mjs","hash":"c2c6dd80d2a4c2fe0add14d62480706f3f98dc53","modified":1744641549039},{"_id":"public/image/weituo3","hash":"40be38ee19e5ad94685743e21378ce1469167ad9","modified":1744641549039},{"_id":"public/image/Typora/2.png","hash":"b220d88cdfcc08ec5833131df13fab2fe5b4707d","modified":1744641549039},{"_id":"public/image/Works/image-20241128163629704.png","hash":"5c9b2f7be023fcff75b0a1b4c1e0899041c2c672","modified":1744641549039},{"_id":"public/image/Works/image-20241128164245032.png","hash":"1ff48cac98c41fd2aa18ebe007f270c6578cb27b","modified":1744641549039},{"_id":"public/image/Works/image-20241128163721553.png","hash":"e442df039fcc9c1b125f0f25cc09da810d3cf07e","modified":1744641549039},{"_id":"public/image/plugins/10-1731738661057-10.png","hash":"402e2859fc42e07e0a324fe4fa8640be7aa7b425","modified":1744641549039},{"_id":"public/image/plugins/15-1731738661057-15","hash":"4d37fb932c01f64544ab7768eaf9366af8864215","modified":1744641549039},{"_id":"public/image/plugins/image-20241115211414880.png","hash":"4ca5612d94e3c0a101057a33cac27e9a59b08411","modified":1744641549039},{"_id":"public/image/plugins/image-20241115211725750.png","hash":"653a082c1e0b85f7179609d6369926519e61ab0a","modified":1744641549039},{"_id":"public/image/Works/image-20241128163652040.png","hash":"e4d2a801cd4dae85db6827fb211b457678fff329","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212617107.png","hash":"aa5e07f6e651076fe64cf62548969caf26f9bd2e","modified":1744641549039},{"_id":"public/image/plugins/image-20241115213503997.png","hash":"5c27c99447f165b3b34a291023202252bc16e210","modified":1744641549039},{"_id":"public/image/plugins/image-20241116142427292.png","hash":"f19bb0bda5b205d8ea71ade6ed7ddfd9d108dfe1","modified":1744641549039},{"_id":"public/image/plugins/1-1731738661057-1","hash":"5022565df1f440e51c735e03cf03e34f4c06c82f","modified":1744641549039},{"_id":"public/image/plugins/12-1731738661057-11","hash":"6cb8beab7ad6fbf7b881b273273ac462c93b2966","modified":1744641549039},{"_id":"public/image/plugins/16-1731738661057-16","hash":"18de1d45ed768830b97c1f7c678f0bc423ab4ef7","modified":1744641549039},{"_id":"public/image/plugins/18-1731738661057-18","hash":"ae3b12b291e5395c08fb86ee709d79f69f742987","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212249085.png","hash":"0a0b643dbc90148b1ac4ed79c9e0fc3c2baabac3","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212640312.png","hash":"892ab85e8a85287c23d264d5d45fd9bc9f6b9944","modified":1744641549039},{"_id":"public/image/plugins/image-20241115213322228.png","hash":"764f77ba16d6f1489400f45a0876c857cea952f3","modified":1744641549039},{"_id":"public/image/plugins/image-20241116141752644.png","hash":"4a4686c20d2d15e85c09c9482cb07490878193c4","modified":1744641549039},{"_id":"public/image/plugins/image-20241115214318192.png","hash":"af7363cce756a30c8acdc519963e0005624a446a","modified":1744641549039},{"_id":"public/image/plugins/image-20241116142511129.png","hash":"b0e3556db9d3bf35f2c8783761e674b6f91beb3e","modified":1744641549039},{"_id":"public/img/index.png","hash":"3790e348a9505a4674a1064b1a39f04fbe623921","modified":1744641549039},{"_id":"public/image/weituo2","hash":"2290416fb431dd0fab01545aa141717d5a7a880c","modified":1744641549039},{"_id":"public/image/plugins/13-1731738661057-13","hash":"2c42c7a3b8f6dceebed818ae09a11628dcbd5056","modified":1744641549039},{"_id":"public/image/plugins/7-1731738661057-7.png","hash":"690f601a2cc937aeacc327137807bc2647eedb7d","modified":1744641549039},{"_id":"public/image/plugins/2-1731738661057-2.png","hash":"3620b15192b6ce988e66866396be075b04d28c08","modified":1744641549039},{"_id":"public/image/plugins/5-1731738661057-5.png","hash":"8f767f755b66b5c5bb05d97534254252887c7b16","modified":1744641549039},{"_id":"public/image/plugins/8-1731738661057-8.png","hash":"317b92bcc45e654d35862bcbd732d530327bee45","modified":1744641549039},{"_id":"public/image/plugins/image-20241115211900992.png","hash":"133c38227ecc6e60e7142b9ea76720f149b5d9fb","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212325460.png","hash":"975d836d6336bdc71115d05ddee75f76ac6c1968","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212817839.png","hash":"acf09f633be8ac9ac9ec43a9f503f4e7241b7f40","modified":1744641549039},{"_id":"public/image/plugins/image-20241115213646159.png","hash":"f7261d3d04f4645534582d259f19424278ab2cfe","modified":1744641549039},{"_id":"public/image/plugins/image-20241116142022791.png","hash":"ee2c751b5c28d51fe837f8d57637d5065d800dca","modified":1744641549039},{"_id":"public/img/favicon.png","hash":"a902d607b2c187ec1a0d8d325104a355ff19e2be","modified":1744641549039},{"_id":"public/img/tags&&categories.png","hash":"647c22f4a496f82219804bbb4385f62464e8ab2c","modified":1744641549039},{"_id":"public/img/comment.png","hash":"135daf6ffacb237130f3b4bb310e143d1ea0c54f","modified":1744641549039},{"_id":"public/image/Works/yinxiaozhushou.png","hash":"c40e7c65f31e52a14d3906a464fe512ab65a79bf","modified":1744641549039},{"_id":"public/image/plugins/14-1731738661057-14","hash":"6d174dc7588696fc274a12b0cd9d36d51abe381e","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212552111.png","hash":"7a9af464f3c0b76487eab15d7699a2aea18e931b","modified":1744641549039},{"_id":"public/image/plugins/image-20241115213713048.png","hash":"1680efca5968ab842de6bc18f5ceac367e44dace","modified":1744641549039},{"_id":"public/image/plugins/image-20241116141716730.png","hash":"c0be4a739346839d31de5367f65fff768dbd82ad","modified":1744641549039},{"_id":"public/img/archive.png","hash":"0e976edda0d6c74806d8ffbb44e2b4d917e26981","modified":1744641549039},{"_id":"public/image/plugins/17-1731738661057-17","hash":"ed6e95cc2504cd889985664e026e904f6dde5021","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212035104.png","hash":"8359f07432a08077b2880865f5f8bb1a5342e7d2","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212223351.png","hash":"b27c37ab782eda351a14d4060ec07f38b4f9ac87","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212525780.png","hash":"77d0577c751d1c5ef228a1c9f5c5b37c964bb34e","modified":1744641549039},{"_id":"public/image/plugins/11-1731738661057-12","hash":"d567f457f7e9905499e90e925e76c33bd379a68d","modified":1744641549039},{"_id":"public/image/plugins/9-1731738661057-9.png","hash":"6303197004ff31f502ff729a34abcf86c44985ce","modified":1744641549039},{"_id":"public/image/plugins/image-20241115211442488.png","hash":"3de8a316d3e82bbcc463ae15cee544d607a635a1","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212424168.png","hash":"14f64fedaad23067382ac4931d6371a6208eeef9","modified":1744641549039},{"_id":"public/image/plugins/image-20241115211752915.png","hash":"dcd2b59a9f59fc72e5b5909a634bffbd47080149","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212756604.png","hash":"4b8c16d925296e05c1e6c5b129ce488e2adbcf20","modified":1744641549039},{"_id":"public/image/plugins/image-20241115213622701.png","hash":"7d60c5f62d0d7e54c6f76e36a8a34572e2bd756c","modified":1744641549039},{"_id":"public/image/plugins/image-20241116141858814.png","hash":"6a3545630fa3c78feca1b999fdba31ad8324ff8c","modified":1744641549039},{"_id":"public/image/Works/image-20241108142218797.png","hash":"f7c43b63c41521ea9a0f51ff1028b279121b7488","modified":1744641549039},{"_id":"public/image/plugins/19-1731738661057-19","hash":"de3abaf455538153398ddf98a61efd4b1391de0a","modified":1744641549039},{"_id":"public/image/plugins/image-20241115214150403.png","hash":"d75042adbefa9a26f9c65b07f4525aab0a62b4d4","modified":1744641549039},{"_id":"public/image/ksohtml924/wps9.png","hash":"fd860810ae766dbb9fda045ef02921f89d5d8334","modified":1744641549039},{"_id":"public/image/plugins/image-20241116142234089.png","hash":"7b057899dd7343b4b460e59083a68a4b06b49873","modified":1744641549039},{"_id":"public/image/ksohtml924/wps2.png","hash":"fd860810ae766dbb9fda045ef02921f89d5d8334","modified":1744641549039},{"_id":"public/img/favicon.webp","hash":"4cebc847fd18987ec6feda20331f4aa3912b4e89","modified":1744641549039},{"_id":"public/image/plugins/image-20241105215834060.png","hash":"05eb11ac41339bd6b814ee8bdc8f10b131af7329","modified":1744641549039},{"_id":"public/image/plugins/image-20241115211522282.png","hash":"7c6d3c3c5987792edd72b5eea1a7554f3a54b7b9","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212457855.png","hash":"7995db302e7fe1ccac6d1e716ae05e8f031aef03","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212849947.png","hash":"4ba637a44f33d59034aba0cfc3cecc8b1f4e4ade","modified":1744641549039},{"_id":"public/image/plugins/image-20241115213215222.png","hash":"f239c7b8bf672d7bdb603251926b8f6bb96247fd","modified":1744641549039},{"_id":"public/image/Works/guodaxia.png","hash":"464fef41651d0660c8c875ea37ff6bcbc1e9e864","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212353272.png","hash":"00f88facc5f040479ed6ee345811f05bec28cd24","modified":1744641549039},{"_id":"public/image/plugins/image-20241115211932623.png","hash":"2c2e09d6964784a731d8c726294e11fa0d4cc157","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212917144.png","hash":"19d6106754c99b03e4b0314e3f742d3d77745c86","modified":1744641549039},{"_id":"public/image/Works/xiaoqiao2.png","hash":"6bf8a6e86484c1a7e090a4d6aba4daea57f72563","modified":1744641549039},{"_id":"public/image/plugins/image-20241115214524815.png","hash":"e9f680ab3dabfb5ce943cc5de8ba6b99e35a68d7","modified":1744641549039},{"_id":"public/image/plugins/image-20241115212134397.png","hash":"96b6e7faf2089720b70cbe08ac257ba87d9cd15b","modified":1744641549039},{"_id":"public/image/plugins/image-20241105220224257.png","hash":"a62ad68aa0c95318156fdf2fe340b547efca305d","modified":1744641549039},{"_id":"public/image/Works/xiaoqiao1.png","hash":"cc16638247df61dda5c311bb4bcd8f3f0d22efa5","modified":1744641549039},{"_id":"public/image/Works/mix_console2.jpg","hash":"f1c0dcd6529a2795e4ac15a9a0fa15bd80619926","modified":1744641549039},{"_id":"public/image/Works/mix_console.jpg","hash":"f12d8b9a951e3ba172abad3833972b9279f7d94e","modified":1744641549039},{"_id":"public/fonts/LXGWWenKaiLite-Regular.woff2","hash":"e66dcd89dc0fdc3fd924d2e2586a958d07d98add","modified":1744641549039},{"_id":"public/fonts/LXGWWenKaiLite-Bold.woff2","hash":"5297ae11b2e9344d85fd402b7b18c2d1b638c751","modified":1744641549039},{"_id":"public/video/LilliaRedesign.mp4","hash":"a803f2a47c1313c11e11f37441563bdde822f00e","modified":1744641549039},{"_id":"source/无忧传媒工作内容归档.md","hash":"99465131402caa2ae57c367f9e6c02a571a68dc3","modified":1744542546876},{"_id":"source/_posts/Wwise Tour声音设计分享.md","hash":"b959e5b79b6d7ca486bed8466cd8ea78569710b6","modified":1745218370491},{"_id":"source/_posts/一罐盐音效设计课程.md","hash":"243a5706b39efa1df4e061eb84218061971d81e2","modified":1740923261774},{"_id":"source/_posts/C#学习.md","hash":"9e940e157185371b45ea848e900f5c1cfdfb47ce","modified":1737442616020},{"_id":"source/image/image-20250215162814914.png","hash":"497eec50c5f402003b86bd383316da6c0c5c082e","modified":1739608147888},{"_id":"source/image/屏幕截图 2025-02-17 181103.png","hash":"df301ab833553e6971c112d26e93c9d9c3a0c821","modified":1739787152226},{"_id":"public/无忧传媒工作内容归档.html","hash":"8354809877798155597bee7dfa9bddfeab7b19a5","modified":1745553555170},{"_id":"public/2025/04/21/Wwise Tour声音设计分享/index.html","hash":"d6eedbb3c58882876fe6ec1279ffdebeea4c6f80","modified":1745553555170},{"_id":"public/2025/04/21/C#学习/index.html","hash":"3f2b516ed372b05fb8d87187a2b0fb4a325e7c4e","modified":1745553555170},{"_id":"public/2025/04/21/一罐盐音效设计课程/index.html","hash":"47183cb33f811fd893f6167edea50218457edbe8","modified":1745553555170},{"_id":"public/2025/04/15/无忧传媒工作内容归档/index.html","hash":"75de72c1392b9b8d2114d1330488a4c7b25d5228","modified":1745553555170},{"_id":"public/image/image-20250215162814914.png","hash":"497eec50c5f402003b86bd383316da6c0c5c082e","modified":1745553555170},{"_id":"public/image/屏幕截图 2025-02-17 181103.png","hash":"df301ab833553e6971c112d26e93c9d9c3a0c821","modified":1745553555170}],"Category":[],"Data":[],"Page":[{"title":"index","date":"2025-04-13T09:39:59.000Z","_content":"✨**个人作品在“作品”栏目**✨\n\n\n\n记录***声音***，热爱***游戏***(*/ω＼*)\n\n想带着***录音机***跑遍世界的每一个角落，每一个时刻🥰\n\n做一个充满创造力的人，用想象填满这个世界！\n\n准备好跟我一起开启世界的***冒险***旅途了吗？\n\n🎴\n\nTIPS：\nB站个人首页：[透过黎明的个人空间-透过黎明个人主页-哔哩哔哩视频](https://space.bilibili.com/285916796?spm_id_from=333.1007.0.0)\n\n会持续更新，欢迎关注！","source":"index/index.md","raw":"---\ntitle: index\ndate: 2025-04-13 17:39:59\n\n---\n✨**个人作品在“作品”栏目**✨\n\n\n\n记录***声音***，热爱***游戏***(*/ω＼*)\n\n想带着***录音机***跑遍世界的每一个角落，每一个时刻🥰\n\n做一个充满创造力的人，用想象填满这个世界！\n\n准备好跟我一起开启世界的***冒险***旅途了吗？\n\n🎴\n\nTIPS：\nB站个人首页：[透过黎明的个人空间-透过黎明个人主页-哔哩哔哩视频](https://space.bilibili.com/285916796?spm_id_from=333.1007.0.0)\n\n会持续更新，欢迎关注！","updated":"2025-04-25T03:58:56.539Z","path":"index/index.html","_id":"cm9h6j6xr0000sspyb193csyt","comments":1,"layout":"page","content":"<div class=\".article-gallery\"><p>✨<strong>个人作品在“作品”栏目</strong>✨</p>\n<p>记录<em><strong>声音</strong></em>，热爱<em><strong>游戏</strong></em>(<em>&#x2F;ω＼</em>)</p>\n<p>想带着<em><strong>录音机</strong></em>跑遍世界的每一个角落，每一个时刻🥰</p>\n<p>做一个充满创造力的人，用想象填满这个世界！</p>\n<p>准备好跟我一起开启世界的<em><strong>冒险</strong></em>旅途了吗？</p>\n<p>🎴</p>\n<p>TIPS：<br>B站个人首页：<a href=\"https://space.bilibili.com/285916796?spm_id_from=333.1007.0.0\">透过黎明的个人空间-透过黎明个人主页-哔哩哔哩视频</a></p>\n<p>会持续更新，欢迎关注！</p>\n</div>","excerpt":"","more":"<div class=\".article-gallery\"><p>✨<strong>个人作品在“作品”栏目</strong>✨</p>\n<p>记录<em><strong>声音</strong></em>，热爱<em><strong>游戏</strong></em>(<em>&#x2F;ω＼</em>)</p>\n<p>想带着<em><strong>录音机</strong></em>跑遍世界的每一个角落，每一个时刻🥰</p>\n<p>做一个充满创造力的人，用想象填满这个世界！</p>\n<p>准备好跟我一起开启世界的<em><strong>冒险</strong></em>旅途了吗？</p>\n<p>🎴</p>\n<p>TIPS：<br>B站个人首页：<a href=\"https://space.bilibili.com/285916796?spm_id_from=333.1007.0.0\">透过黎明的个人空间-透过黎明个人主页-哔哩哔哩视频</a></p>\n<p>会持续更新，欢迎关注！</p>\n</div>"},{"title":"about","date":"2025-04-13T10:06:18.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2025-04-13 18:06:18\n---\n","updated":"2025-04-13T10:06:18.860Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm9h6j6xu0002sspy9tan1112","content":"<div class=\".article-gallery\"></div>","excerpt":"","more":"<div class=\".article-gallery\"></div>"},{"title":"list","date":"2025-04-13T10:47:34.000Z","_content":"","source":"list/index.md","raw":"---\ntitle: list\ndate: 2025-04-13 18:47:34\n---\n","updated":"2025-04-13T10:47:34.273Z","path":"list/index.html","comments":1,"layout":"page","_id":"cm9h6j6xv0004sspyaq7709fe","content":"<div class=\".article-gallery\"></div>","excerpt":"","more":"<div class=\".article-gallery\"></div>"},{"title":"works","date":"2025-04-13T10:08:39.000Z","_content":"\n\nhi~您好，欢迎来到我的作品展示界面！🎉\n\n在这里，对我的一些声音设计作品进行分享~\n\n也欢迎您在底部***留言框***📫给出宝贵的意见🤝\n\nTIPS！电脑端***左侧***有<u>***目录导航***</u>，可以快速定位到您想观看的内容哦~\n\n栏目从上到下分：\n\n1. 音效设计\n2. CG制作\n3. Wwise集成\n\n[TOC]\n\n\n\n\n\n\n# 英雄联盟声音设计\n\n## LOL手游丨对局加载CG\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1d8dAYLE3Q&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n\n## LOL手游丨金克斯清剿小队CG\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1R8dAYLExi&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n## LOL端游丨莉莉娅丨Q和R技能Redesign\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1DKZHYhEUc&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n## LOL端游丨伊芙琳丨Q和W技能Redesign\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1LGfwYSEn6&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n-----------------------------\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1RGfwYUE64&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n\n# CG制作\n\n## 雷霆游戏丨一念逍遥CG制作\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1Uo4y1z7BZ&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n\n# 武器丨技能样本制作\n\n\n\n\n# Wwise集成\n\n## 本科毕业设计作品《大鱼BigFish》\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1Z1421q7WM&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>","source":"works/index.md","raw":"---\ntitle: works\ndate: 2025-04-13 18:08:39\n---\n\n\nhi~您好，欢迎来到我的作品展示界面！🎉\n\n在这里，对我的一些声音设计作品进行分享~\n\n也欢迎您在底部***留言框***📫给出宝贵的意见🤝\n\nTIPS！电脑端***左侧***有<u>***目录导航***</u>，可以快速定位到您想观看的内容哦~\n\n栏目从上到下分：\n\n1. 音效设计\n2. CG制作\n3. Wwise集成\n\n[TOC]\n\n\n\n\n\n\n# 英雄联盟声音设计\n\n## LOL手游丨对局加载CG\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1d8dAYLE3Q&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n\n## LOL手游丨金克斯清剿小队CG\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1R8dAYLExi&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n## LOL端游丨莉莉娅丨Q和R技能Redesign\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1DKZHYhEUc&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n## LOL端游丨伊芙琳丨Q和W技能Redesign\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1LGfwYSEn6&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n-----------------------------\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1RGfwYUE64&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n\n# CG制作\n\n## 雷霆游戏丨一念逍遥CG制作\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1Uo4y1z7BZ&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n\n# 武器丨技能样本制作\n\n\n\n\n# Wwise集成\n\n## 本科毕业设计作品《大鱼BigFish》\n\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1Z1421q7WM&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>","updated":"2025-04-25T04:01:18.565Z","path":"works/index.html","_id":"cm9h6j6xv0005sspyeywg84pp","comments":1,"layout":"page","content":"<div class=\".article-gallery\"><p>hi~您好，欢迎来到我的作品展示界面！🎉</p>\n<p>在这里，对我的一些声音设计作品进行分享~</p>\n<p>也欢迎您在底部<em><strong>留言框</strong></em>📫给出宝贵的意见🤝</p>\n<p>TIPS！电脑端<em><strong>左侧</strong></em>有<u><em><strong>目录导航</strong></em></u>，可以快速定位到您想观看的内容哦~</p>\n<p>栏目从上到下分：</p>\n<ol>\n<li>音效设计</li>\n<li>CG制作</li>\n<li>Wwise集成</li>\n</ol>\n<p>[TOC]</p>\n<h1 id=\"英雄联盟声音设计\"><a href=\"#英雄联盟声音设计\" class=\"headerlink\" title=\"英雄联盟声音设计\"></a>英雄联盟声音设计</h1><h2 id=\"LOL手游丨对局加载CG\"><a href=\"#LOL手游丨对局加载CG\" class=\"headerlink\" title=\"LOL手游丨对局加载CG\"></a>LOL手游丨对局加载CG</h2><iframe src=\"//player.bilibili.com/player.html?bvid=BV1d8dAYLE3Q&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n\n<h2 id=\"LOL手游丨金克斯清剿小队CG\"><a href=\"#LOL手游丨金克斯清剿小队CG\" class=\"headerlink\" title=\"LOL手游丨金克斯清剿小队CG\"></a>LOL手游丨金克斯清剿小队CG</h2><iframe src=\"//player.bilibili.com/player.html?bvid=BV1R8dAYLExi&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n<h2 id=\"LOL端游丨莉莉娅丨Q和R技能Redesign\"><a href=\"#LOL端游丨莉莉娅丨Q和R技能Redesign\" class=\"headerlink\" title=\"LOL端游丨莉莉娅丨Q和R技能Redesign\"></a>LOL端游丨莉莉娅丨Q和R技能Redesign</h2><iframe src=\"//player.bilibili.com/player.html?bvid=BV1DKZHYhEUc&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n<h2 id=\"LOL端游丨伊芙琳丨Q和W技能Redesign\"><a href=\"#LOL端游丨伊芙琳丨Q和W技能Redesign\" class=\"headerlink\" title=\"LOL端游丨伊芙琳丨Q和W技能Redesign\"></a>LOL端游丨伊芙琳丨Q和W技能Redesign</h2><iframe src=\"//player.bilibili.com/player.html?bvid=BV1LGfwYSEn6&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n<hr>\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1RGfwYUE64&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n\n<h1 id=\"CG制作\"><a href=\"#CG制作\" class=\"headerlink\" title=\"CG制作\"></a>CG制作</h1><h2 id=\"雷霆游戏丨一念逍遥CG制作\"><a href=\"#雷霆游戏丨一念逍遥CG制作\" class=\"headerlink\" title=\"雷霆游戏丨一念逍遥CG制作\"></a>雷霆游戏丨一念逍遥CG制作</h2><iframe src=\"//player.bilibili.com/player.html?bvid=BV1Uo4y1z7BZ&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n\n<h1 id=\"武器丨技能样本制作\"><a href=\"#武器丨技能样本制作\" class=\"headerlink\" title=\"武器丨技能样本制作\"></a>武器丨技能样本制作</h1><h1 id=\"Wwise集成\"><a href=\"#Wwise集成\" class=\"headerlink\" title=\"Wwise集成\"></a>Wwise集成</h1><h2 id=\"本科毕业设计作品《大鱼BigFish》\"><a href=\"#本科毕业设计作品《大鱼BigFish》\" class=\"headerlink\" title=\"本科毕业设计作品《大鱼BigFish》\"></a>本科毕业设计作品《大鱼BigFish》</h2><iframe src=\"//player.bilibili.com/player.html?bvid=BV1Z1421q7WM&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe></div>","excerpt":"","more":"<div class=\".article-gallery\"><p>hi~您好，欢迎来到我的作品展示界面！🎉</p>\n<p>在这里，对我的一些声音设计作品进行分享~</p>\n<p>也欢迎您在底部<em><strong>留言框</strong></em>📫给出宝贵的意见🤝</p>\n<p>TIPS！电脑端<em><strong>左侧</strong></em>有<u><em><strong>目录导航</strong></em></u>，可以快速定位到您想观看的内容哦~</p>\n<p>栏目从上到下分：</p>\n<ol>\n<li>音效设计</li>\n<li>CG制作</li>\n<li>Wwise集成</li>\n</ol>\n<p>[TOC]</p>\n<h1 id=\"英雄联盟声音设计\"><a href=\"#英雄联盟声音设计\" class=\"headerlink\" title=\"英雄联盟声音设计\"></a>英雄联盟声音设计</h1><h2 id=\"LOL手游丨对局加载CG\"><a href=\"#LOL手游丨对局加载CG\" class=\"headerlink\" title=\"LOL手游丨对局加载CG\"></a>LOL手游丨对局加载CG</h2><iframe src=\"//player.bilibili.com/player.html?bvid=BV1d8dAYLE3Q&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n\n<h2 id=\"LOL手游丨金克斯清剿小队CG\"><a href=\"#LOL手游丨金克斯清剿小队CG\" class=\"headerlink\" title=\"LOL手游丨金克斯清剿小队CG\"></a>LOL手游丨金克斯清剿小队CG</h2><iframe src=\"//player.bilibili.com/player.html?bvid=BV1R8dAYLExi&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n<h2 id=\"LOL端游丨莉莉娅丨Q和R技能Redesign\"><a href=\"#LOL端游丨莉莉娅丨Q和R技能Redesign\" class=\"headerlink\" title=\"LOL端游丨莉莉娅丨Q和R技能Redesign\"></a>LOL端游丨莉莉娅丨Q和R技能Redesign</h2><iframe src=\"//player.bilibili.com/player.html?bvid=BV1DKZHYhEUc&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n<h2 id=\"LOL端游丨伊芙琳丨Q和W技能Redesign\"><a href=\"#LOL端游丨伊芙琳丨Q和W技能Redesign\" class=\"headerlink\" title=\"LOL端游丨伊芙琳丨Q和W技能Redesign\"></a>LOL端游丨伊芙琳丨Q和W技能Redesign</h2><iframe src=\"//player.bilibili.com/player.html?bvid=BV1LGfwYSEn6&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n<hr>\n<iframe src=\"//player.bilibili.com/player.html?bvid=BV1RGfwYUE64&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n\n<h1 id=\"CG制作\"><a href=\"#CG制作\" class=\"headerlink\" title=\"CG制作\"></a>CG制作</h1><h2 id=\"雷霆游戏丨一念逍遥CG制作\"><a href=\"#雷霆游戏丨一念逍遥CG制作\" class=\"headerlink\" title=\"雷霆游戏丨一念逍遥CG制作\"></a>雷霆游戏丨一念逍遥CG制作</h2><iframe src=\"//player.bilibili.com/player.html?bvid=BV1Uo4y1z7BZ&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>\n\n\n<h1 id=\"武器丨技能样本制作\"><a href=\"#武器丨技能样本制作\" class=\"headerlink\" title=\"武器丨技能样本制作\"></a>武器丨技能样本制作</h1><h1 id=\"Wwise集成\"><a href=\"#Wwise集成\" class=\"headerlink\" title=\"Wwise集成\"></a>Wwise集成</h1><h2 id=\"本科毕业设计作品《大鱼BigFish》\"><a href=\"#本科毕业设计作品《大鱼BigFish》\" class=\"headerlink\" title=\"本科毕业设计作品《大鱼BigFish》\"></a>本科毕业设计作品《大鱼BigFish》</h2><iframe src=\"//player.bilibili.com/player.html?bvid=BV1Z1421q7WM&page=1&high_quality=1&danmaku=0&autoplay=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe></div>"},{"title":"无忧传媒🎶工作内容归档","_content":"\n欢迎来到我的工作记录碎碎念！\n我会在这里记录我的工作日常，也算是对我的日常工作内容进行复盘吧，毕竟过几个月之后谁还记得自己调了哪几个主播呢:)\n\n[TOC]\n# 2024年\n## 6月\n### 主播明月\n### 广东夫妇商务场\n### 哇塞小财神\n\n## 7月\n### 王小小生日会\n![image-20241128163629704](image/Works/image-20241128163629704.png)\n### 音效助手开发\n> 7月是音效助手开发的提出和规划时间。在七月份做了很多准备工作，以及跟我大学同学讨论了实施的可能性，并且出过几种废案：Unity+Wwise；Unity；Unity+FMOD三种方案最终都不能达到我们理想的效果。\n>\n> 最后是选择了Win窗体程序开发，并且有我一个人进行独立开发，在经历了三个月后，总算是开发成功了！正在进行测试试用。\n>\n> ![image-20241111133438016](image/Works/yinxiaozhushou.png)\n\n## 8月\n## 艺帝帝户外直播\n![image-20241128163559693](image/Works/image-20241128163559693.png)\n### 叶凯薇🦀\n\n![image-20241128163530552](image/Works/image-20241128163530552.png)\n### 无忧传媒成二团播\n\n## 9月\n### 宇航\n### 许青青\n### 郭大侠短视频后期音效制作\n> ![image-20241111141117465](image/Works/guodaxia.png)\n>\n> ![image-20241128163425391](image/Works/image-20241128163425391.png)\n\n## 10月\n\n### 刘畊宏商务场\n> ![image-20241128163335812](image/Works/image-20241128163335812.png)\n### 芊语芊寻\n> ![image-20241128163249375](image/Works/image-20241128163249375.png)\n### 铭宝\n### 无忧传媒杭五团播\n### 憨憨熊\n\n## 11月\n### 乡村小乔与珀莱雅商务场\n> 类型：电商商务\n>\n> 总结：第一次独立整体搭建直播间（音频＋视频）和跟播进行。\n>\n> ![ff2467aa9bec470edf4053964279dc3](image/Works/xiaoqiao1.png)\t![3a201056a7db25f91ba9a6cf0795fea](image/Works/xiaoqiao2.png)\n>\n> ![image-20241128163143502](image/Works/image-20241128163143502.png)\n\n### 珀莱雅官方直播间\n### 小怡不吃冰🧊\n![image-20241128163721553](image/Works/image-20241128163721553.png)\n### 王VV\n### 铭老板\n> ![image-20241128164245032](image/Works/image-20241128164245032.png)\n\n### BABI与皮皮皮朱商务场\n## 12月\n### 张zhang\n### 张大大带货跟播\n### 刘弘浩_\n### 芊芊亿\n### 哒哒921\n### 徐一周Key\n### BABIx香菜（孙恩盛）商务场\n### 梁教授\n# 2025年\n## 1月\n### 无忧传媒杭州第六分公司整体娱乐调试\n洛岚、徐岚、钟意李、洛渔、天宇、马亦书、丁凯成等等\n### 李发明\n### 陈琪东\n### 易不航\n### 雨霏筝唱\n\n\n\n","source":"无忧传媒工作内容归档.md","raw":"---\n title: 无忧传媒🎶工作内容归档\n---\n\n欢迎来到我的工作记录碎碎念！\n我会在这里记录我的工作日常，也算是对我的日常工作内容进行复盘吧，毕竟过几个月之后谁还记得自己调了哪几个主播呢:)\n\n[TOC]\n# 2024年\n## 6月\n### 主播明月\n### 广东夫妇商务场\n### 哇塞小财神\n\n## 7月\n### 王小小生日会\n![image-20241128163629704](image/Works/image-20241128163629704.png)\n### 音效助手开发\n> 7月是音效助手开发的提出和规划时间。在七月份做了很多准备工作，以及跟我大学同学讨论了实施的可能性，并且出过几种废案：Unity+Wwise；Unity；Unity+FMOD三种方案最终都不能达到我们理想的效果。\n>\n> 最后是选择了Win窗体程序开发，并且有我一个人进行独立开发，在经历了三个月后，总算是开发成功了！正在进行测试试用。\n>\n> ![image-20241111133438016](image/Works/yinxiaozhushou.png)\n\n## 8月\n## 艺帝帝户外直播\n![image-20241128163559693](image/Works/image-20241128163559693.png)\n### 叶凯薇🦀\n\n![image-20241128163530552](image/Works/image-20241128163530552.png)\n### 无忧传媒成二团播\n\n## 9月\n### 宇航\n### 许青青\n### 郭大侠短视频后期音效制作\n> ![image-20241111141117465](image/Works/guodaxia.png)\n>\n> ![image-20241128163425391](image/Works/image-20241128163425391.png)\n\n## 10月\n\n### 刘畊宏商务场\n> ![image-20241128163335812](image/Works/image-20241128163335812.png)\n### 芊语芊寻\n> ![image-20241128163249375](image/Works/image-20241128163249375.png)\n### 铭宝\n### 无忧传媒杭五团播\n### 憨憨熊\n\n## 11月\n### 乡村小乔与珀莱雅商务场\n> 类型：电商商务\n>\n> 总结：第一次独立整体搭建直播间（音频＋视频）和跟播进行。\n>\n> ![ff2467aa9bec470edf4053964279dc3](image/Works/xiaoqiao1.png)\t![3a201056a7db25f91ba9a6cf0795fea](image/Works/xiaoqiao2.png)\n>\n> ![image-20241128163143502](image/Works/image-20241128163143502.png)\n\n### 珀莱雅官方直播间\n### 小怡不吃冰🧊\n![image-20241128163721553](image/Works/image-20241128163721553.png)\n### 王VV\n### 铭老板\n> ![image-20241128164245032](image/Works/image-20241128164245032.png)\n\n### BABI与皮皮皮朱商务场\n## 12月\n### 张zhang\n### 张大大带货跟播\n### 刘弘浩_\n### 芊芊亿\n### 哒哒921\n### 徐一周Key\n### BABIx香菜（孙恩盛）商务场\n### 梁教授\n# 2025年\n## 1月\n### 无忧传媒杭州第六分公司整体娱乐调试\n洛岚、徐岚、钟意李、洛渔、天宇、马亦书、丁凯成等等\n### 李发明\n### 陈琪东\n### 易不航\n### 雨霏筝唱\n\n\n\n","date":"2025-04-15T14:49:06.140Z","updated":"2025-04-13T11:09:06.876Z","path":"无忧传媒工作内容归档.html","comments":1,"layout":"page","_id":"cm9w9inh90000ncpy2r7m9u94","content":"<div class=\".article-gallery\"><p>欢迎来到我的工作记录碎碎念！<br>我会在这里记录我的工作日常，也算是对我的日常工作内容进行复盘吧，毕竟过几个月之后谁还记得自己调了哪几个主播呢:)</p>\n<p>[TOC]</p>\n<h1 id=\"2024年\"><a href=\"#2024年\" class=\"headerlink\" title=\"2024年\"></a>2024年</h1><h2 id=\"6月\"><a href=\"#6月\" class=\"headerlink\" title=\"6月\"></a>6月</h2><h3 id=\"主播明月\"><a href=\"#主播明月\" class=\"headerlink\" title=\"主播明月\"></a>主播明月</h3><h3 id=\"广东夫妇商务场\"><a href=\"#广东夫妇商务场\" class=\"headerlink\" title=\"广东夫妇商务场\"></a>广东夫妇商务场</h3><h3 id=\"哇塞小财神\"><a href=\"#哇塞小财神\" class=\"headerlink\" title=\"哇塞小财神\"></a>哇塞小财神</h3><h2 id=\"7月\"><a href=\"#7月\" class=\"headerlink\" title=\"7月\"></a>7月</h2><h3 id=\"王小小生日会\"><a href=\"#王小小生日会\" class=\"headerlink\" title=\"王小小生日会\"></a>王小小生日会</h3><p><a href=\"/image/Works/image-20241128163629704.png\" title=\"image-20241128163629704\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163629704.png\" alt=\"image-20241128163629704\"></a></p>\n<h3 id=\"音效助手开发\"><a href=\"#音效助手开发\" class=\"headerlink\" title=\"音效助手开发\"></a>音效助手开发</h3><blockquote>\n<p>7月是音效助手开发的提出和规划时间。在七月份做了很多准备工作，以及跟我大学同学讨论了实施的可能性，并且出过几种废案：Unity+Wwise；Unity；Unity+FMOD三种方案最终都不能达到我们理想的效果。</p>\n<p>最后是选择了Win窗体程序开发，并且有我一个人进行独立开发，在经历了三个月后，总算是开发成功了！正在进行测试试用。</p>\n<p><a href=\"/image/Works/yinxiaozhushou.png\" title=\"image-20241111133438016\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/yinxiaozhushou.png\" alt=\"image-20241111133438016\"></a></p>\n</blockquote>\n<h2 id=\"8月\"><a href=\"#8月\" class=\"headerlink\" title=\"8月\"></a>8月</h2><h2 id=\"艺帝帝户外直播\"><a href=\"#艺帝帝户外直播\" class=\"headerlink\" title=\"艺帝帝户外直播\"></a>艺帝帝户外直播</h2><p><a href=\"/image/Works/image-20241128163559693.png\" title=\"image-20241128163559693\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163559693.png\" alt=\"image-20241128163559693\"></a></p>\n<h3 id=\"叶凯薇🦀\"><a href=\"#叶凯薇🦀\" class=\"headerlink\" title=\"叶凯薇🦀\"></a>叶凯薇🦀</h3><p><a href=\"/image/Works/image-20241128163530552.png\" title=\"image-20241128163530552\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163530552.png\" alt=\"image-20241128163530552\"></a></p>\n<h3 id=\"无忧传媒成二团播\"><a href=\"#无忧传媒成二团播\" class=\"headerlink\" title=\"无忧传媒成二团播\"></a>无忧传媒成二团播</h3><h2 id=\"9月\"><a href=\"#9月\" class=\"headerlink\" title=\"9月\"></a>9月</h2><h3 id=\"宇航\"><a href=\"#宇航\" class=\"headerlink\" title=\"宇航\"></a>宇航</h3><h3 id=\"许青青\"><a href=\"#许青青\" class=\"headerlink\" title=\"许青青\"></a>许青青</h3><h3 id=\"郭大侠短视频后期音效制作\"><a href=\"#郭大侠短视频后期音效制作\" class=\"headerlink\" title=\"郭大侠短视频后期音效制作\"></a>郭大侠短视频后期音效制作</h3><blockquote>\n<p><a href=\"/image/Works/guodaxia.png\" title=\"image-20241111141117465\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/guodaxia.png\" alt=\"image-20241111141117465\"></a></p>\n<p><a href=\"/image/Works/image-20241128163425391.png\" title=\"image-20241128163425391\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163425391.png\" alt=\"image-20241128163425391\"></a></p>\n</blockquote>\n<h2 id=\"10月\"><a href=\"#10月\" class=\"headerlink\" title=\"10月\"></a>10月</h2><h3 id=\"刘畊宏商务场\"><a href=\"#刘畊宏商务场\" class=\"headerlink\" title=\"刘畊宏商务场\"></a>刘畊宏商务场</h3><blockquote>\n<p><a href=\"/image/Works/image-20241128163335812.png\" title=\"image-20241128163335812\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163335812.png\" alt=\"image-20241128163335812\"></a></p>\n</blockquote>\n<h3 id=\"芊语芊寻\"><a href=\"#芊语芊寻\" class=\"headerlink\" title=\"芊语芊寻\"></a>芊语芊寻</h3><blockquote>\n<p><a href=\"/image/Works/image-20241128163249375.png\" title=\"image-20241128163249375\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163249375.png\" alt=\"image-20241128163249375\"></a></p>\n</blockquote>\n<h3 id=\"铭宝\"><a href=\"#铭宝\" class=\"headerlink\" title=\"铭宝\"></a>铭宝</h3><h3 id=\"无忧传媒杭五团播\"><a href=\"#无忧传媒杭五团播\" class=\"headerlink\" title=\"无忧传媒杭五团播\"></a>无忧传媒杭五团播</h3><h3 id=\"憨憨熊\"><a href=\"#憨憨熊\" class=\"headerlink\" title=\"憨憨熊\"></a>憨憨熊</h3><h2 id=\"11月\"><a href=\"#11月\" class=\"headerlink\" title=\"11月\"></a>11月</h2><h3 id=\"乡村小乔与珀莱雅商务场\"><a href=\"#乡村小乔与珀莱雅商务场\" class=\"headerlink\" title=\"乡村小乔与珀莱雅商务场\"></a>乡村小乔与珀莱雅商务场</h3><blockquote>\n<p>类型：电商商务</p>\n<p>总结：第一次独立整体搭建直播间（音频＋视频）和跟播进行。</p>\n<p><a href=\"/image/Works/xiaoqiao1.png\" title=\"ff2467aa9bec470edf4053964279dc3\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/xiaoqiao1.png\" alt=\"ff2467aa9bec470edf4053964279dc3\"></a>\t<a href=\"/image/Works/xiaoqiao2.png\" title=\"3a201056a7db25f91ba9a6cf0795fea\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/xiaoqiao2.png\" alt=\"3a201056a7db25f91ba9a6cf0795fea\"></a></p>\n<p><a href=\"/image/Works/image-20241128163143502.png\" title=\"image-20241128163143502\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163143502.png\" alt=\"image-20241128163143502\"></a></p>\n</blockquote>\n<h3 id=\"珀莱雅官方直播间\"><a href=\"#珀莱雅官方直播间\" class=\"headerlink\" title=\"珀莱雅官方直播间\"></a>珀莱雅官方直播间</h3><h3 id=\"小怡不吃冰🧊\"><a href=\"#小怡不吃冰🧊\" class=\"headerlink\" title=\"小怡不吃冰🧊\"></a>小怡不吃冰🧊</h3><p><a href=\"/image/Works/image-20241128163721553.png\" title=\"image-20241128163721553\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163721553.png\" alt=\"image-20241128163721553\"></a></p>\n<h3 id=\"王VV\"><a href=\"#王VV\" class=\"headerlink\" title=\"王VV\"></a>王VV</h3><h3 id=\"铭老板\"><a href=\"#铭老板\" class=\"headerlink\" title=\"铭老板\"></a>铭老板</h3><blockquote>\n<p><a href=\"/image/Works/image-20241128164245032.png\" title=\"image-20241128164245032\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128164245032.png\" alt=\"image-20241128164245032\"></a></p>\n</blockquote>\n<h3 id=\"BABI与皮皮皮朱商务场\"><a href=\"#BABI与皮皮皮朱商务场\" class=\"headerlink\" title=\"BABI与皮皮皮朱商务场\"></a>BABI与皮皮皮朱商务场</h3><h2 id=\"12月\"><a href=\"#12月\" class=\"headerlink\" title=\"12月\"></a>12月</h2><h3 id=\"张zhang\"><a href=\"#张zhang\" class=\"headerlink\" title=\"张zhang\"></a>张zhang</h3><h3 id=\"张大大带货跟播\"><a href=\"#张大大带货跟播\" class=\"headerlink\" title=\"张大大带货跟播\"></a>张大大带货跟播</h3><h3 id=\"刘弘浩\"><a href=\"#刘弘浩\" class=\"headerlink\" title=\"刘弘浩_\"></a>刘弘浩_</h3><h3 id=\"芊芊亿\"><a href=\"#芊芊亿\" class=\"headerlink\" title=\"芊芊亿\"></a>芊芊亿</h3><h3 id=\"哒哒921\"><a href=\"#哒哒921\" class=\"headerlink\" title=\"哒哒921\"></a>哒哒921</h3><h3 id=\"徐一周Key\"><a href=\"#徐一周Key\" class=\"headerlink\" title=\"徐一周Key\"></a>徐一周Key</h3><h3 id=\"BABIx香菜（孙恩盛）商务场\"><a href=\"#BABIx香菜（孙恩盛）商务场\" class=\"headerlink\" title=\"BABIx香菜（孙恩盛）商务场\"></a>BABIx香菜（孙恩盛）商务场</h3><h3 id=\"梁教授\"><a href=\"#梁教授\" class=\"headerlink\" title=\"梁教授\"></a>梁教授</h3><h1 id=\"2025年\"><a href=\"#2025年\" class=\"headerlink\" title=\"2025年\"></a>2025年</h1><h2 id=\"1月\"><a href=\"#1月\" class=\"headerlink\" title=\"1月\"></a>1月</h2><h3 id=\"无忧传媒杭州第六分公司整体娱乐调试\"><a href=\"#无忧传媒杭州第六分公司整体娱乐调试\" class=\"headerlink\" title=\"无忧传媒杭州第六分公司整体娱乐调试\"></a>无忧传媒杭州第六分公司整体娱乐调试</h3><p>洛岚、徐岚、钟意李、洛渔、天宇、马亦书、丁凯成等等</p>\n<h3 id=\"李发明\"><a href=\"#李发明\" class=\"headerlink\" title=\"李发明\"></a>李发明</h3><h3 id=\"陈琪东\"><a href=\"#陈琪东\" class=\"headerlink\" title=\"陈琪东\"></a>陈琪东</h3><h3 id=\"易不航\"><a href=\"#易不航\" class=\"headerlink\" title=\"易不航\"></a>易不航</h3><h3 id=\"雨霏筝唱\"><a href=\"#雨霏筝唱\" class=\"headerlink\" title=\"雨霏筝唱\"></a>雨霏筝唱</h3></div>","excerpt":"","more":"<div class=\".article-gallery\"><p>欢迎来到我的工作记录碎碎念！<br>我会在这里记录我的工作日常，也算是对我的日常工作内容进行复盘吧，毕竟过几个月之后谁还记得自己调了哪几个主播呢:)</p>\n<p>[TOC]</p>\n<h1 id=\"2024年\"><a href=\"#2024年\" class=\"headerlink\" title=\"2024年\"></a>2024年</h1><h2 id=\"6月\"><a href=\"#6月\" class=\"headerlink\" title=\"6月\"></a>6月</h2><h3 id=\"主播明月\"><a href=\"#主播明月\" class=\"headerlink\" title=\"主播明月\"></a>主播明月</h3><h3 id=\"广东夫妇商务场\"><a href=\"#广东夫妇商务场\" class=\"headerlink\" title=\"广东夫妇商务场\"></a>广东夫妇商务场</h3><h3 id=\"哇塞小财神\"><a href=\"#哇塞小财神\" class=\"headerlink\" title=\"哇塞小财神\"></a>哇塞小财神</h3><h2 id=\"7月\"><a href=\"#7月\" class=\"headerlink\" title=\"7月\"></a>7月</h2><h3 id=\"王小小生日会\"><a href=\"#王小小生日会\" class=\"headerlink\" title=\"王小小生日会\"></a>王小小生日会</h3><p><a href=\"/image/Works/image-20241128163629704.png\" title=\"image-20241128163629704\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163629704.png\" alt=\"image-20241128163629704\"></a></p>\n<h3 id=\"音效助手开发\"><a href=\"#音效助手开发\" class=\"headerlink\" title=\"音效助手开发\"></a>音效助手开发</h3><blockquote>\n<p>7月是音效助手开发的提出和规划时间。在七月份做了很多准备工作，以及跟我大学同学讨论了实施的可能性，并且出过几种废案：Unity+Wwise；Unity；Unity+FMOD三种方案最终都不能达到我们理想的效果。</p>\n<p>最后是选择了Win窗体程序开发，并且有我一个人进行独立开发，在经历了三个月后，总算是开发成功了！正在进行测试试用。</p>\n<p><a href=\"/image/Works/yinxiaozhushou.png\" title=\"image-20241111133438016\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/yinxiaozhushou.png\" alt=\"image-20241111133438016\"></a></p>\n</blockquote>\n<h2 id=\"8月\"><a href=\"#8月\" class=\"headerlink\" title=\"8月\"></a>8月</h2><h2 id=\"艺帝帝户外直播\"><a href=\"#艺帝帝户外直播\" class=\"headerlink\" title=\"艺帝帝户外直播\"></a>艺帝帝户外直播</h2><p><a href=\"/image/Works/image-20241128163559693.png\" title=\"image-20241128163559693\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163559693.png\" alt=\"image-20241128163559693\"></a></p>\n<h3 id=\"叶凯薇🦀\"><a href=\"#叶凯薇🦀\" class=\"headerlink\" title=\"叶凯薇🦀\"></a>叶凯薇🦀</h3><p><a href=\"/image/Works/image-20241128163530552.png\" title=\"image-20241128163530552\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163530552.png\" alt=\"image-20241128163530552\"></a></p>\n<h3 id=\"无忧传媒成二团播\"><a href=\"#无忧传媒成二团播\" class=\"headerlink\" title=\"无忧传媒成二团播\"></a>无忧传媒成二团播</h3><h2 id=\"9月\"><a href=\"#9月\" class=\"headerlink\" title=\"9月\"></a>9月</h2><h3 id=\"宇航\"><a href=\"#宇航\" class=\"headerlink\" title=\"宇航\"></a>宇航</h3><h3 id=\"许青青\"><a href=\"#许青青\" class=\"headerlink\" title=\"许青青\"></a>许青青</h3><h3 id=\"郭大侠短视频后期音效制作\"><a href=\"#郭大侠短视频后期音效制作\" class=\"headerlink\" title=\"郭大侠短视频后期音效制作\"></a>郭大侠短视频后期音效制作</h3><blockquote>\n<p><a href=\"/image/Works/guodaxia.png\" title=\"image-20241111141117465\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/guodaxia.png\" alt=\"image-20241111141117465\"></a></p>\n<p><a href=\"/image/Works/image-20241128163425391.png\" title=\"image-20241128163425391\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163425391.png\" alt=\"image-20241128163425391\"></a></p>\n</blockquote>\n<h2 id=\"10月\"><a href=\"#10月\" class=\"headerlink\" title=\"10月\"></a>10月</h2><h3 id=\"刘畊宏商务场\"><a href=\"#刘畊宏商务场\" class=\"headerlink\" title=\"刘畊宏商务场\"></a>刘畊宏商务场</h3><blockquote>\n<p><a href=\"/image/Works/image-20241128163335812.png\" title=\"image-20241128163335812\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163335812.png\" alt=\"image-20241128163335812\"></a></p>\n</blockquote>\n<h3 id=\"芊语芊寻\"><a href=\"#芊语芊寻\" class=\"headerlink\" title=\"芊语芊寻\"></a>芊语芊寻</h3><blockquote>\n<p><a href=\"/image/Works/image-20241128163249375.png\" title=\"image-20241128163249375\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163249375.png\" alt=\"image-20241128163249375\"></a></p>\n</blockquote>\n<h3 id=\"铭宝\"><a href=\"#铭宝\" class=\"headerlink\" title=\"铭宝\"></a>铭宝</h3><h3 id=\"无忧传媒杭五团播\"><a href=\"#无忧传媒杭五团播\" class=\"headerlink\" title=\"无忧传媒杭五团播\"></a>无忧传媒杭五团播</h3><h3 id=\"憨憨熊\"><a href=\"#憨憨熊\" class=\"headerlink\" title=\"憨憨熊\"></a>憨憨熊</h3><h2 id=\"11月\"><a href=\"#11月\" class=\"headerlink\" title=\"11月\"></a>11月</h2><h3 id=\"乡村小乔与珀莱雅商务场\"><a href=\"#乡村小乔与珀莱雅商务场\" class=\"headerlink\" title=\"乡村小乔与珀莱雅商务场\"></a>乡村小乔与珀莱雅商务场</h3><blockquote>\n<p>类型：电商商务</p>\n<p>总结：第一次独立整体搭建直播间（音频＋视频）和跟播进行。</p>\n<p><a href=\"/image/Works/xiaoqiao1.png\" title=\"ff2467aa9bec470edf4053964279dc3\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/xiaoqiao1.png\" alt=\"ff2467aa9bec470edf4053964279dc3\"></a>\t<a href=\"/image/Works/xiaoqiao2.png\" title=\"3a201056a7db25f91ba9a6cf0795fea\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/xiaoqiao2.png\" alt=\"3a201056a7db25f91ba9a6cf0795fea\"></a></p>\n<p><a href=\"/image/Works/image-20241128163143502.png\" title=\"image-20241128163143502\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163143502.png\" alt=\"image-20241128163143502\"></a></p>\n</blockquote>\n<h3 id=\"珀莱雅官方直播间\"><a href=\"#珀莱雅官方直播间\" class=\"headerlink\" title=\"珀莱雅官方直播间\"></a>珀莱雅官方直播间</h3><h3 id=\"小怡不吃冰🧊\"><a href=\"#小怡不吃冰🧊\" class=\"headerlink\" title=\"小怡不吃冰🧊\"></a>小怡不吃冰🧊</h3><p><a href=\"/image/Works/image-20241128163721553.png\" title=\"image-20241128163721553\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128163721553.png\" alt=\"image-20241128163721553\"></a></p>\n<h3 id=\"王VV\"><a href=\"#王VV\" class=\"headerlink\" title=\"王VV\"></a>王VV</h3><h3 id=\"铭老板\"><a href=\"#铭老板\" class=\"headerlink\" title=\"铭老板\"></a>铭老板</h3><blockquote>\n<p><a href=\"/image/Works/image-20241128164245032.png\" title=\"image-20241128164245032\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/image-20241128164245032.png\" alt=\"image-20241128164245032\"></a></p>\n</blockquote>\n<h3 id=\"BABI与皮皮皮朱商务场\"><a href=\"#BABI与皮皮皮朱商务场\" class=\"headerlink\" title=\"BABI与皮皮皮朱商务场\"></a>BABI与皮皮皮朱商务场</h3><h2 id=\"12月\"><a href=\"#12月\" class=\"headerlink\" title=\"12月\"></a>12月</h2><h3 id=\"张zhang\"><a href=\"#张zhang\" class=\"headerlink\" title=\"张zhang\"></a>张zhang</h3><h3 id=\"张大大带货跟播\"><a href=\"#张大大带货跟播\" class=\"headerlink\" title=\"张大大带货跟播\"></a>张大大带货跟播</h3><h3 id=\"刘弘浩\"><a href=\"#刘弘浩\" class=\"headerlink\" title=\"刘弘浩_\"></a>刘弘浩_</h3><h3 id=\"芊芊亿\"><a href=\"#芊芊亿\" class=\"headerlink\" title=\"芊芊亿\"></a>芊芊亿</h3><h3 id=\"哒哒921\"><a href=\"#哒哒921\" class=\"headerlink\" title=\"哒哒921\"></a>哒哒921</h3><h3 id=\"徐一周Key\"><a href=\"#徐一周Key\" class=\"headerlink\" title=\"徐一周Key\"></a>徐一周Key</h3><h3 id=\"BABIx香菜（孙恩盛）商务场\"><a href=\"#BABIx香菜（孙恩盛）商务场\" class=\"headerlink\" title=\"BABIx香菜（孙恩盛）商务场\"></a>BABIx香菜（孙恩盛）商务场</h3><h3 id=\"梁教授\"><a href=\"#梁教授\" class=\"headerlink\" title=\"梁教授\"></a>梁教授</h3><h1 id=\"2025年\"><a href=\"#2025年\" class=\"headerlink\" title=\"2025年\"></a>2025年</h1><h2 id=\"1月\"><a href=\"#1月\" class=\"headerlink\" title=\"1月\"></a>1月</h2><h3 id=\"无忧传媒杭州第六分公司整体娱乐调试\"><a href=\"#无忧传媒杭州第六分公司整体娱乐调试\" class=\"headerlink\" title=\"无忧传媒杭州第六分公司整体娱乐调试\"></a>无忧传媒杭州第六分公司整体娱乐调试</h3><p>洛岚、徐岚、钟意李、洛渔、天宇、马亦书、丁凯成等等</p>\n<h3 id=\"李发明\"><a href=\"#李发明\" class=\"headerlink\" title=\"李发明\"></a>李发明</h3><h3 id=\"陈琪东\"><a href=\"#陈琪东\" class=\"headerlink\" title=\"陈琪东\"></a>陈琪东</h3><h3 id=\"易不航\"><a href=\"#易不航\" class=\"headerlink\" title=\"易不航\"></a>易不航</h3><h3 id=\"雨霏筝唱\"><a href=\"#雨霏筝唱\" class=\"headerlink\" title=\"雨霏筝唱\"></a>雨霏筝唱</h3></div>"}],"Post":[{"title":"声学原理和音频硬件原理","_content":"\n作者：段恺乐\n\n\n\n\n\n## 一、模拟和数字音频接口分类\n\n### 1.TRS：Tip(signal)、Ring(signal)、Sleeve(ground)\n\n分别代表了这种接头的3个触点它的接头外观是圆柱体形状，分别代表了这种接头的3个触点，我们看到的就是被两段绝缘材料隔离开的三段金属柱。\n\n因此，3.5mm接头和6.3mm接头也被人称为“**小三芯**”和“**大三芯**”。\n\n通常有三种尺寸：1/4\"(6.3mm)、1/8\"(3.5mm)、3/32\"(2.5mm)，如下图所示，最常见的是3.5mm尺寸的接头。\n\n![img](image/ksohtml924/wps8.jpg)\n\n如下图所示，为“大三芯”接口的具体结构。\n\n  ![img](image/ksohtml924/wps9.png)\n\n****\n\nTRS插头：如耳机、随身听等，多出来的那一芯是用来传送语音信号或控制信号；还有一种用于耳机的四芯3.5mm插头则是用来传输平衡信号的。\n\n二芯的TS接头：可以用来传送非平衡的单声道音频信号，比如电吉他用的线就是二芯的TS线。\n\n6.3mmTRS插头：可用来传输平衡信号或非平衡立体声信号，也就是说它可以和我们后面要讲的XLR平衡接口一样，能够传输平衡信号，但因制作这样的平衡线成本比较高，所以一般只用在高档专业音频设备上。\n\n \n\n### 2.RCA接口（Radio Corporation of America）\n\n![img](image/ksohtml924/wps10.jpg)\n\n\n\n采用同轴传输信号的方式，中轴用来传输信号，外沿一圈的接触层用来接地。\n\n每一根RCA线缆负责传输一个声道的音频信号，因此，可以根据对声道的实际需要，使用与之数量相匹配的RCA线缆。比如要组双声道立体声就需要两根RCA线缆。\n\n \n\n### 3.XLR接口\n\n又被称为“卡农口”。它们最早的产品是“cannon X”系列，后来改进产品增加了一个锁定装置(Latch)，于是在“X”后面增加了一个“L”;再后来又围绕着接头的金属触点增加了橡胶封口(Rubber compound)，于是又在“L”后面增加了一个“R”。人们就把三个大写字母组合在一起，称这种接头为“XLR connector”。\n\n![img](image/ksohtml924/wps12.jpg)\n\n比较常见的三芯XLR接口；有的耳放上面会提供四芯平衡XLR耳机接口。\n\n  \n\n### 4.AES/EBU接口\n\nAudio Engineering Society/European Broadcast Union(音频工程师协会/欧洲广播联盟)。\n\n基于单根绞合线对来传输数字音频数据的串行位传输协议。\n\n无须均衡即可在长达100米的距离上传输数据，如果均衡，可以传输更远距离。\n\n \n\n### 5.S/PDIF接口\n\nSony/Philips Digital Interconnect Format\n\n在某些情况下AES/EBU的专业设备和S/PDIF的用户设备可以直接连接，但是并不推荐这种做法，因为在电气技术规范和信道状态位中存在非常重要的差别，当混用协议时可能产生无法预知的后果。\n\n \n\n### 6.同轴接口\n\n同轴接口分为两种，一种是RCA同轴接口，另一种是BNC同轴接口。前者的外观跟模拟RCA接口没有任何区别，而后者则与我们在电视机上常见的信号接口有点类似，而且加了锁紧设计。同轴线缆接头有两个同心导体，导体和屏蔽层共用同一轴心，线的阻抗是75欧姆。\n\n![img](image/ksohtml924/wps13.jpg) \n\n### 7.光纤接口\n\n光纤接口的英文名字为TOSLINK，来源于东芝(TOSHIBA)制定的技术标准，器材上一般标为“Optical”。\n\n![img](image/ksohtml924/wps14.jpg) \n\n \n\n \n\n## 二、音频信号分类：平衡信号与非平衡信号\n\n非平衡信号：声波转变成电信号后，直接传送。\n\n平衡信号：把原始信号反相（相位差为180 度），然后同时传送反相的信号和原始信号。\n\n平衡传输：一种应用广泛的音频信号传输方式。利用相位抵消的原理将音频信号传输过程中所受的其他干扰降至最低，即：平衡信号送入差动放大器，原信号和反相位信号相减，得到加强的原始信号，由于在传送中，两条线路受到的干扰几乎一样，在相减的过程中，减掉了干扰信号，因此抗干扰能力更强。所以，平衡传输一般出现在专业音频设备上，以及传输距离较远的场合。这种在平衡式信号线中抑制两极导线中所共同有的噪声的现象便称为共模抑制。\n\n平衡传输需要并列的三根导线来实现，即接地线、热端线、冷端线。因此，平衡输入、输出接头，必须具有三个脚位，如卡侬头，大三芯接头。\n\n非平衡传输只有两个端子，即：信号端与接地端。\n\n \n\n## 三、阻抗\n\n指电流通过扬声器时所遇到的电阻，它是指对交流电的阻碍程度，通常以欧姆（Ω）为单位表示。\n\n阻抗可反映扬声器对电源的负载特性。（负载：电子元件的峰值功率） \n\n一般来说，较低的阻抗意味着扬声器对电源的负载更大，因此可能需要更大的功率驱动才能达到更高的音量。而较高的阻抗则需要较少的功率来驱动，但音量可能会较低。\n\n阻抗匹配非常重要。如果将低阻抗扬声器连接到高阻抗放大器，可能会导致功率损失和声音质量下降。相反，将高阻抗扬声器连接到低阻抗放大器也可能导致过载和损坏。因此，为了获得最佳的音频效果和系统性能，选择合适阻抗匹配的扬声器和放大器是很重要的。\n\n### 1.低阻抗扬声器（如4Ω）\n\n▲优势：低阻抗意味着扬声器对电源的负载较大，它能够吸收更多的功率，并在较低的声压级上产生较高的音量。低阻抗扬声器通常具有更高的灵敏度，能够以较小的功率驱动就产生大音量。\n\n▲注意事项：在连接低阻抗扬声器时，需要确保放大器或扬声器驱动器具备足够的功率和稳定性，以防止过载和损坏。\n\n### 2.高阻抗扬声器（如16Ω或32Ω）\n\n▲优势：高阻抗扬声器需要较低的功率来驱动，对放大器的要求较低。这使得它们适用于某些特定的应用场景，例如便携式音频设备或静音环境下的私人听音等。高阻抗扬声器通常具有较小的功率需求，并且对信号质量和输出稳定性的要求相对较低。\n\n▲注意事项：高阻抗扬声器可能在较高的声压级上需要更大的功率才能产生相同的音量，所以在选择时需要确保匹配合适的放大器。\n\n \n\n## 四、阻抗电平匹配","source":"_posts/声学原理和音频硬件原理.md","raw":"---\ntitle: 声学原理和音频硬件原理\n---\n\n作者：段恺乐\n\n\n\n\n\n## 一、模拟和数字音频接口分类\n\n### 1.TRS：Tip(signal)、Ring(signal)、Sleeve(ground)\n\n分别代表了这种接头的3个触点它的接头外观是圆柱体形状，分别代表了这种接头的3个触点，我们看到的就是被两段绝缘材料隔离开的三段金属柱。\n\n因此，3.5mm接头和6.3mm接头也被人称为“**小三芯**”和“**大三芯**”。\n\n通常有三种尺寸：1/4\"(6.3mm)、1/8\"(3.5mm)、3/32\"(2.5mm)，如下图所示，最常见的是3.5mm尺寸的接头。\n\n![img](image/ksohtml924/wps8.jpg)\n\n如下图所示，为“大三芯”接口的具体结构。\n\n  ![img](image/ksohtml924/wps9.png)\n\n****\n\nTRS插头：如耳机、随身听等，多出来的那一芯是用来传送语音信号或控制信号；还有一种用于耳机的四芯3.5mm插头则是用来传输平衡信号的。\n\n二芯的TS接头：可以用来传送非平衡的单声道音频信号，比如电吉他用的线就是二芯的TS线。\n\n6.3mmTRS插头：可用来传输平衡信号或非平衡立体声信号，也就是说它可以和我们后面要讲的XLR平衡接口一样，能够传输平衡信号，但因制作这样的平衡线成本比较高，所以一般只用在高档专业音频设备上。\n\n \n\n### 2.RCA接口（Radio Corporation of America）\n\n![img](image/ksohtml924/wps10.jpg)\n\n\n\n采用同轴传输信号的方式，中轴用来传输信号，外沿一圈的接触层用来接地。\n\n每一根RCA线缆负责传输一个声道的音频信号，因此，可以根据对声道的实际需要，使用与之数量相匹配的RCA线缆。比如要组双声道立体声就需要两根RCA线缆。\n\n \n\n### 3.XLR接口\n\n又被称为“卡农口”。它们最早的产品是“cannon X”系列，后来改进产品增加了一个锁定装置(Latch)，于是在“X”后面增加了一个“L”;再后来又围绕着接头的金属触点增加了橡胶封口(Rubber compound)，于是又在“L”后面增加了一个“R”。人们就把三个大写字母组合在一起，称这种接头为“XLR connector”。\n\n![img](image/ksohtml924/wps12.jpg)\n\n比较常见的三芯XLR接口；有的耳放上面会提供四芯平衡XLR耳机接口。\n\n  \n\n### 4.AES/EBU接口\n\nAudio Engineering Society/European Broadcast Union(音频工程师协会/欧洲广播联盟)。\n\n基于单根绞合线对来传输数字音频数据的串行位传输协议。\n\n无须均衡即可在长达100米的距离上传输数据，如果均衡，可以传输更远距离。\n\n \n\n### 5.S/PDIF接口\n\nSony/Philips Digital Interconnect Format\n\n在某些情况下AES/EBU的专业设备和S/PDIF的用户设备可以直接连接，但是并不推荐这种做法，因为在电气技术规范和信道状态位中存在非常重要的差别，当混用协议时可能产生无法预知的后果。\n\n \n\n### 6.同轴接口\n\n同轴接口分为两种，一种是RCA同轴接口，另一种是BNC同轴接口。前者的外观跟模拟RCA接口没有任何区别，而后者则与我们在电视机上常见的信号接口有点类似，而且加了锁紧设计。同轴线缆接头有两个同心导体，导体和屏蔽层共用同一轴心，线的阻抗是75欧姆。\n\n![img](image/ksohtml924/wps13.jpg) \n\n### 7.光纤接口\n\n光纤接口的英文名字为TOSLINK，来源于东芝(TOSHIBA)制定的技术标准，器材上一般标为“Optical”。\n\n![img](image/ksohtml924/wps14.jpg) \n\n \n\n \n\n## 二、音频信号分类：平衡信号与非平衡信号\n\n非平衡信号：声波转变成电信号后，直接传送。\n\n平衡信号：把原始信号反相（相位差为180 度），然后同时传送反相的信号和原始信号。\n\n平衡传输：一种应用广泛的音频信号传输方式。利用相位抵消的原理将音频信号传输过程中所受的其他干扰降至最低，即：平衡信号送入差动放大器，原信号和反相位信号相减，得到加强的原始信号，由于在传送中，两条线路受到的干扰几乎一样，在相减的过程中，减掉了干扰信号，因此抗干扰能力更强。所以，平衡传输一般出现在专业音频设备上，以及传输距离较远的场合。这种在平衡式信号线中抑制两极导线中所共同有的噪声的现象便称为共模抑制。\n\n平衡传输需要并列的三根导线来实现，即接地线、热端线、冷端线。因此，平衡输入、输出接头，必须具有三个脚位，如卡侬头，大三芯接头。\n\n非平衡传输只有两个端子，即：信号端与接地端。\n\n \n\n## 三、阻抗\n\n指电流通过扬声器时所遇到的电阻，它是指对交流电的阻碍程度，通常以欧姆（Ω）为单位表示。\n\n阻抗可反映扬声器对电源的负载特性。（负载：电子元件的峰值功率） \n\n一般来说，较低的阻抗意味着扬声器对电源的负载更大，因此可能需要更大的功率驱动才能达到更高的音量。而较高的阻抗则需要较少的功率来驱动，但音量可能会较低。\n\n阻抗匹配非常重要。如果将低阻抗扬声器连接到高阻抗放大器，可能会导致功率损失和声音质量下降。相反，将高阻抗扬声器连接到低阻抗放大器也可能导致过载和损坏。因此，为了获得最佳的音频效果和系统性能，选择合适阻抗匹配的扬声器和放大器是很重要的。\n\n### 1.低阻抗扬声器（如4Ω）\n\n▲优势：低阻抗意味着扬声器对电源的负载较大，它能够吸收更多的功率，并在较低的声压级上产生较高的音量。低阻抗扬声器通常具有更高的灵敏度，能够以较小的功率驱动就产生大音量。\n\n▲注意事项：在连接低阻抗扬声器时，需要确保放大器或扬声器驱动器具备足够的功率和稳定性，以防止过载和损坏。\n\n### 2.高阻抗扬声器（如16Ω或32Ω）\n\n▲优势：高阻抗扬声器需要较低的功率来驱动，对放大器的要求较低。这使得它们适用于某些特定的应用场景，例如便携式音频设备或静音环境下的私人听音等。高阻抗扬声器通常具有较小的功率需求，并且对信号质量和输出稳定性的要求相对较低。\n\n▲注意事项：高阻抗扬声器可能在较高的声压级上需要更大的功率才能产生相同的音量，所以在选择时需要确保匹配合适的放大器。\n\n \n\n## 四、阻抗电平匹配","slug":"声学原理和音频硬件原理","published":1,"date":"2025-04-13T10:39:03.430Z","updated":"2025-04-13T10:41:13.689Z","comments":1,"layout":"post","photos":[],"_id":"cm9h6j6xs0001sspy6w9k1w64","content":"<div class=\".article-gallery\"><p>作者：段恺乐</p>\n<h2 id=\"一、模拟和数字音频接口分类\"><a href=\"#一、模拟和数字音频接口分类\" class=\"headerlink\" title=\"一、模拟和数字音频接口分类\"></a>一、模拟和数字音频接口分类</h2><h3 id=\"1-TRS：Tip-signal-、Ring-signal-、Sleeve-ground\"><a href=\"#1-TRS：Tip-signal-、Ring-signal-、Sleeve-ground\" class=\"headerlink\" title=\"1.TRS：Tip(signal)、Ring(signal)、Sleeve(ground)\"></a>1.TRS：Tip(signal)、Ring(signal)、Sleeve(ground)</h3><p>分别代表了这种接头的3个触点它的接头外观是圆柱体形状，分别代表了这种接头的3个触点，我们看到的就是被两段绝缘材料隔离开的三段金属柱。</p>\n<p>因此，3.5mm接头和6.3mm接头也被人称为“<strong>小三芯</strong>”和“<strong>大三芯</strong>”。</p>\n<p>通常有三种尺寸：1&#x2F;4”(6.3mm)、1&#x2F;8”(3.5mm)、3&#x2F;32”(2.5mm)，如下图所示，最常见的是3.5mm尺寸的接头。</p>\n<p><a href=\"/image/ksohtml924/wps8.jpg\" title=\"img\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/ksohtml924/wps8.jpg\" alt=\"img\"></a></p>\n<p>如下图所示，为“大三芯”接口的具体结构。</p>\n<p>  <a href=\"/image/ksohtml924/wps9.png\" title=\"img\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/ksohtml924/wps9.png\" alt=\"img\"></a></p>\n<hr>\n<p>TRS插头：如耳机、随身听等，多出来的那一芯是用来传送语音信号或控制信号；还有一种用于耳机的四芯3.5mm插头则是用来传输平衡信号的。</p>\n<p>二芯的TS接头：可以用来传送非平衡的单声道音频信号，比如电吉他用的线就是二芯的TS线。</p>\n<p>6.3mmTRS插头：可用来传输平衡信号或非平衡立体声信号，也就是说它可以和我们后面要讲的XLR平衡接口一样，能够传输平衡信号，但因制作这样的平衡线成本比较高，所以一般只用在高档专业音频设备上。</p>\n<h3 id=\"2-RCA接口（Radio-Corporation-of-America）\"><a href=\"#2-RCA接口（Radio-Corporation-of-America）\" class=\"headerlink\" title=\"2.RCA接口（Radio Corporation of America）\"></a>2.RCA接口（Radio Corporation of America）</h3><p><a href=\"/image/ksohtml924/wps10.jpg\" title=\"img\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/ksohtml924/wps10.jpg\" alt=\"img\"></a></p>\n<p>采用同轴传输信号的方式，中轴用来传输信号，外沿一圈的接触层用来接地。</p>\n<p>每一根RCA线缆负责传输一个声道的音频信号，因此，可以根据对声道的实际需要，使用与之数量相匹配的RCA线缆。比如要组双声道立体声就需要两根RCA线缆。</p>\n<h3 id=\"3-XLR接口\"><a href=\"#3-XLR接口\" class=\"headerlink\" title=\"3.XLR接口\"></a>3.XLR接口</h3><p>又被称为“卡农口”。它们最早的产品是“cannon X”系列，后来改进产品增加了一个锁定装置(Latch)，于是在“X”后面增加了一个“L”;再后来又围绕着接头的金属触点增加了橡胶封口(Rubber compound)，于是又在“L”后面增加了一个“R”。人们就把三个大写字母组合在一起，称这种接头为“XLR connector”。</p>\n<p><a href=\"/image/ksohtml924/wps12.jpg\" title=\"img\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/ksohtml924/wps12.jpg\" alt=\"img\"></a></p>\n<p>比较常见的三芯XLR接口；有的耳放上面会提供四芯平衡XLR耳机接口。</p>\n<h3 id=\"4-AES-EBU接口\"><a href=\"#4-AES-EBU接口\" class=\"headerlink\" title=\"4.AES&#x2F;EBU接口\"></a>4.AES&#x2F;EBU接口</h3><p>Audio Engineering Society&#x2F;European Broadcast Union(音频工程师协会&#x2F;欧洲广播联盟)。</p>\n<p>基于单根绞合线对来传输数字音频数据的串行位传输协议。</p>\n<p>无须均衡即可在长达100米的距离上传输数据，如果均衡，可以传输更远距离。</p>\n<h3 id=\"5-S-PDIF接口\"><a href=\"#5-S-PDIF接口\" class=\"headerlink\" title=\"5.S&#x2F;PDIF接口\"></a>5.S&#x2F;PDIF接口</h3><p>Sony&#x2F;Philips Digital Interconnect Format</p>\n<p>在某些情况下AES&#x2F;EBU的专业设备和S&#x2F;PDIF的用户设备可以直接连接，但是并不推荐这种做法，因为在电气技术规范和信道状态位中存在非常重要的差别，当混用协议时可能产生无法预知的后果。</p>\n<h3 id=\"6-同轴接口\"><a href=\"#6-同轴接口\" class=\"headerlink\" title=\"6.同轴接口\"></a>6.同轴接口</h3><p>同轴接口分为两种，一种是RCA同轴接口，另一种是BNC同轴接口。前者的外观跟模拟RCA接口没有任何区别，而后者则与我们在电视机上常见的信号接口有点类似，而且加了锁紧设计。同轴线缆接头有两个同心导体，导体和屏蔽层共用同一轴心，线的阻抗是75欧姆。</p>\n<p><a href=\"/image/ksohtml924/wps13.jpg\" title=\"img\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/ksohtml924/wps13.jpg\" alt=\"img\"></a> </p>\n<h3 id=\"7-光纤接口\"><a href=\"#7-光纤接口\" class=\"headerlink\" title=\"7.光纤接口\"></a>7.光纤接口</h3><p>光纤接口的英文名字为TOSLINK，来源于东芝(TOSHIBA)制定的技术标准，器材上一般标为“Optical”。</p>\n<p><a href=\"/image/ksohtml924/wps14.jpg\" title=\"img\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/ksohtml924/wps14.jpg\" alt=\"img\"></a> </p>\n<h2 id=\"二、音频信号分类：平衡信号与非平衡信号\"><a href=\"#二、音频信号分类：平衡信号与非平衡信号\" class=\"headerlink\" title=\"二、音频信号分类：平衡信号与非平衡信号\"></a>二、音频信号分类：平衡信号与非平衡信号</h2><p>非平衡信号：声波转变成电信号后，直接传送。</p>\n<p>平衡信号：把原始信号反相（相位差为180 度），然后同时传送反相的信号和原始信号。</p>\n<p>平衡传输：一种应用广泛的音频信号传输方式。利用相位抵消的原理将音频信号传输过程中所受的其他干扰降至最低，即：平衡信号送入差动放大器，原信号和反相位信号相减，得到加强的原始信号，由于在传送中，两条线路受到的干扰几乎一样，在相减的过程中，减掉了干扰信号，因此抗干扰能力更强。所以，平衡传输一般出现在专业音频设备上，以及传输距离较远的场合。这种在平衡式信号线中抑制两极导线中所共同有的噪声的现象便称为共模抑制。</p>\n<p>平衡传输需要并列的三根导线来实现，即接地线、热端线、冷端线。因此，平衡输入、输出接头，必须具有三个脚位，如卡侬头，大三芯接头。</p>\n<p>非平衡传输只有两个端子，即：信号端与接地端。</p>\n<h2 id=\"三、阻抗\"><a href=\"#三、阻抗\" class=\"headerlink\" title=\"三、阻抗\"></a>三、阻抗</h2><p>指电流通过扬声器时所遇到的电阻，它是指对交流电的阻碍程度，通常以欧姆（Ω）为单位表示。</p>\n<p>阻抗可反映扬声器对电源的负载特性。（负载：电子元件的峰值功率） </p>\n<p>一般来说，较低的阻抗意味着扬声器对电源的负载更大，因此可能需要更大的功率驱动才能达到更高的音量。而较高的阻抗则需要较少的功率来驱动，但音量可能会较低。</p>\n<p>阻抗匹配非常重要。如果将低阻抗扬声器连接到高阻抗放大器，可能会导致功率损失和声音质量下降。相反，将高阻抗扬声器连接到低阻抗放大器也可能导致过载和损坏。因此，为了获得最佳的音频效果和系统性能，选择合适阻抗匹配的扬声器和放大器是很重要的。</p>\n<h3 id=\"1-低阻抗扬声器（如4Ω）\"><a href=\"#1-低阻抗扬声器（如4Ω）\" class=\"headerlink\" title=\"1.低阻抗扬声器（如4Ω）\"></a>1.低阻抗扬声器（如4Ω）</h3><p>▲优势：低阻抗意味着扬声器对电源的负载较大，它能够吸收更多的功率，并在较低的声压级上产生较高的音量。低阻抗扬声器通常具有更高的灵敏度，能够以较小的功率驱动就产生大音量。</p>\n<p>▲注意事项：在连接低阻抗扬声器时，需要确保放大器或扬声器驱动器具备足够的功率和稳定性，以防止过载和损坏。</p>\n<h3 id=\"2-高阻抗扬声器（如16Ω或32Ω）\"><a href=\"#2-高阻抗扬声器（如16Ω或32Ω）\" class=\"headerlink\" title=\"2.高阻抗扬声器（如16Ω或32Ω）\"></a>2.高阻抗扬声器（如16Ω或32Ω）</h3><p>▲优势：高阻抗扬声器需要较低的功率来驱动，对放大器的要求较低。这使得它们适用于某些特定的应用场景，例如便携式音频设备或静音环境下的私人听音等。高阻抗扬声器通常具有较小的功率需求，并且对信号质量和输出稳定性的要求相对较低。</p>\n<p>▲注意事项：高阻抗扬声器可能在较高的声压级上需要更大的功率才能产生相同的音量，所以在选择时需要确保匹配合适的放大器。</p>\n<h2 id=\"四、阻抗电平匹配\"><a href=\"#四、阻抗电平匹配\" class=\"headerlink\" title=\"四、阻抗电平匹配\"></a>四、阻抗电平匹配</h2></div>","excerpt":"","more":"<div class=\".article-gallery\"><p>作者：段恺乐</p>\n<h2 id=\"一、模拟和数字音频接口分类\"><a href=\"#一、模拟和数字音频接口分类\" class=\"headerlink\" title=\"一、模拟和数字音频接口分类\"></a>一、模拟和数字音频接口分类</h2><h3 id=\"1-TRS：Tip-signal-、Ring-signal-、Sleeve-ground\"><a href=\"#1-TRS：Tip-signal-、Ring-signal-、Sleeve-ground\" class=\"headerlink\" title=\"1.TRS：Tip(signal)、Ring(signal)、Sleeve(ground)\"></a>1.TRS：Tip(signal)、Ring(signal)、Sleeve(ground)</h3><p>分别代表了这种接头的3个触点它的接头外观是圆柱体形状，分别代表了这种接头的3个触点，我们看到的就是被两段绝缘材料隔离开的三段金属柱。</p>\n<p>因此，3.5mm接头和6.3mm接头也被人称为“<strong>小三芯</strong>”和“<strong>大三芯</strong>”。</p>\n<p>通常有三种尺寸：1&#x2F;4”(6.3mm)、1&#x2F;8”(3.5mm)、3&#x2F;32”(2.5mm)，如下图所示，最常见的是3.5mm尺寸的接头。</p>\n<p><a href=\"/image/ksohtml924/wps8.jpg\" title=\"img\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/ksohtml924/wps8.jpg\" alt=\"img\"></a></p>\n<p>如下图所示，为“大三芯”接口的具体结构。</p>\n<p>  <a href=\"/image/ksohtml924/wps9.png\" title=\"img\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/ksohtml924/wps9.png\" alt=\"img\"></a></p>\n<hr>\n<p>TRS插头：如耳机、随身听等，多出来的那一芯是用来传送语音信号或控制信号；还有一种用于耳机的四芯3.5mm插头则是用来传输平衡信号的。</p>\n<p>二芯的TS接头：可以用来传送非平衡的单声道音频信号，比如电吉他用的线就是二芯的TS线。</p>\n<p>6.3mmTRS插头：可用来传输平衡信号或非平衡立体声信号，也就是说它可以和我们后面要讲的XLR平衡接口一样，能够传输平衡信号，但因制作这样的平衡线成本比较高，所以一般只用在高档专业音频设备上。</p>\n<h3 id=\"2-RCA接口（Radio-Corporation-of-America）\"><a href=\"#2-RCA接口（Radio-Corporation-of-America）\" class=\"headerlink\" title=\"2.RCA接口（Radio Corporation of America）\"></a>2.RCA接口（Radio Corporation of America）</h3><p><a href=\"/image/ksohtml924/wps10.jpg\" title=\"img\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/ksohtml924/wps10.jpg\" alt=\"img\"></a></p>\n<p>采用同轴传输信号的方式，中轴用来传输信号，外沿一圈的接触层用来接地。</p>\n<p>每一根RCA线缆负责传输一个声道的音频信号，因此，可以根据对声道的实际需要，使用与之数量相匹配的RCA线缆。比如要组双声道立体声就需要两根RCA线缆。</p>\n<h3 id=\"3-XLR接口\"><a href=\"#3-XLR接口\" class=\"headerlink\" title=\"3.XLR接口\"></a>3.XLR接口</h3><p>又被称为“卡农口”。它们最早的产品是“cannon X”系列，后来改进产品增加了一个锁定装置(Latch)，于是在“X”后面增加了一个“L”;再后来又围绕着接头的金属触点增加了橡胶封口(Rubber compound)，于是又在“L”后面增加了一个“R”。人们就把三个大写字母组合在一起，称这种接头为“XLR connector”。</p>\n<p><a href=\"/image/ksohtml924/wps12.jpg\" title=\"img\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/ksohtml924/wps12.jpg\" alt=\"img\"></a></p>\n<p>比较常见的三芯XLR接口；有的耳放上面会提供四芯平衡XLR耳机接口。</p>\n<h3 id=\"4-AES-EBU接口\"><a href=\"#4-AES-EBU接口\" class=\"headerlink\" title=\"4.AES&#x2F;EBU接口\"></a>4.AES&#x2F;EBU接口</h3><p>Audio Engineering Society&#x2F;European Broadcast Union(音频工程师协会&#x2F;欧洲广播联盟)。</p>\n<p>基于单根绞合线对来传输数字音频数据的串行位传输协议。</p>\n<p>无须均衡即可在长达100米的距离上传输数据，如果均衡，可以传输更远距离。</p>\n<h3 id=\"5-S-PDIF接口\"><a href=\"#5-S-PDIF接口\" class=\"headerlink\" title=\"5.S&#x2F;PDIF接口\"></a>5.S&#x2F;PDIF接口</h3><p>Sony&#x2F;Philips Digital Interconnect Format</p>\n<p>在某些情况下AES&#x2F;EBU的专业设备和S&#x2F;PDIF的用户设备可以直接连接，但是并不推荐这种做法，因为在电气技术规范和信道状态位中存在非常重要的差别，当混用协议时可能产生无法预知的后果。</p>\n<h3 id=\"6-同轴接口\"><a href=\"#6-同轴接口\" class=\"headerlink\" title=\"6.同轴接口\"></a>6.同轴接口</h3><p>同轴接口分为两种，一种是RCA同轴接口，另一种是BNC同轴接口。前者的外观跟模拟RCA接口没有任何区别，而后者则与我们在电视机上常见的信号接口有点类似，而且加了锁紧设计。同轴线缆接头有两个同心导体，导体和屏蔽层共用同一轴心，线的阻抗是75欧姆。</p>\n<p><a href=\"/image/ksohtml924/wps13.jpg\" title=\"img\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/ksohtml924/wps13.jpg\" alt=\"img\"></a> </p>\n<h3 id=\"7-光纤接口\"><a href=\"#7-光纤接口\" class=\"headerlink\" title=\"7.光纤接口\"></a>7.光纤接口</h3><p>光纤接口的英文名字为TOSLINK，来源于东芝(TOSHIBA)制定的技术标准，器材上一般标为“Optical”。</p>\n<p><a href=\"/image/ksohtml924/wps14.jpg\" title=\"img\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/ksohtml924/wps14.jpg\" alt=\"img\"></a> </p>\n<h2 id=\"二、音频信号分类：平衡信号与非平衡信号\"><a href=\"#二、音频信号分类：平衡信号与非平衡信号\" class=\"headerlink\" title=\"二、音频信号分类：平衡信号与非平衡信号\"></a>二、音频信号分类：平衡信号与非平衡信号</h2><p>非平衡信号：声波转变成电信号后，直接传送。</p>\n<p>平衡信号：把原始信号反相（相位差为180 度），然后同时传送反相的信号和原始信号。</p>\n<p>平衡传输：一种应用广泛的音频信号传输方式。利用相位抵消的原理将音频信号传输过程中所受的其他干扰降至最低，即：平衡信号送入差动放大器，原信号和反相位信号相减，得到加强的原始信号，由于在传送中，两条线路受到的干扰几乎一样，在相减的过程中，减掉了干扰信号，因此抗干扰能力更强。所以，平衡传输一般出现在专业音频设备上，以及传输距离较远的场合。这种在平衡式信号线中抑制两极导线中所共同有的噪声的现象便称为共模抑制。</p>\n<p>平衡传输需要并列的三根导线来实现，即接地线、热端线、冷端线。因此，平衡输入、输出接头，必须具有三个脚位，如卡侬头，大三芯接头。</p>\n<p>非平衡传输只有两个端子，即：信号端与接地端。</p>\n<h2 id=\"三、阻抗\"><a href=\"#三、阻抗\" class=\"headerlink\" title=\"三、阻抗\"></a>三、阻抗</h2><p>指电流通过扬声器时所遇到的电阻，它是指对交流电的阻碍程度，通常以欧姆（Ω）为单位表示。</p>\n<p>阻抗可反映扬声器对电源的负载特性。（负载：电子元件的峰值功率） </p>\n<p>一般来说，较低的阻抗意味着扬声器对电源的负载更大，因此可能需要更大的功率驱动才能达到更高的音量。而较高的阻抗则需要较少的功率来驱动，但音量可能会较低。</p>\n<p>阻抗匹配非常重要。如果将低阻抗扬声器连接到高阻抗放大器，可能会导致功率损失和声音质量下降。相反，将高阻抗扬声器连接到低阻抗放大器也可能导致过载和损坏。因此，为了获得最佳的音频效果和系统性能，选择合适阻抗匹配的扬声器和放大器是很重要的。</p>\n<h3 id=\"1-低阻抗扬声器（如4Ω）\"><a href=\"#1-低阻抗扬声器（如4Ω）\" class=\"headerlink\" title=\"1.低阻抗扬声器（如4Ω）\"></a>1.低阻抗扬声器（如4Ω）</h3><p>▲优势：低阻抗意味着扬声器对电源的负载较大，它能够吸收更多的功率，并在较低的声压级上产生较高的音量。低阻抗扬声器通常具有更高的灵敏度，能够以较小的功率驱动就产生大音量。</p>\n<p>▲注意事项：在连接低阻抗扬声器时，需要确保放大器或扬声器驱动器具备足够的功率和稳定性，以防止过载和损坏。</p>\n<h3 id=\"2-高阻抗扬声器（如16Ω或32Ω）\"><a href=\"#2-高阻抗扬声器（如16Ω或32Ω）\" class=\"headerlink\" title=\"2.高阻抗扬声器（如16Ω或32Ω）\"></a>2.高阻抗扬声器（如16Ω或32Ω）</h3><p>▲优势：高阻抗扬声器需要较低的功率来驱动，对放大器的要求较低。这使得它们适用于某些特定的应用场景，例如便携式音频设备或静音环境下的私人听音等。高阻抗扬声器通常具有较小的功率需求，并且对信号质量和输出稳定性的要求相对较低。</p>\n<p>▲注意事项：高阻抗扬声器可能在较高的声压级上需要更大的功率才能产生相同的音量，所以在选择时需要确保匹配合适的放大器。</p>\n<h2 id=\"四、阻抗电平匹配\"><a href=\"#四、阻抗电平匹配\" class=\"headerlink\" title=\"四、阻抗电平匹配\"></a>四、阻抗电平匹配</h2></div>"},{"title":"无忧传媒🎶工作内容归档","_content":"\n\n[TOC]\n# 2024年\n## 6月\n### 主播明月\n娱乐直播，声音效果机架调试，纽曼105+娃娃脸声卡。唱歌的种类很丰富，例如民歌，美声以及流行音乐等，因此要针对不同风格的歌曲调试出合适的声音效果。\n### 广东夫妇商务场（重点）\n电商带货达人，粉丝7000万+\n电商直播，迈达斯调音台链路路由，森海塞尔无线麦克风。保证直播音频的稳定性占首位，语音要唇齿清晰，能够准确地传达信息给到观众。\n### 哇塞小财神\n娱乐直播，声音效果调试，双人直播，不同声线的唱歌机架效果\n\n## 7月\n### 王小小生日会\n粉丝：500万+，抖音音乐人\n带有完整的直播脚本，有很多助演主播来客串的小型舞台。负责正常直播的音频调度和提供技术支持。\n\n\n### 音效助手开发\n7月是音效助手开发的提出和规划时间。在七月份做了很多准备工作，以及跟我大学同学讨论了实施的可能性，并且出过几种废案：Unity+Wwise；Unity；Unity+FMOD三种方案最终都不能达到我们理想的效果。\n\n最后是选择了Win窗体程序开发，并且有我一个人进行独立开发，在经历了三个月后，总算是开发成功，在给部分主播进行试用和问卷调查。\n\n## 8月\n## 艺帝帝户外直播\n游戏职业选手，100万+粉丝\n手机游戏主播，到电脑直播的音频线路路由，主要解决延迟的问题和音频声像准确度的问题。\n\n\n### 叶凯薇🦀\n颜值主播，粉丝200万+\n娱乐直播，声音效果机架调试。要求声音温柔细腻。\n\n### 无忧传媒成都第二分公司团播音频系统搭建（重点）\n团播的音频场景分为主播+场控两部分。场控的声音要求带有激情，能够煽动观众，并且要求没有杂音（现场音乐还有其他人员的声音都很大）。\n\n\n\n## 9月\n### 宇航\n个人娱乐直播声音调试\n\n### 许青青\n个人娱乐直播声音调试，主要是戏腔\n\n### 郭大侠短视频后期音效制作（重点）\n郭大侠与西安官方消防局的合作影片，负责短片的音效设计。主要是通过拟音和音效库完成的。\n\n\n\n## 10月\n\n### 刘畊宏商务场（重点）\n刘畊宏，健身达人以及著名歌手，粉丝 6000万+\n刘畊宏和某汽车品牌的商务场直播，在大型工厂搭景进行直播，我们主要负责提供链路指导。\n\n### 芊语芊寻\n颜值主播，粉丝500万+\n双胞胎姐妹，用的同一套直播设备，但是要根据她们的声线和人设，来进行定制化音色设计。\n\n### 铭宝\n娱乐直播，个人声音效果调试。\n\n### 无忧传媒杭州第五分公司团播音频搭建（重点）\n此次的团播整体搭建中，除了上次成都第二分公司团播音频设计中的注意点之外，还需要注意杭州第五分公司它们不同团播的风格和场景都不同。与此同时，不同团、同一团中的不同成员都有不同的人设和风格，因此要针对性的，做出不同的设计，来符合整体直播的风格。\n\n### 憨憨熊\n第一次独自上门给主播进行直播音频场景搭建。\n\n## 11月\n### 乡村小乔与珀莱雅商务场（重点）\n类型：电商商务\n是我第一次独立整体搭建直播间（音频＋视频）和负责直播时的运镜。\n珀莱雅：国内著名的美妆化妆品品牌；乡村小乔，抖音知名乡村博主，粉丝1000万+\n直播流水1000万+\n\n### 珀莱雅官方直播间搭建\n美妆官方店播，需求不是很复杂，声音干净稳定即可。\n\n### 小怡不吃冰🧊\n粉丝200万+，娱乐主播，主播风格是充满生命力的，具有活力的。因此声音设计上要饱满，音量足够。\n\n\n### 王VV\n个人娱乐直播调试。和上面讲过的同类一致\n\n### 铭老板\n娱乐直播，个人声音效果调试\n\n### BABI与皮皮皮朱商务场（重点）\nbabi，国内新兴美妆品牌；皮皮朱，著名颜值男主播达人，粉丝：400万+\n具有完整的直播脚本，前期进行了很多次的准备和对接。主要负责直播的音频搭建，场上有皮皮朱和主持人两个人。直播中需要注意的是根据不同的直播需求（跳舞舞蹈、背景音乐与流程的绑定）进行音频流的设计。\n直播流水500万+\n\n## 12月\n### 张zhang\n娱乐直播，个人声音效果调试\n### 张大大带货跟播\n张大大，国内“知名”主持人，粉丝1000万+。\n张大大福利场直播带货，主要负责直播中的音频监听和音乐播放。在直播前需要设计的地方是，直播中，会与观众进行连麦，因此音频信号链路需要额外设计。\n直播流水100万+\n\n### 刘弘浩_\n娱乐直播，个人声音效果调试\n\n### 芊芊亿\n娱乐直播，个人声音效果调试\n### 哒哒921\n娱乐直播，个人声音效果调试\n粉丝350万+\n### 徐一周Key\n娱乐直播，个人声音效果调试\n主播是职业音乐人，曾上过CCTV进行节目录制。\n### BABIx香菜（孙恩盛）商务场（重点）\nbabi，国内新兴美妆品牌；孙恩盛，著名颜值男主播达人，粉丝：750万+\n和上面皮皮朱的商务场总体上大差不差，只是在具体的流程上有细微的差别。\n直播流水100万+\n\n### 梁教授\n颜值男主播，粉丝100万+\n主播直播风格偏露骨和充满魅惑。因此整体声音设计要充满男性荷尔蒙，要能够带有深深的暗示。\n\n# 2025年\n## 1月\n### 无忧传媒杭州第六分公司整体娱乐调试\n从1月份开始到现在，工作内容主要负责对接无忧传媒内部，包括无忧传媒成都第一、第二、第三分公司，无忧传媒武汉分公司、无忧传媒安徽分公司、无忧传媒长沙分公司部分主播的娱乐音频调试，特别是杭州第六分公司所有主播的娱乐音频调试。\n杭州第六分公司全是男主播，主要是中国人和少部分的外国人（韩国人居多），主播的人设从职业的音乐人（直播内容是写歌，因此整体音频氛围是沉浸式的，并且要进行正确的直播链路）、专业音乐人（音乐学院学生和录音棚老板等）、唱歌基础薄弱的，或者吉他弹唱或者钢琴弹唱的等等。总结来说就是风格各异，直播形式多样，而我需要针对不同的直播场景，直播内容，主播人设进行直播的音频设计和调试。\n在我负责的这段时间内，杭州第六分公司的直播整体流水翻了很多倍。\n\n### 李发明\n娱乐直播，个人声音效果调试\n\n### 陈琪东\n前偶像练习生，专业歌手，粉丝50万+。娱乐直播，个人声音效果调试。设备是专业的舞台级麦克风森海塞尔SKM9000、纽曼M149和babyface\n\n\n\n\n\n","source":"_posts/无忧传媒工作内容归档.md","raw":"---\n title: 无忧传媒🎶工作内容归档\n---\n\n\n[TOC]\n# 2024年\n## 6月\n### 主播明月\n娱乐直播，声音效果机架调试，纽曼105+娃娃脸声卡。唱歌的种类很丰富，例如民歌，美声以及流行音乐等，因此要针对不同风格的歌曲调试出合适的声音效果。\n### 广东夫妇商务场（重点）\n电商带货达人，粉丝7000万+\n电商直播，迈达斯调音台链路路由，森海塞尔无线麦克风。保证直播音频的稳定性占首位，语音要唇齿清晰，能够准确地传达信息给到观众。\n### 哇塞小财神\n娱乐直播，声音效果调试，双人直播，不同声线的唱歌机架效果\n\n## 7月\n### 王小小生日会\n粉丝：500万+，抖音音乐人\n带有完整的直播脚本，有很多助演主播来客串的小型舞台。负责正常直播的音频调度和提供技术支持。\n\n\n### 音效助手开发\n7月是音效助手开发的提出和规划时间。在七月份做了很多准备工作，以及跟我大学同学讨论了实施的可能性，并且出过几种废案：Unity+Wwise；Unity；Unity+FMOD三种方案最终都不能达到我们理想的效果。\n\n最后是选择了Win窗体程序开发，并且有我一个人进行独立开发，在经历了三个月后，总算是开发成功，在给部分主播进行试用和问卷调查。\n\n## 8月\n## 艺帝帝户外直播\n游戏职业选手，100万+粉丝\n手机游戏主播，到电脑直播的音频线路路由，主要解决延迟的问题和音频声像准确度的问题。\n\n\n### 叶凯薇🦀\n颜值主播，粉丝200万+\n娱乐直播，声音效果机架调试。要求声音温柔细腻。\n\n### 无忧传媒成都第二分公司团播音频系统搭建（重点）\n团播的音频场景分为主播+场控两部分。场控的声音要求带有激情，能够煽动观众，并且要求没有杂音（现场音乐还有其他人员的声音都很大）。\n\n\n\n## 9月\n### 宇航\n个人娱乐直播声音调试\n\n### 许青青\n个人娱乐直播声音调试，主要是戏腔\n\n### 郭大侠短视频后期音效制作（重点）\n郭大侠与西安官方消防局的合作影片，负责短片的音效设计。主要是通过拟音和音效库完成的。\n\n\n\n## 10月\n\n### 刘畊宏商务场（重点）\n刘畊宏，健身达人以及著名歌手，粉丝 6000万+\n刘畊宏和某汽车品牌的商务场直播，在大型工厂搭景进行直播，我们主要负责提供链路指导。\n\n### 芊语芊寻\n颜值主播，粉丝500万+\n双胞胎姐妹，用的同一套直播设备，但是要根据她们的声线和人设，来进行定制化音色设计。\n\n### 铭宝\n娱乐直播，个人声音效果调试。\n\n### 无忧传媒杭州第五分公司团播音频搭建（重点）\n此次的团播整体搭建中，除了上次成都第二分公司团播音频设计中的注意点之外，还需要注意杭州第五分公司它们不同团播的风格和场景都不同。与此同时，不同团、同一团中的不同成员都有不同的人设和风格，因此要针对性的，做出不同的设计，来符合整体直播的风格。\n\n### 憨憨熊\n第一次独自上门给主播进行直播音频场景搭建。\n\n## 11月\n### 乡村小乔与珀莱雅商务场（重点）\n类型：电商商务\n是我第一次独立整体搭建直播间（音频＋视频）和负责直播时的运镜。\n珀莱雅：国内著名的美妆化妆品品牌；乡村小乔，抖音知名乡村博主，粉丝1000万+\n直播流水1000万+\n\n### 珀莱雅官方直播间搭建\n美妆官方店播，需求不是很复杂，声音干净稳定即可。\n\n### 小怡不吃冰🧊\n粉丝200万+，娱乐主播，主播风格是充满生命力的，具有活力的。因此声音设计上要饱满，音量足够。\n\n\n### 王VV\n个人娱乐直播调试。和上面讲过的同类一致\n\n### 铭老板\n娱乐直播，个人声音效果调试\n\n### BABI与皮皮皮朱商务场（重点）\nbabi，国内新兴美妆品牌；皮皮朱，著名颜值男主播达人，粉丝：400万+\n具有完整的直播脚本，前期进行了很多次的准备和对接。主要负责直播的音频搭建，场上有皮皮朱和主持人两个人。直播中需要注意的是根据不同的直播需求（跳舞舞蹈、背景音乐与流程的绑定）进行音频流的设计。\n直播流水500万+\n\n## 12月\n### 张zhang\n娱乐直播，个人声音效果调试\n### 张大大带货跟播\n张大大，国内“知名”主持人，粉丝1000万+。\n张大大福利场直播带货，主要负责直播中的音频监听和音乐播放。在直播前需要设计的地方是，直播中，会与观众进行连麦，因此音频信号链路需要额外设计。\n直播流水100万+\n\n### 刘弘浩_\n娱乐直播，个人声音效果调试\n\n### 芊芊亿\n娱乐直播，个人声音效果调试\n### 哒哒921\n娱乐直播，个人声音效果调试\n粉丝350万+\n### 徐一周Key\n娱乐直播，个人声音效果调试\n主播是职业音乐人，曾上过CCTV进行节目录制。\n### BABIx香菜（孙恩盛）商务场（重点）\nbabi，国内新兴美妆品牌；孙恩盛，著名颜值男主播达人，粉丝：750万+\n和上面皮皮朱的商务场总体上大差不差，只是在具体的流程上有细微的差别。\n直播流水100万+\n\n### 梁教授\n颜值男主播，粉丝100万+\n主播直播风格偏露骨和充满魅惑。因此整体声音设计要充满男性荷尔蒙，要能够带有深深的暗示。\n\n# 2025年\n## 1月\n### 无忧传媒杭州第六分公司整体娱乐调试\n从1月份开始到现在，工作内容主要负责对接无忧传媒内部，包括无忧传媒成都第一、第二、第三分公司，无忧传媒武汉分公司、无忧传媒安徽分公司、无忧传媒长沙分公司部分主播的娱乐音频调试，特别是杭州第六分公司所有主播的娱乐音频调试。\n杭州第六分公司全是男主播，主要是中国人和少部分的外国人（韩国人居多），主播的人设从职业的音乐人（直播内容是写歌，因此整体音频氛围是沉浸式的，并且要进行正确的直播链路）、专业音乐人（音乐学院学生和录音棚老板等）、唱歌基础薄弱的，或者吉他弹唱或者钢琴弹唱的等等。总结来说就是风格各异，直播形式多样，而我需要针对不同的直播场景，直播内容，主播人设进行直播的音频设计和调试。\n在我负责的这段时间内，杭州第六分公司的直播整体流水翻了很多倍。\n\n### 李发明\n娱乐直播，个人声音效果调试\n\n### 陈琪东\n前偶像练习生，专业歌手，粉丝50万+。娱乐直播，个人声音效果调试。设备是专业的舞台级麦克风森海塞尔SKM9000、纽曼M149和babyface\n\n\n\n\n\n","slug":"无忧传媒工作内容归档","published":1,"date":"2025-04-15T14:41:07.272Z","updated":"2025-04-15T15:39:53.861Z","_id":"cm9h6j6xu0003sspy9aiies7m","comments":1,"layout":"post","photos":[],"content":"<div class=\".article-gallery\"><p>[TOC]</p>\n<h1 id=\"2024年\"><a href=\"#2024年\" class=\"headerlink\" title=\"2024年\"></a>2024年</h1><h2 id=\"6月\"><a href=\"#6月\" class=\"headerlink\" title=\"6月\"></a>6月</h2><h3 id=\"主播明月\"><a href=\"#主播明月\" class=\"headerlink\" title=\"主播明月\"></a>主播明月</h3><p>娱乐直播，声音效果机架调试，纽曼105+娃娃脸声卡。唱歌的种类很丰富，例如民歌，美声以及流行音乐等，因此要针对不同风格的歌曲调试出合适的声音效果。</p>\n<h3 id=\"广东夫妇商务场（重点）\"><a href=\"#广东夫妇商务场（重点）\" class=\"headerlink\" title=\"广东夫妇商务场（重点）\"></a>广东夫妇商务场（重点）</h3><p>电商带货达人，粉丝7000万+<br>电商直播，迈达斯调音台链路路由，森海塞尔无线麦克风。保证直播音频的稳定性占首位，语音要唇齿清晰，能够准确地传达信息给到观众。</p>\n<h3 id=\"哇塞小财神\"><a href=\"#哇塞小财神\" class=\"headerlink\" title=\"哇塞小财神\"></a>哇塞小财神</h3><p>娱乐直播，声音效果调试，双人直播，不同声线的唱歌机架效果</p>\n<h2 id=\"7月\"><a href=\"#7月\" class=\"headerlink\" title=\"7月\"></a>7月</h2><h3 id=\"王小小生日会\"><a href=\"#王小小生日会\" class=\"headerlink\" title=\"王小小生日会\"></a>王小小生日会</h3><p>粉丝：500万+，抖音音乐人<br>带有完整的直播脚本，有很多助演主播来客串的小型舞台。负责正常直播的音频调度和提供技术支持。</p>\n<h3 id=\"音效助手开发\"><a href=\"#音效助手开发\" class=\"headerlink\" title=\"音效助手开发\"></a>音效助手开发</h3><p>7月是音效助手开发的提出和规划时间。在七月份做了很多准备工作，以及跟我大学同学讨论了实施的可能性，并且出过几种废案：Unity+Wwise；Unity；Unity+FMOD三种方案最终都不能达到我们理想的效果。</p>\n<p>最后是选择了Win窗体程序开发，并且有我一个人进行独立开发，在经历了三个月后，总算是开发成功，在给部分主播进行试用和问卷调查。</p>\n<h2 id=\"8月\"><a href=\"#8月\" class=\"headerlink\" title=\"8月\"></a>8月</h2><h2 id=\"艺帝帝户外直播\"><a href=\"#艺帝帝户外直播\" class=\"headerlink\" title=\"艺帝帝户外直播\"></a>艺帝帝户外直播</h2><p>游戏职业选手，100万+粉丝<br>手机游戏主播，到电脑直播的音频线路路由，主要解决延迟的问题和音频声像准确度的问题。</p>\n<h3 id=\"叶凯薇🦀\"><a href=\"#叶凯薇🦀\" class=\"headerlink\" title=\"叶凯薇🦀\"></a>叶凯薇🦀</h3><p>颜值主播，粉丝200万+<br>娱乐直播，声音效果机架调试。要求声音温柔细腻。</p>\n<h3 id=\"无忧传媒成都第二分公司团播音频系统搭建（重点）\"><a href=\"#无忧传媒成都第二分公司团播音频系统搭建（重点）\" class=\"headerlink\" title=\"无忧传媒成都第二分公司团播音频系统搭建（重点）\"></a>无忧传媒成都第二分公司团播音频系统搭建（重点）</h3><p>团播的音频场景分为主播+场控两部分。场控的声音要求带有激情，能够煽动观众，并且要求没有杂音（现场音乐还有其他人员的声音都很大）。</p>\n<h2 id=\"9月\"><a href=\"#9月\" class=\"headerlink\" title=\"9月\"></a>9月</h2><h3 id=\"宇航\"><a href=\"#宇航\" class=\"headerlink\" title=\"宇航\"></a>宇航</h3><p>个人娱乐直播声音调试</p>\n<h3 id=\"许青青\"><a href=\"#许青青\" class=\"headerlink\" title=\"许青青\"></a>许青青</h3><p>个人娱乐直播声音调试，主要是戏腔</p>\n<h3 id=\"郭大侠短视频后期音效制作（重点）\"><a href=\"#郭大侠短视频后期音效制作（重点）\" class=\"headerlink\" title=\"郭大侠短视频后期音效制作（重点）\"></a>郭大侠短视频后期音效制作（重点）</h3><p>郭大侠与西安官方消防局的合作影片，负责短片的音效设计。主要是通过拟音和音效库完成的。</p>\n<h2 id=\"10月\"><a href=\"#10月\" class=\"headerlink\" title=\"10月\"></a>10月</h2><h3 id=\"刘畊宏商务场（重点）\"><a href=\"#刘畊宏商务场（重点）\" class=\"headerlink\" title=\"刘畊宏商务场（重点）\"></a>刘畊宏商务场（重点）</h3><p>刘畊宏，健身达人以及著名歌手，粉丝 6000万+<br>刘畊宏和某汽车品牌的商务场直播，在大型工厂搭景进行直播，我们主要负责提供链路指导。</p>\n<h3 id=\"芊语芊寻\"><a href=\"#芊语芊寻\" class=\"headerlink\" title=\"芊语芊寻\"></a>芊语芊寻</h3><p>颜值主播，粉丝500万+<br>双胞胎姐妹，用的同一套直播设备，但是要根据她们的声线和人设，来进行定制化音色设计。</p>\n<h3 id=\"铭宝\"><a href=\"#铭宝\" class=\"headerlink\" title=\"铭宝\"></a>铭宝</h3><p>娱乐直播，个人声音效果调试。</p>\n<h3 id=\"无忧传媒杭州第五分公司团播音频搭建（重点）\"><a href=\"#无忧传媒杭州第五分公司团播音频搭建（重点）\" class=\"headerlink\" title=\"无忧传媒杭州第五分公司团播音频搭建（重点）\"></a>无忧传媒杭州第五分公司团播音频搭建（重点）</h3><p>此次的团播整体搭建中，除了上次成都第二分公司团播音频设计中的注意点之外，还需要注意杭州第五分公司它们不同团播的风格和场景都不同。与此同时，不同团、同一团中的不同成员都有不同的人设和风格，因此要针对性的，做出不同的设计，来符合整体直播的风格。</p>\n<h3 id=\"憨憨熊\"><a href=\"#憨憨熊\" class=\"headerlink\" title=\"憨憨熊\"></a>憨憨熊</h3><p>第一次独自上门给主播进行直播音频场景搭建。</p>\n<h2 id=\"11月\"><a href=\"#11月\" class=\"headerlink\" title=\"11月\"></a>11月</h2><h3 id=\"乡村小乔与珀莱雅商务场（重点）\"><a href=\"#乡村小乔与珀莱雅商务场（重点）\" class=\"headerlink\" title=\"乡村小乔与珀莱雅商务场（重点）\"></a>乡村小乔与珀莱雅商务场（重点）</h3><p>类型：电商商务<br>是我第一次独立整体搭建直播间（音频＋视频）和负责直播时的运镜。<br>珀莱雅：国内著名的美妆化妆品品牌；乡村小乔，抖音知名乡村博主，粉丝1000万+<br>直播流水1000万+</p>\n<h3 id=\"珀莱雅官方直播间搭建\"><a href=\"#珀莱雅官方直播间搭建\" class=\"headerlink\" title=\"珀莱雅官方直播间搭建\"></a>珀莱雅官方直播间搭建</h3><p>美妆官方店播，需求不是很复杂，声音干净稳定即可。</p>\n<h3 id=\"小怡不吃冰🧊\"><a href=\"#小怡不吃冰🧊\" class=\"headerlink\" title=\"小怡不吃冰🧊\"></a>小怡不吃冰🧊</h3><p>粉丝200万+，娱乐主播，主播风格是充满生命力的，具有活力的。因此声音设计上要饱满，音量足够。</p>\n<h3 id=\"王VV\"><a href=\"#王VV\" class=\"headerlink\" title=\"王VV\"></a>王VV</h3><p>个人娱乐直播调试。和上面讲过的同类一致</p>\n<h3 id=\"铭老板\"><a href=\"#铭老板\" class=\"headerlink\" title=\"铭老板\"></a>铭老板</h3><p>娱乐直播，个人声音效果调试</p>\n<h3 id=\"BABI与皮皮皮朱商务场（重点）\"><a href=\"#BABI与皮皮皮朱商务场（重点）\" class=\"headerlink\" title=\"BABI与皮皮皮朱商务场（重点）\"></a>BABI与皮皮皮朱商务场（重点）</h3><p>babi，国内新兴美妆品牌；皮皮朱，著名颜值男主播达人，粉丝：400万+<br>具有完整的直播脚本，前期进行了很多次的准备和对接。主要负责直播的音频搭建，场上有皮皮朱和主持人两个人。直播中需要注意的是根据不同的直播需求（跳舞舞蹈、背景音乐与流程的绑定）进行音频流的设计。<br>直播流水500万+</p>\n<h2 id=\"12月\"><a href=\"#12月\" class=\"headerlink\" title=\"12月\"></a>12月</h2><h3 id=\"张zhang\"><a href=\"#张zhang\" class=\"headerlink\" title=\"张zhang\"></a>张zhang</h3><p>娱乐直播，个人声音效果调试</p>\n<h3 id=\"张大大带货跟播\"><a href=\"#张大大带货跟播\" class=\"headerlink\" title=\"张大大带货跟播\"></a>张大大带货跟播</h3><p>张大大，国内“知名”主持人，粉丝1000万+。<br>张大大福利场直播带货，主要负责直播中的音频监听和音乐播放。在直播前需要设计的地方是，直播中，会与观众进行连麦，因此音频信号链路需要额外设计。<br>直播流水100万+</p>\n<h3 id=\"刘弘浩\"><a href=\"#刘弘浩\" class=\"headerlink\" title=\"刘弘浩_\"></a>刘弘浩_</h3><p>娱乐直播，个人声音效果调试</p>\n<h3 id=\"芊芊亿\"><a href=\"#芊芊亿\" class=\"headerlink\" title=\"芊芊亿\"></a>芊芊亿</h3><p>娱乐直播，个人声音效果调试</p>\n<h3 id=\"哒哒921\"><a href=\"#哒哒921\" class=\"headerlink\" title=\"哒哒921\"></a>哒哒921</h3><p>娱乐直播，个人声音效果调试<br>粉丝350万+</p>\n<h3 id=\"徐一周Key\"><a href=\"#徐一周Key\" class=\"headerlink\" title=\"徐一周Key\"></a>徐一周Key</h3><p>娱乐直播，个人声音效果调试<br>主播是职业音乐人，曾上过CCTV进行节目录制。</p>\n<h3 id=\"BABIx香菜（孙恩盛）商务场（重点）\"><a href=\"#BABIx香菜（孙恩盛）商务场（重点）\" class=\"headerlink\" title=\"BABIx香菜（孙恩盛）商务场（重点）\"></a>BABIx香菜（孙恩盛）商务场（重点）</h3><p>babi，国内新兴美妆品牌；孙恩盛，著名颜值男主播达人，粉丝：750万+<br>和上面皮皮朱的商务场总体上大差不差，只是在具体的流程上有细微的差别。<br>直播流水100万+</p>\n<h3 id=\"梁教授\"><a href=\"#梁教授\" class=\"headerlink\" title=\"梁教授\"></a>梁教授</h3><p>颜值男主播，粉丝100万+<br>主播直播风格偏露骨和充满魅惑。因此整体声音设计要充满男性荷尔蒙，要能够带有深深的暗示。</p>\n<h1 id=\"2025年\"><a href=\"#2025年\" class=\"headerlink\" title=\"2025年\"></a>2025年</h1><h2 id=\"1月\"><a href=\"#1月\" class=\"headerlink\" title=\"1月\"></a>1月</h2><h3 id=\"无忧传媒杭州第六分公司整体娱乐调试\"><a href=\"#无忧传媒杭州第六分公司整体娱乐调试\" class=\"headerlink\" title=\"无忧传媒杭州第六分公司整体娱乐调试\"></a>无忧传媒杭州第六分公司整体娱乐调试</h3><p>从1月份开始到现在，工作内容主要负责对接无忧传媒内部，包括无忧传媒成都第一、第二、第三分公司，无忧传媒武汉分公司、无忧传媒安徽分公司、无忧传媒长沙分公司部分主播的娱乐音频调试，特别是杭州第六分公司所有主播的娱乐音频调试。<br>杭州第六分公司全是男主播，主要是中国人和少部分的外国人（韩国人居多），主播的人设从职业的音乐人（直播内容是写歌，因此整体音频氛围是沉浸式的，并且要进行正确的直播链路）、专业音乐人（音乐学院学生和录音棚老板等）、唱歌基础薄弱的，或者吉他弹唱或者钢琴弹唱的等等。总结来说就是风格各异，直播形式多样，而我需要针对不同的直播场景，直播内容，主播人设进行直播的音频设计和调试。<br>在我负责的这段时间内，杭州第六分公司的直播整体流水翻了很多倍。</p>\n<h3 id=\"李发明\"><a href=\"#李发明\" class=\"headerlink\" title=\"李发明\"></a>李发明</h3><p>娱乐直播，个人声音效果调试</p>\n<h3 id=\"陈琪东\"><a href=\"#陈琪东\" class=\"headerlink\" title=\"陈琪东\"></a>陈琪东</h3><p>前偶像练习生，专业歌手，粉丝50万+。娱乐直播，个人声音效果调试。设备是专业的舞台级麦克风森海塞尔SKM9000、纽曼M149和babyface</p>\n</div>","excerpt":"","more":"<div class=\".article-gallery\"><p>[TOC]</p>\n<h1 id=\"2024年\"><a href=\"#2024年\" class=\"headerlink\" title=\"2024年\"></a>2024年</h1><h2 id=\"6月\"><a href=\"#6月\" class=\"headerlink\" title=\"6月\"></a>6月</h2><h3 id=\"主播明月\"><a href=\"#主播明月\" class=\"headerlink\" title=\"主播明月\"></a>主播明月</h3><p>娱乐直播，声音效果机架调试，纽曼105+娃娃脸声卡。唱歌的种类很丰富，例如民歌，美声以及流行音乐等，因此要针对不同风格的歌曲调试出合适的声音效果。</p>\n<h3 id=\"广东夫妇商务场（重点）\"><a href=\"#广东夫妇商务场（重点）\" class=\"headerlink\" title=\"广东夫妇商务场（重点）\"></a>广东夫妇商务场（重点）</h3><p>电商带货达人，粉丝7000万+<br>电商直播，迈达斯调音台链路路由，森海塞尔无线麦克风。保证直播音频的稳定性占首位，语音要唇齿清晰，能够准确地传达信息给到观众。</p>\n<h3 id=\"哇塞小财神\"><a href=\"#哇塞小财神\" class=\"headerlink\" title=\"哇塞小财神\"></a>哇塞小财神</h3><p>娱乐直播，声音效果调试，双人直播，不同声线的唱歌机架效果</p>\n<h2 id=\"7月\"><a href=\"#7月\" class=\"headerlink\" title=\"7月\"></a>7月</h2><h3 id=\"王小小生日会\"><a href=\"#王小小生日会\" class=\"headerlink\" title=\"王小小生日会\"></a>王小小生日会</h3><p>粉丝：500万+，抖音音乐人<br>带有完整的直播脚本，有很多助演主播来客串的小型舞台。负责正常直播的音频调度和提供技术支持。</p>\n<h3 id=\"音效助手开发\"><a href=\"#音效助手开发\" class=\"headerlink\" title=\"音效助手开发\"></a>音效助手开发</h3><p>7月是音效助手开发的提出和规划时间。在七月份做了很多准备工作，以及跟我大学同学讨论了实施的可能性，并且出过几种废案：Unity+Wwise；Unity；Unity+FMOD三种方案最终都不能达到我们理想的效果。</p>\n<p>最后是选择了Win窗体程序开发，并且有我一个人进行独立开发，在经历了三个月后，总算是开发成功，在给部分主播进行试用和问卷调查。</p>\n<h2 id=\"8月\"><a href=\"#8月\" class=\"headerlink\" title=\"8月\"></a>8月</h2><h2 id=\"艺帝帝户外直播\"><a href=\"#艺帝帝户外直播\" class=\"headerlink\" title=\"艺帝帝户外直播\"></a>艺帝帝户外直播</h2><p>游戏职业选手，100万+粉丝<br>手机游戏主播，到电脑直播的音频线路路由，主要解决延迟的问题和音频声像准确度的问题。</p>\n<h3 id=\"叶凯薇🦀\"><a href=\"#叶凯薇🦀\" class=\"headerlink\" title=\"叶凯薇🦀\"></a>叶凯薇🦀</h3><p>颜值主播，粉丝200万+<br>娱乐直播，声音效果机架调试。要求声音温柔细腻。</p>\n<h3 id=\"无忧传媒成都第二分公司团播音频系统搭建（重点）\"><a href=\"#无忧传媒成都第二分公司团播音频系统搭建（重点）\" class=\"headerlink\" title=\"无忧传媒成都第二分公司团播音频系统搭建（重点）\"></a>无忧传媒成都第二分公司团播音频系统搭建（重点）</h3><p>团播的音频场景分为主播+场控两部分。场控的声音要求带有激情，能够煽动观众，并且要求没有杂音（现场音乐还有其他人员的声音都很大）。</p>\n<h2 id=\"9月\"><a href=\"#9月\" class=\"headerlink\" title=\"9月\"></a>9月</h2><h3 id=\"宇航\"><a href=\"#宇航\" class=\"headerlink\" title=\"宇航\"></a>宇航</h3><p>个人娱乐直播声音调试</p>\n<h3 id=\"许青青\"><a href=\"#许青青\" class=\"headerlink\" title=\"许青青\"></a>许青青</h3><p>个人娱乐直播声音调试，主要是戏腔</p>\n<h3 id=\"郭大侠短视频后期音效制作（重点）\"><a href=\"#郭大侠短视频后期音效制作（重点）\" class=\"headerlink\" title=\"郭大侠短视频后期音效制作（重点）\"></a>郭大侠短视频后期音效制作（重点）</h3><p>郭大侠与西安官方消防局的合作影片，负责短片的音效设计。主要是通过拟音和音效库完成的。</p>\n<h2 id=\"10月\"><a href=\"#10月\" class=\"headerlink\" title=\"10月\"></a>10月</h2><h3 id=\"刘畊宏商务场（重点）\"><a href=\"#刘畊宏商务场（重点）\" class=\"headerlink\" title=\"刘畊宏商务场（重点）\"></a>刘畊宏商务场（重点）</h3><p>刘畊宏，健身达人以及著名歌手，粉丝 6000万+<br>刘畊宏和某汽车品牌的商务场直播，在大型工厂搭景进行直播，我们主要负责提供链路指导。</p>\n<h3 id=\"芊语芊寻\"><a href=\"#芊语芊寻\" class=\"headerlink\" title=\"芊语芊寻\"></a>芊语芊寻</h3><p>颜值主播，粉丝500万+<br>双胞胎姐妹，用的同一套直播设备，但是要根据她们的声线和人设，来进行定制化音色设计。</p>\n<h3 id=\"铭宝\"><a href=\"#铭宝\" class=\"headerlink\" title=\"铭宝\"></a>铭宝</h3><p>娱乐直播，个人声音效果调试。</p>\n<h3 id=\"无忧传媒杭州第五分公司团播音频搭建（重点）\"><a href=\"#无忧传媒杭州第五分公司团播音频搭建（重点）\" class=\"headerlink\" title=\"无忧传媒杭州第五分公司团播音频搭建（重点）\"></a>无忧传媒杭州第五分公司团播音频搭建（重点）</h3><p>此次的团播整体搭建中，除了上次成都第二分公司团播音频设计中的注意点之外，还需要注意杭州第五分公司它们不同团播的风格和场景都不同。与此同时，不同团、同一团中的不同成员都有不同的人设和风格，因此要针对性的，做出不同的设计，来符合整体直播的风格。</p>\n<h3 id=\"憨憨熊\"><a href=\"#憨憨熊\" class=\"headerlink\" title=\"憨憨熊\"></a>憨憨熊</h3><p>第一次独自上门给主播进行直播音频场景搭建。</p>\n<h2 id=\"11月\"><a href=\"#11月\" class=\"headerlink\" title=\"11月\"></a>11月</h2><h3 id=\"乡村小乔与珀莱雅商务场（重点）\"><a href=\"#乡村小乔与珀莱雅商务场（重点）\" class=\"headerlink\" title=\"乡村小乔与珀莱雅商务场（重点）\"></a>乡村小乔与珀莱雅商务场（重点）</h3><p>类型：电商商务<br>是我第一次独立整体搭建直播间（音频＋视频）和负责直播时的运镜。<br>珀莱雅：国内著名的美妆化妆品品牌；乡村小乔，抖音知名乡村博主，粉丝1000万+<br>直播流水1000万+</p>\n<h3 id=\"珀莱雅官方直播间搭建\"><a href=\"#珀莱雅官方直播间搭建\" class=\"headerlink\" title=\"珀莱雅官方直播间搭建\"></a>珀莱雅官方直播间搭建</h3><p>美妆官方店播，需求不是很复杂，声音干净稳定即可。</p>\n<h3 id=\"小怡不吃冰🧊\"><a href=\"#小怡不吃冰🧊\" class=\"headerlink\" title=\"小怡不吃冰🧊\"></a>小怡不吃冰🧊</h3><p>粉丝200万+，娱乐主播，主播风格是充满生命力的，具有活力的。因此声音设计上要饱满，音量足够。</p>\n<h3 id=\"王VV\"><a href=\"#王VV\" class=\"headerlink\" title=\"王VV\"></a>王VV</h3><p>个人娱乐直播调试。和上面讲过的同类一致</p>\n<h3 id=\"铭老板\"><a href=\"#铭老板\" class=\"headerlink\" title=\"铭老板\"></a>铭老板</h3><p>娱乐直播，个人声音效果调试</p>\n<h3 id=\"BABI与皮皮皮朱商务场（重点）\"><a href=\"#BABI与皮皮皮朱商务场（重点）\" class=\"headerlink\" title=\"BABI与皮皮皮朱商务场（重点）\"></a>BABI与皮皮皮朱商务场（重点）</h3><p>babi，国内新兴美妆品牌；皮皮朱，著名颜值男主播达人，粉丝：400万+<br>具有完整的直播脚本，前期进行了很多次的准备和对接。主要负责直播的音频搭建，场上有皮皮朱和主持人两个人。直播中需要注意的是根据不同的直播需求（跳舞舞蹈、背景音乐与流程的绑定）进行音频流的设计。<br>直播流水500万+</p>\n<h2 id=\"12月\"><a href=\"#12月\" class=\"headerlink\" title=\"12月\"></a>12月</h2><h3 id=\"张zhang\"><a href=\"#张zhang\" class=\"headerlink\" title=\"张zhang\"></a>张zhang</h3><p>娱乐直播，个人声音效果调试</p>\n<h3 id=\"张大大带货跟播\"><a href=\"#张大大带货跟播\" class=\"headerlink\" title=\"张大大带货跟播\"></a>张大大带货跟播</h3><p>张大大，国内“知名”主持人，粉丝1000万+。<br>张大大福利场直播带货，主要负责直播中的音频监听和音乐播放。在直播前需要设计的地方是，直播中，会与观众进行连麦，因此音频信号链路需要额外设计。<br>直播流水100万+</p>\n<h3 id=\"刘弘浩\"><a href=\"#刘弘浩\" class=\"headerlink\" title=\"刘弘浩_\"></a>刘弘浩_</h3><p>娱乐直播，个人声音效果调试</p>\n<h3 id=\"芊芊亿\"><a href=\"#芊芊亿\" class=\"headerlink\" title=\"芊芊亿\"></a>芊芊亿</h3><p>娱乐直播，个人声音效果调试</p>\n<h3 id=\"哒哒921\"><a href=\"#哒哒921\" class=\"headerlink\" title=\"哒哒921\"></a>哒哒921</h3><p>娱乐直播，个人声音效果调试<br>粉丝350万+</p>\n<h3 id=\"徐一周Key\"><a href=\"#徐一周Key\" class=\"headerlink\" title=\"徐一周Key\"></a>徐一周Key</h3><p>娱乐直播，个人声音效果调试<br>主播是职业音乐人，曾上过CCTV进行节目录制。</p>\n<h3 id=\"BABIx香菜（孙恩盛）商务场（重点）\"><a href=\"#BABIx香菜（孙恩盛）商务场（重点）\" class=\"headerlink\" title=\"BABIx香菜（孙恩盛）商务场（重点）\"></a>BABIx香菜（孙恩盛）商务场（重点）</h3><p>babi，国内新兴美妆品牌；孙恩盛，著名颜值男主播达人，粉丝：750万+<br>和上面皮皮朱的商务场总体上大差不差，只是在具体的流程上有细微的差别。<br>直播流水100万+</p>\n<h3 id=\"梁教授\"><a href=\"#梁教授\" class=\"headerlink\" title=\"梁教授\"></a>梁教授</h3><p>颜值男主播，粉丝100万+<br>主播直播风格偏露骨和充满魅惑。因此整体声音设计要充满男性荷尔蒙，要能够带有深深的暗示。</p>\n<h1 id=\"2025年\"><a href=\"#2025年\" class=\"headerlink\" title=\"2025年\"></a>2025年</h1><h2 id=\"1月\"><a href=\"#1月\" class=\"headerlink\" title=\"1月\"></a>1月</h2><h3 id=\"无忧传媒杭州第六分公司整体娱乐调试\"><a href=\"#无忧传媒杭州第六分公司整体娱乐调试\" class=\"headerlink\" title=\"无忧传媒杭州第六分公司整体娱乐调试\"></a>无忧传媒杭州第六分公司整体娱乐调试</h3><p>从1月份开始到现在，工作内容主要负责对接无忧传媒内部，包括无忧传媒成都第一、第二、第三分公司，无忧传媒武汉分公司、无忧传媒安徽分公司、无忧传媒长沙分公司部分主播的娱乐音频调试，特别是杭州第六分公司所有主播的娱乐音频调试。<br>杭州第六分公司全是男主播，主要是中国人和少部分的外国人（韩国人居多），主播的人设从职业的音乐人（直播内容是写歌，因此整体音频氛围是沉浸式的，并且要进行正确的直播链路）、专业音乐人（音乐学院学生和录音棚老板等）、唱歌基础薄弱的，或者吉他弹唱或者钢琴弹唱的等等。总结来说就是风格各异，直播形式多样，而我需要针对不同的直播场景，直播内容，主播人设进行直播的音频设计和调试。<br>在我负责的这段时间内，杭州第六分公司的直播整体流水翻了很多倍。</p>\n<h3 id=\"李发明\"><a href=\"#李发明\" class=\"headerlink\" title=\"李发明\"></a>李发明</h3><p>娱乐直播，个人声音效果调试</p>\n<h3 id=\"陈琪东\"><a href=\"#陈琪东\" class=\"headerlink\" title=\"陈琪东\"></a>陈琪东</h3><p>前偶像练习生，专业歌手，粉丝50万+。娱乐直播，个人声音效果调试。设备是专业的舞台级麦克风森海塞尔SKM9000、纽曼M149和babyface</p>\n</div>"},{"title":"直播音频元素的游戏化影视化","_content":"\n\n## **直播音频设计方案**\n\n撰写人：段恺乐\n\n\n\n##### 一、**项目目标**\n\n###### 1. **背景调查**\n\n目前直播类型：**带货**、**娱乐**、**游戏**、**知识付费**等种类。其中又包括怀旧、氛围、自然、科幻、幻想等极具**风格化**的直播方向或者说风格、类型。\n\n目前的直播音频概括：**以人声为主，音乐为辅**。无论是什么类型的直播，（除了弹幕游戏，催眠类等少部分直播而言），都是人声和音乐相辅相成，构成整体的直播声音景观，有时候会加以“罐头笑声”等音效来活跃气氛。\n\n在这样的声音景观中，**“环境音”**这个被用于烘托氛围，丰富听觉的元素被完全抛弃，因为，在大多数直播环境中，实际的“环境音”大多都是噪音，因为有很多不可控因素以及工作人员等噪音。因此，这使得人们必须舍弃环境音。\n\n###### 2. **方案提出**\n\n在现在这个各行各业逐渐融合，不断发展的大背景下，借助游戏设计中的技术以及理念，我们完全可以在直播中将遗失的“环境音”唤回。\n\n因此，我的想法是：通过对直播场景进行声音设计，并且通过自主设计的适用于直播的声音播放软件，让纯净、好听的环境音能够与人声和音乐和谐的存在于直播之中，给观众带来更好的声音体验。\n\n###### 3. **目标群体**\n\n**风格化的直播风格或者直播场景。**\n\n例如，在XR直播中，当主播们被置身于一个个科幻、中世纪、神话等充满想象力场景中时，如果只有音乐作为背景音的话，这也太单薄了。当我们在游戏中置身一个个奇异怪奇的场景中时，游戏的声音设计师们，通过声音设计能为我们提供许多极具风格化的声音体验，让我们仿佛置身于游戏场景之中。\n\n又或者，当主播们在乡村户外，或者江南古镇的地方进行直播带货时，声音只有音乐和人声实在是太让人失望了。乡村的风声，蝉鸣，风吹树叶的声音，鸡鸣狗叫等元素能给观众带来更强的沉浸感，观看体验能获得明显的提升。或者古镇的行人声音，溪流潺潺流过...让观众们仿佛置身于那个悠扬惬意的江南小巷之中。\n\n因此，在这些极具风格化的直播场景搭建之中，为他们提供音频的设计能明显**提升观众的沉浸感**，让直播内容更加吸引人。\n\n##### 二、**落地步骤**\n\n项目具体落地的步骤我将分为以下三个阶段。\n\n###### 1. **工程开发**\n\n**首先**，先找一个合适的目标主播进行案例设计（XR中世纪教堂场景）。针对同一个场景进行不同风格的声音景观设计：紧张的，神圣的，平静的...\n\n**其次**，开发出相应的软件，通过Wwise与Unity平台进行开发。\n\n**最后**，进行直播稳定性，使用体验等功能的优化测试。\n\n###### 2. **案例制作**\n\n在Demo软件成功开发之后，在今后的直播项目搭建中，寻找合适的、优质的目标主播进行无偿的声音景观设计，将他们作为前期的优秀案例。\n\n在案例的制作当中，**注意项目留存**，关注前后效果比，观众反响，具体直播数据等，通过这些具体的数据来验证我们项目的优势。\n\n###### 3. **包装推广**\n\n当积累了足够的优秀案例之后，并且对业务内容熟悉之后，进行项目包装，再进行推广，作为我们音频组的一个固定项目对外开放。\n\n##### 三、**工程设计**\n\n第一步：Demo制作\n\n线性制作流程。我制作好大致的框架，将模板发送给王。\n\n制作过程中，一定要考虑到优化和轻量化的问题！\n\n \n\n1.项：风格化音频制作\n\n根据案例的需求制作环境声分轨。\n\n \n\n2.王：UI界面设计与开发\n\n根据功能需求，合理设计按钮按键摆放，并且实现基础的界面跳转等UI功能。\n\n \n\n3.谭：软件功能开发与实现\n\n进行核心功能的研发：电脑音频通道的识别与播放通道的选取；\n\n...\n\n \n\n其余开发内容：\n\nl 安全管理：需要输入密码才能打开。\n\nl 窗口化，可缩放调节。\n\nl 始终保持窗口在前。\n\nl 优化：稳定，能保证几个小时的连续使用；占用运行内存少，不吃性能。\n\n \n\nXjz\n\n根据效果图和需求给出预设的声音需求；（用于对接王昱博）\n\n根据需求制作有关音频。\n\n \n\nWyb\n\n与xjz同步。设计制作UI界面，打通系统，能debug。\n\n \n\nTzy\n\n前期可以自己用工程研发，等外币做好了直接copy。\n\n \n\n \n\n第二步：后续开发方向——随机化音频\n\n长达几个小时的直播，如果一直循环播放某一段音频，难免还是会产生疲劳。能否根据设计出来的音频进行随机化处理，并且让主播也能进行调节？（暂定）\n\n##### 四、**出售方案**\n\n","source":"_posts/直播音频设计方案.md","raw":"---\ntitle: 直播音频元素的游戏化影视化\n---\n\n\n## **直播音频设计方案**\n\n撰写人：段恺乐\n\n\n\n##### 一、**项目目标**\n\n###### 1. **背景调查**\n\n目前直播类型：**带货**、**娱乐**、**游戏**、**知识付费**等种类。其中又包括怀旧、氛围、自然、科幻、幻想等极具**风格化**的直播方向或者说风格、类型。\n\n目前的直播音频概括：**以人声为主，音乐为辅**。无论是什么类型的直播，（除了弹幕游戏，催眠类等少部分直播而言），都是人声和音乐相辅相成，构成整体的直播声音景观，有时候会加以“罐头笑声”等音效来活跃气氛。\n\n在这样的声音景观中，**“环境音”**这个被用于烘托氛围，丰富听觉的元素被完全抛弃，因为，在大多数直播环境中，实际的“环境音”大多都是噪音，因为有很多不可控因素以及工作人员等噪音。因此，这使得人们必须舍弃环境音。\n\n###### 2. **方案提出**\n\n在现在这个各行各业逐渐融合，不断发展的大背景下，借助游戏设计中的技术以及理念，我们完全可以在直播中将遗失的“环境音”唤回。\n\n因此，我的想法是：通过对直播场景进行声音设计，并且通过自主设计的适用于直播的声音播放软件，让纯净、好听的环境音能够与人声和音乐和谐的存在于直播之中，给观众带来更好的声音体验。\n\n###### 3. **目标群体**\n\n**风格化的直播风格或者直播场景。**\n\n例如，在XR直播中，当主播们被置身于一个个科幻、中世纪、神话等充满想象力场景中时，如果只有音乐作为背景音的话，这也太单薄了。当我们在游戏中置身一个个奇异怪奇的场景中时，游戏的声音设计师们，通过声音设计能为我们提供许多极具风格化的声音体验，让我们仿佛置身于游戏场景之中。\n\n又或者，当主播们在乡村户外，或者江南古镇的地方进行直播带货时，声音只有音乐和人声实在是太让人失望了。乡村的风声，蝉鸣，风吹树叶的声音，鸡鸣狗叫等元素能给观众带来更强的沉浸感，观看体验能获得明显的提升。或者古镇的行人声音，溪流潺潺流过...让观众们仿佛置身于那个悠扬惬意的江南小巷之中。\n\n因此，在这些极具风格化的直播场景搭建之中，为他们提供音频的设计能明显**提升观众的沉浸感**，让直播内容更加吸引人。\n\n##### 二、**落地步骤**\n\n项目具体落地的步骤我将分为以下三个阶段。\n\n###### 1. **工程开发**\n\n**首先**，先找一个合适的目标主播进行案例设计（XR中世纪教堂场景）。针对同一个场景进行不同风格的声音景观设计：紧张的，神圣的，平静的...\n\n**其次**，开发出相应的软件，通过Wwise与Unity平台进行开发。\n\n**最后**，进行直播稳定性，使用体验等功能的优化测试。\n\n###### 2. **案例制作**\n\n在Demo软件成功开发之后，在今后的直播项目搭建中，寻找合适的、优质的目标主播进行无偿的声音景观设计，将他们作为前期的优秀案例。\n\n在案例的制作当中，**注意项目留存**，关注前后效果比，观众反响，具体直播数据等，通过这些具体的数据来验证我们项目的优势。\n\n###### 3. **包装推广**\n\n当积累了足够的优秀案例之后，并且对业务内容熟悉之后，进行项目包装，再进行推广，作为我们音频组的一个固定项目对外开放。\n\n##### 三、**工程设计**\n\n第一步：Demo制作\n\n线性制作流程。我制作好大致的框架，将模板发送给王。\n\n制作过程中，一定要考虑到优化和轻量化的问题！\n\n \n\n1.项：风格化音频制作\n\n根据案例的需求制作环境声分轨。\n\n \n\n2.王：UI界面设计与开发\n\n根据功能需求，合理设计按钮按键摆放，并且实现基础的界面跳转等UI功能。\n\n \n\n3.谭：软件功能开发与实现\n\n进行核心功能的研发：电脑音频通道的识别与播放通道的选取；\n\n...\n\n \n\n其余开发内容：\n\nl 安全管理：需要输入密码才能打开。\n\nl 窗口化，可缩放调节。\n\nl 始终保持窗口在前。\n\nl 优化：稳定，能保证几个小时的连续使用；占用运行内存少，不吃性能。\n\n \n\nXjz\n\n根据效果图和需求给出预设的声音需求；（用于对接王昱博）\n\n根据需求制作有关音频。\n\n \n\nWyb\n\n与xjz同步。设计制作UI界面，打通系统，能debug。\n\n \n\nTzy\n\n前期可以自己用工程研发，等外币做好了直接copy。\n\n \n\n \n\n第二步：后续开发方向——随机化音频\n\n长达几个小时的直播，如果一直循环播放某一段音频，难免还是会产生疲劳。能否根据设计出来的音频进行随机化处理，并且让主播也能进行调节？（暂定）\n\n##### 四、**出售方案**\n\n","slug":"直播音频设计方案","published":1,"date":"2025-04-13T10:39:03.432Z","updated":"2025-04-13T10:42:19.132Z","comments":1,"layout":"post","photos":[],"_id":"cm9h6j6xw0006sspy0o9jf1la","content":"<div class=\".article-gallery\"><h2 id=\"直播音频设计方案\"><a href=\"#直播音频设计方案\" class=\"headerlink\" title=\"直播音频设计方案\"></a><strong>直播音频设计方案</strong></h2><p>撰写人：段恺乐</p>\n<h5 id=\"一、项目目标\"><a href=\"#一、项目目标\" class=\"headerlink\" title=\"一、项目目标\"></a>一、<strong>项目目标</strong></h5><h6 id=\"1-背景调查\"><a href=\"#1-背景调查\" class=\"headerlink\" title=\"1. 背景调查\"></a>1. <strong>背景调查</strong></h6><p>目前直播类型：<strong>带货</strong>、<strong>娱乐</strong>、<strong>游戏</strong>、<strong>知识付费</strong>等种类。其中又包括怀旧、氛围、自然、科幻、幻想等极具<strong>风格化</strong>的直播方向或者说风格、类型。</p>\n<p>目前的直播音频概括：<strong>以人声为主，音乐为辅</strong>。无论是什么类型的直播，（除了弹幕游戏，催眠类等少部分直播而言），都是人声和音乐相辅相成，构成整体的直播声音景观，有时候会加以“罐头笑声”等音效来活跃气氛。</p>\n<p>在这样的声音景观中，<strong>“环境音”</strong>这个被用于烘托氛围，丰富听觉的元素被完全抛弃，因为，在大多数直播环境中，实际的“环境音”大多都是噪音，因为有很多不可控因素以及工作人员等噪音。因此，这使得人们必须舍弃环境音。</p>\n<h6 id=\"2-方案提出\"><a href=\"#2-方案提出\" class=\"headerlink\" title=\"2. 方案提出\"></a>2. <strong>方案提出</strong></h6><p>在现在这个各行各业逐渐融合，不断发展的大背景下，借助游戏设计中的技术以及理念，我们完全可以在直播中将遗失的“环境音”唤回。</p>\n<p>因此，我的想法是：通过对直播场景进行声音设计，并且通过自主设计的适用于直播的声音播放软件，让纯净、好听的环境音能够与人声和音乐和谐的存在于直播之中，给观众带来更好的声音体验。</p>\n<h6 id=\"3-目标群体\"><a href=\"#3-目标群体\" class=\"headerlink\" title=\"3. 目标群体\"></a>3. <strong>目标群体</strong></h6><p><strong>风格化的直播风格或者直播场景。</strong></p>\n<p>例如，在XR直播中，当主播们被置身于一个个科幻、中世纪、神话等充满想象力场景中时，如果只有音乐作为背景音的话，这也太单薄了。当我们在游戏中置身一个个奇异怪奇的场景中时，游戏的声音设计师们，通过声音设计能为我们提供许多极具风格化的声音体验，让我们仿佛置身于游戏场景之中。</p>\n<p>又或者，当主播们在乡村户外，或者江南古镇的地方进行直播带货时，声音只有音乐和人声实在是太让人失望了。乡村的风声，蝉鸣，风吹树叶的声音，鸡鸣狗叫等元素能给观众带来更强的沉浸感，观看体验能获得明显的提升。或者古镇的行人声音，溪流潺潺流过…让观众们仿佛置身于那个悠扬惬意的江南小巷之中。</p>\n<p>因此，在这些极具风格化的直播场景搭建之中，为他们提供音频的设计能明显<strong>提升观众的沉浸感</strong>，让直播内容更加吸引人。</p>\n<h5 id=\"二、落地步骤\"><a href=\"#二、落地步骤\" class=\"headerlink\" title=\"二、落地步骤\"></a>二、<strong>落地步骤</strong></h5><p>项目具体落地的步骤我将分为以下三个阶段。</p>\n<h6 id=\"1-工程开发\"><a href=\"#1-工程开发\" class=\"headerlink\" title=\"1. 工程开发\"></a>1. <strong>工程开发</strong></h6><p><strong>首先</strong>，先找一个合适的目标主播进行案例设计（XR中世纪教堂场景）。针对同一个场景进行不同风格的声音景观设计：紧张的，神圣的，平静的…</p>\n<p><strong>其次</strong>，开发出相应的软件，通过Wwise与Unity平台进行开发。</p>\n<p><strong>最后</strong>，进行直播稳定性，使用体验等功能的优化测试。</p>\n<h6 id=\"2-案例制作\"><a href=\"#2-案例制作\" class=\"headerlink\" title=\"2. 案例制作\"></a>2. <strong>案例制作</strong></h6><p>在Demo软件成功开发之后，在今后的直播项目搭建中，寻找合适的、优质的目标主播进行无偿的声音景观设计，将他们作为前期的优秀案例。</p>\n<p>在案例的制作当中，<strong>注意项目留存</strong>，关注前后效果比，观众反响，具体直播数据等，通过这些具体的数据来验证我们项目的优势。</p>\n<h6 id=\"3-包装推广\"><a href=\"#3-包装推广\" class=\"headerlink\" title=\"3. 包装推广\"></a>3. <strong>包装推广</strong></h6><p>当积累了足够的优秀案例之后，并且对业务内容熟悉之后，进行项目包装，再进行推广，作为我们音频组的一个固定项目对外开放。</p>\n<h5 id=\"三、工程设计\"><a href=\"#三、工程设计\" class=\"headerlink\" title=\"三、工程设计\"></a>三、<strong>工程设计</strong></h5><p>第一步：Demo制作</p>\n<p>线性制作流程。我制作好大致的框架，将模板发送给王。</p>\n<p>制作过程中，一定要考虑到优化和轻量化的问题！</p>\n<p>1.项：风格化音频制作</p>\n<p>根据案例的需求制作环境声分轨。</p>\n<p>2.王：UI界面设计与开发</p>\n<p>根据功能需求，合理设计按钮按键摆放，并且实现基础的界面跳转等UI功能。</p>\n<p>3.谭：软件功能开发与实现</p>\n<p>进行核心功能的研发：电脑音频通道的识别与播放通道的选取；</p>\n<p>…</p>\n<p>其余开发内容：</p>\n<p>l 安全管理：需要输入密码才能打开。</p>\n<p>l 窗口化，可缩放调节。</p>\n<p>l 始终保持窗口在前。</p>\n<p>l 优化：稳定，能保证几个小时的连续使用；占用运行内存少，不吃性能。</p>\n<p>Xjz</p>\n<p>根据效果图和需求给出预设的声音需求；（用于对接王昱博）</p>\n<p>根据需求制作有关音频。</p>\n<p>Wyb</p>\n<p>与xjz同步。设计制作UI界面，打通系统，能debug。</p>\n<p>Tzy</p>\n<p>前期可以自己用工程研发，等外币做好了直接copy。</p>\n<p>第二步：后续开发方向——随机化音频</p>\n<p>长达几个小时的直播，如果一直循环播放某一段音频，难免还是会产生疲劳。能否根据设计出来的音频进行随机化处理，并且让主播也能进行调节？（暂定）</p>\n<h5 id=\"四、出售方案\"><a href=\"#四、出售方案\" class=\"headerlink\" title=\"四、出售方案\"></a>四、<strong>出售方案</strong></h5></div>","excerpt":"","more":"<div class=\".article-gallery\"><h2 id=\"直播音频设计方案\"><a href=\"#直播音频设计方案\" class=\"headerlink\" title=\"直播音频设计方案\"></a><strong>直播音频设计方案</strong></h2><p>撰写人：段恺乐</p>\n<h5 id=\"一、项目目标\"><a href=\"#一、项目目标\" class=\"headerlink\" title=\"一、项目目标\"></a>一、<strong>项目目标</strong></h5><h6 id=\"1-背景调查\"><a href=\"#1-背景调查\" class=\"headerlink\" title=\"1. 背景调查\"></a>1. <strong>背景调查</strong></h6><p>目前直播类型：<strong>带货</strong>、<strong>娱乐</strong>、<strong>游戏</strong>、<strong>知识付费</strong>等种类。其中又包括怀旧、氛围、自然、科幻、幻想等极具<strong>风格化</strong>的直播方向或者说风格、类型。</p>\n<p>目前的直播音频概括：<strong>以人声为主，音乐为辅</strong>。无论是什么类型的直播，（除了弹幕游戏，催眠类等少部分直播而言），都是人声和音乐相辅相成，构成整体的直播声音景观，有时候会加以“罐头笑声”等音效来活跃气氛。</p>\n<p>在这样的声音景观中，<strong>“环境音”</strong>这个被用于烘托氛围，丰富听觉的元素被完全抛弃，因为，在大多数直播环境中，实际的“环境音”大多都是噪音，因为有很多不可控因素以及工作人员等噪音。因此，这使得人们必须舍弃环境音。</p>\n<h6 id=\"2-方案提出\"><a href=\"#2-方案提出\" class=\"headerlink\" title=\"2. 方案提出\"></a>2. <strong>方案提出</strong></h6><p>在现在这个各行各业逐渐融合，不断发展的大背景下，借助游戏设计中的技术以及理念，我们完全可以在直播中将遗失的“环境音”唤回。</p>\n<p>因此，我的想法是：通过对直播场景进行声音设计，并且通过自主设计的适用于直播的声音播放软件，让纯净、好听的环境音能够与人声和音乐和谐的存在于直播之中，给观众带来更好的声音体验。</p>\n<h6 id=\"3-目标群体\"><a href=\"#3-目标群体\" class=\"headerlink\" title=\"3. 目标群体\"></a>3. <strong>目标群体</strong></h6><p><strong>风格化的直播风格或者直播场景。</strong></p>\n<p>例如，在XR直播中，当主播们被置身于一个个科幻、中世纪、神话等充满想象力场景中时，如果只有音乐作为背景音的话，这也太单薄了。当我们在游戏中置身一个个奇异怪奇的场景中时，游戏的声音设计师们，通过声音设计能为我们提供许多极具风格化的声音体验，让我们仿佛置身于游戏场景之中。</p>\n<p>又或者，当主播们在乡村户外，或者江南古镇的地方进行直播带货时，声音只有音乐和人声实在是太让人失望了。乡村的风声，蝉鸣，风吹树叶的声音，鸡鸣狗叫等元素能给观众带来更强的沉浸感，观看体验能获得明显的提升。或者古镇的行人声音，溪流潺潺流过…让观众们仿佛置身于那个悠扬惬意的江南小巷之中。</p>\n<p>因此，在这些极具风格化的直播场景搭建之中，为他们提供音频的设计能明显<strong>提升观众的沉浸感</strong>，让直播内容更加吸引人。</p>\n<h5 id=\"二、落地步骤\"><a href=\"#二、落地步骤\" class=\"headerlink\" title=\"二、落地步骤\"></a>二、<strong>落地步骤</strong></h5><p>项目具体落地的步骤我将分为以下三个阶段。</p>\n<h6 id=\"1-工程开发\"><a href=\"#1-工程开发\" class=\"headerlink\" title=\"1. 工程开发\"></a>1. <strong>工程开发</strong></h6><p><strong>首先</strong>，先找一个合适的目标主播进行案例设计（XR中世纪教堂场景）。针对同一个场景进行不同风格的声音景观设计：紧张的，神圣的，平静的…</p>\n<p><strong>其次</strong>，开发出相应的软件，通过Wwise与Unity平台进行开发。</p>\n<p><strong>最后</strong>，进行直播稳定性，使用体验等功能的优化测试。</p>\n<h6 id=\"2-案例制作\"><a href=\"#2-案例制作\" class=\"headerlink\" title=\"2. 案例制作\"></a>2. <strong>案例制作</strong></h6><p>在Demo软件成功开发之后，在今后的直播项目搭建中，寻找合适的、优质的目标主播进行无偿的声音景观设计，将他们作为前期的优秀案例。</p>\n<p>在案例的制作当中，<strong>注意项目留存</strong>，关注前后效果比，观众反响，具体直播数据等，通过这些具体的数据来验证我们项目的优势。</p>\n<h6 id=\"3-包装推广\"><a href=\"#3-包装推广\" class=\"headerlink\" title=\"3. 包装推广\"></a>3. <strong>包装推广</strong></h6><p>当积累了足够的优秀案例之后，并且对业务内容熟悉之后，进行项目包装，再进行推广，作为我们音频组的一个固定项目对外开放。</p>\n<h5 id=\"三、工程设计\"><a href=\"#三、工程设计\" class=\"headerlink\" title=\"三、工程设计\"></a>三、<strong>工程设计</strong></h5><p>第一步：Demo制作</p>\n<p>线性制作流程。我制作好大致的框架，将模板发送给王。</p>\n<p>制作过程中，一定要考虑到优化和轻量化的问题！</p>\n<p>1.项：风格化音频制作</p>\n<p>根据案例的需求制作环境声分轨。</p>\n<p>2.王：UI界面设计与开发</p>\n<p>根据功能需求，合理设计按钮按键摆放，并且实现基础的界面跳转等UI功能。</p>\n<p>3.谭：软件功能开发与实现</p>\n<p>进行核心功能的研发：电脑音频通道的识别与播放通道的选取；</p>\n<p>…</p>\n<p>其余开发内容：</p>\n<p>l 安全管理：需要输入密码才能打开。</p>\n<p>l 窗口化，可缩放调节。</p>\n<p>l 始终保持窗口在前。</p>\n<p>l 优化：稳定，能保证几个小时的连续使用；占用运行内存少，不吃性能。</p>\n<p>Xjz</p>\n<p>根据效果图和需求给出预设的声音需求；（用于对接王昱博）</p>\n<p>根据需求制作有关音频。</p>\n<p>Wyb</p>\n<p>与xjz同步。设计制作UI界面，打通系统，能debug。</p>\n<p>Tzy</p>\n<p>前期可以自己用工程研发，等外币做好了直接copy。</p>\n<p>第二步：后续开发方向——随机化音频</p>\n<p>长达几个小时的直播，如果一直循环播放某一段音频，难免还是会产生疲劳。能否根据设计出来的音频进行随机化处理，并且让主播也能进行调节？（暂定）</p>\n<h5 id=\"四、出售方案\"><a href=\"#四、出售方案\" class=\"headerlink\" title=\"四、出售方案\"></a>四、<strong>出售方案</strong></h5></div>"},{"title":"音效助手软件开发归档","_content":"\n## 一、音频功能的开发\n\n核心功能的开发，利用NAudio.dll组件进行开发。\n\n### 委托\n\n```c#\ndelegate double Cal(double x,double y);\n\nstatic void Test(Cal f)\n{\n    Console.Write(\"请输入X:\");\n    double x=Convert.ToDouble(Console.ReadLine());\n    Console.write(\"请输入Y:\");\n    double y= Convert.ToDouble(Console. ReadLine());//委托方法工作,怎么工作由具体委托决定\n    double result =f(x, y);\n    Console.writeLine(\"x: {0}与Y:{1}委托方法计算结果为:{2}\"，x,y,result);\n}\n\nstatic void Main(string[] args)\n{\n\tTest(new Cal(Add));\n    Test(Add);\n}\n\nprivate void double Add(double x,double y){\n    //...\n}\n\n```\n\n将不变的进行封装，将变的隔离起来，让代码更易于维护。\n\n> ![image-20241029134923881](image/weituo)\n\n#### 使用步骤\n\n定义委托\n\n实例化委托（赋予方法）\n\n使用委托（输入参数）\n\n#### 观察者模式\n\n一种事件触发的模式。当定义某个委托之后，其他的类的方法可以订阅这个委托，然后通过这个委托，来统一触发一系列事件。\n\n```c#\nMyEvent?.Invoke(this, e); // 检查是否有任何订阅者，然后触发事件\n```\n\n\n\n> ![image-20241029141958516](image/weituo2)\n>\n> ![image-20241029142154108](image/weituo3)\n\n#### 委托类型/委托事件\n\n定义：\n\n```c#\npublic static event OnGameOver onGameOver;\n```\n\n事件委托和常规委托相同，只是事件委托只能从自己的类中进行调用，其他脚本只能进行订阅或者取消，但是不能触发、更改。这样可以防止其他脚本执行相关操作。\n\n\n\n#### 两种预定的事件泛型\n\n无返回值：\n\n```c#\nAction<T1,T2,T3>\n```\n\n有返回值：\n\n```c#\nFunc<T1,T2,T3>\n```\n\n\n\n#### Lambda表达式\n\n```c#\n() =>{\n\n//函数\n\n}\n```\n\nlambda表达式要和委托，事件联合使用。\n\n例如：\n\n```c#\nFunc<int , int> func = x => x+1;\n\nFunc<int , int> func;\npublic int fx(int x){\n    return x+1;\n}\n\n```\n\n再例如：\n\n```c#\nAction<string> action =msg =>Console.WriteLine(msg);\n\nAction<string> action string msg =>Console.WriteLine(msg);\n```\n\n#### 事件绑定\n\n```c#\nbutton.Click += (s, e) => Button_Click(button);\n```\n\n```c#\npublic event EventHandler Click{//}\n//delegate void System.EventHandler(object sender, System.EventArgs e)表示将用于处理不具有事件数据的事件的方法。\n```\n\n以下两种表述都是错误的：\n\n```c#\nbutton.Click += Button_Click;\n```\n\n```c#\nbutton.Click += Button_Click(Button button);\n```\n\n因为：\n\n`Button_Click` 方法的签名与 `EventHandler` 委托不匹配，使用 `button.Click += Button_Click;` 将会导致编译错误。\n\n`EventHandler` 的签名是：\n\n```\ncsharp\n\n\n复制代码\nvoid EventHandler(object sender, EventArgs e);\n```\n\n假设 `Button_Click` 方法的签名是这样的：\n\n```\ncsharp复制代码private void Button_Click(Button button)\n{\n    // 处理逻辑\n}\n```\n\n那么在这种情况下，`Button_Click` 的签名不匹配 `EventHandler` 委托，因此您不能直接使用方法组来订阅事件。编译器会报错，因为它找不到与 `EventHandler` 委托匹配的重载。\n\n### Hook\n\n略...\n\n### 音频设备识别与获取和切换\n\n通过类AudioDeviceManager来实现音频设备的识别。\n\n```C#\nusing System.Collections.Generic;\nusing NAudio.Wave;\n\npublic class AudioDeviceManager\n{\n    public List<WaveOutCapabilities> GetAudioDevices()\n    {\n        List<WaveOutCapabilities> devices = new List<WaveOutCapabilities>();\n        for (int i = 0; i < WaveOut.DeviceCount; i++)\n        {\n            devices.Add(WaveOut.GetCapabilities(i));\n        }\n        return devices;\n    }\n}\n\n```\n\n#### public List<WaveOutCapabilities> GetAudioDevices()方法\n\n通常用于获取系统中可用的音频设备列表，并返回一个包含 `WaveOutCapabilities` 对象的列表。每个 `WaveOutCapabilities` 对象描述了一个音频输出设备的特性，比如：\n\n- 设备名称\n- 支持的声道数\n- 采样率\n- 支持的位深度\n\n#### `WaveOut.DeviceCount` \n\n是一个静态属性，用于获取系统中可用的音频输出设备的数量。这个属性返回一个**整数**，表示当前可以用于音频播放的设备总数。可以用它来遍历每个设备，进而获取设备的详细信息。\n\n#### WaveOut.GetCapabilities(i)\n\n是一个静态方法，用于获取指定索引 `i` 的音频输出设备的能力（`WaveOutCapabilities`）。该方法返回一个 `WaveOutCapabilities` 对象，其中包含有关设备的详细信息，例如：\n\n- **设备名称**：音频设备的描述性名称。\n- **支持的声道数**：设备支持的声道（单声道或立体声）数量。\n- **最大采样率**：设备支持的最高采样率。\n- **最大位深度**：设备支持的最高位深度（如16位、24位等）。\n\n#### 实现步骤\n\n```c#\nprivate void LoadAudioDevices()\n{\n    var devices = audioDeviceManager.GetAudioDevices();\n    foreach (var device in devices)\n    {\n        comboBoxDevices.Items.Add(device.ProductName);\n    }\n    if (comboBoxDevices.Items.Count > 0)\n    {\n        comboBoxDevices.SelectedIndex = 0;\n    }\n}\n```\n\n`LoadAudioDevices` 方法的功能是加载系统中的音频设备并将它们添加到下拉框（`comboBoxDevices`）中。具体步骤如下：\n\n1. **获取音频设备列表**：调用 `audioDeviceManager.GetAudioDevices()` 方法，获取可用的音频设备列表。\n2. **添加设备到下拉框**：使用 `foreach` 循环遍历设备列表，将每个设备的名称（`device.ProductName`）添加到 `comboBoxDevices.Items` 中。\n3. **选择第一个设备**：如果下拉框中有设备项（`Items.Count` 大于 0），将 `comboBoxDevices.SelectedIndex` 设置为 0，默认选择第一个设备。\n4. 注意事项：\n   - 确保 `audioDeviceManager` 已正确初始化。\n   - 如果需要处理没有可用设备的情况，可以考虑在下拉框中显示一条提示信息。\n\n#### 音频设备的切换\n\n```c#\nprivate void comboBoxDevices_SelectedIndexChanged(object sender, EventArgs e)\n{\n    if (waveOut != null)\n    {\n        waveOut.Stop();\n        waveOut.Dispose();\n        waveOut = null;\n    }\n\n    if (audioFileReader != null)\n    {\n        audioFileReader.Dispose();\n        audioFileReader = null;\n    }\n\n    if (!string.IsNullOrEmpty(currentFilePath))\n    {\n        waveOut = new WaveOutEvent\n        {\n            DeviceNumber = comboBoxDevices.SelectedIndex,\n            Volume = volumeSlider.Volume\n        };\n        audioFileReader = new AudioFileReader(currentFilePath);\n        waveOut.Init(audioFileReader);\n\n        if (isPlaying)\n        {\n            waveOut.Play();\n        }\n    }\n}\n```\n\n这个 `comboBoxDevices_SelectedIndexChanged` 方法的功能是处理用户在设备选择下拉框（`comboBoxDevices`）中更改选定设备时的逻辑。具体步骤如下：\n\n1. **停止并释放现有的 `waveOut`**：如果 `waveOut` 不为空，先停止播放并释放其资源。\n2. **释放音频文件读取器**：如果 `audioFileReader` 不为空，释放其资源。\n3. **检查当前文件路径**：如果 `currentFilePath` 不为空，则进行下一步：\n4. **创建新的 `WaveOutEvent` 实例**：\n   - 设置 `DeviceNumber` 为所选设备的索引。\n   - 将音量设置为滑块（`volumeSlider.Volume`）的值。\n5. **初始化 `AudioFileReader`**：使用当前文件路径创建新的 `AudioFileReader` 实例，并用其初始化 `waveOut`。\n6. **播放音频**：如果当前状态为播放（`isPlaying` 为真），则调用 `waveOut.Play()` 开始播放。\n\n注意事项：\n\n- 确保在选择新设备时，正确管理资源，防止内存泄漏。\n- 如果 `currentFilePath` 可能为空，考虑在此处添加错误处理逻辑。\n\n\n\n\n\n### 音频管理系统\n\n#### 音频文件播放的实现步骤\n\n**初始化**：在构造函数或初始化方法中实例化 `waveOut`。\n\n**加载音频数据**：将音频数据加载到 `waveOut` 中。通常你会使用 `AudioFileReader` 来读取音频文件。\n\n```c#\nvar audioFile = new AudioFileReader(\"path/to/audio/file.mp3\");\nwaveOut.Init(audioFile);\n```\n\n**播放音频；**\n\n**控制音频**；\n\n**释放资源**：在不再需要时，确保调用 `Dispose()` 方法释放（waveout和audiofile）资源。\n\n\n\n#### `WaveStream` \n\n是 NAudio 中的一个基类，用于表示音频数据流，它可以用于处理各种音频格式。\n\n`WaveStream` 的常见用途：\n\n1. **加载音频文件**：可以通过继承 `WaveStream` 的类（如 `AudioFileReader`）来加载音频文件。\n2. **音频播放**：`WaveStream` 可以与 `WaveOut` 或 `WaveOutEvent` 等输出设备配合使用，以实现音频播放。\n3. **处理流数据**：可以用于处理实时音频流，比如录音或网络音频流。\n\n#### InitializeButtons()\n\n```c#\nprivate void InitializeButtons()\n{\n    foreach (var button in buttonAudioMapping.Keys)\n    {\n        if (button != ButtonPlay)\n        {\n            button.Click += (s, e) => Button_Click(button);\n            button.MouseUp += Button_MouseUp;\n        }\n    }\n```\n\n**点击事件**：\n\n```\nbutton.Click += (s, e) => Button_Click(button);\n```\n\n- 这行代码为 `button` 的 `Click` 事件添加了一个匿名方法（lambda 表达式）。当按钮被点击时，这个匿名方法会被调用。\n- 在这个方法中，调用了 `Button_Click(button)`，将当前按钮作为参数传递。这样，你可以在 `Button_Click` 方法中处理点击事件，使用特定于该按钮的逻辑。\n\n> Lambda语法：\n>\n> (参数列表)=>\n>\n> {\n>\n> ​\t//函数体\n>\n> }\n>\n> ​\t//\"=>\"意思为goes to。\n\n\n\n\n\n#### 音频播放管理系统\n\n```c#\nprivate byte[] ReadStreamToByteArray(UnmanagedMemoryStream stream)\n{\n    using (var memoryStream = new MemoryStream())\n    {\n        stream.CopyTo(memoryStream);\n        return memoryStream.ToArray();\n    }\n}\n\nprivate void InitializeButtonAudioMapping()\n{\n    buttonAudioMapping = new Dictionary<Button, MemoryStream>\n    {\n        //笑声\n        { ButtonPlayPause, new MemoryStream(ReadStreamToByteArray(Properties.Resources.SFX_001)) },// 继续为其他按钮设置音频文件路径\n    };\n}\nprivate void InitializeButtons()\n{\n    foreach (var button in buttonAudioMapping.Keys)\n    {\n        if (button != ButtonPlay)\n        {\n            button.Click += (s, e) => Button_Click(button);\n            button.MouseUp += Button_MouseUp;\n        }\n    }\n}\n\nprivate void Button_Click(Button button)\n{\n    HandleButtonClick(button);\n}\n\nprivate void HandleButtonClick(Button button)\n{\n    if (!buttonAudioMapping.TryGetValue(button, out MemoryStream audioStream))\n    {\n        MessageBox.Show(\"音频文件未定义\");\n        return;\n    }\n\n    if (waveStream == null || waveOut == null || isPlaying)\n    {\n        StartPlayback(audioStream);\n        ButtonPlay.BackgroundImage = Properties.Resources.pause;\n    }\n    else\n    {\n        StartPlayback(audioStream);\n        ButtonPlay.BackgroundImage = Properties.Resources.pause;\n    }\n}\n\nprivate void CleanUp()\n{\n    if (waveOut != null)\n    {\n        // 确保事件处理程序被解绑\n        waveOut.PlaybackStopped -= OnPlaybackStopped;\n        waveOut.Stop();\n        waveOut.Dispose();\n        waveOut = null;\n    }\n\n    if (audioFileReader != null)\n    {\n        audioFileReader.Dispose();\n        audioFileReader = null;\n    }\n}\n\nprivate void ButtonPlay_Click(object sender, EventArgs e)\n{\n    if (waveOut == null || waveStream == null)\n    {\n        if (buttonAudioMapping.TryGetValue(ButtonPlay, out MemoryStream audioStream))\n        {\n            StartPlayback(audioStream);\n            ButtonPlay.BackgroundImage = Properties.Resources.pause;\n        }\n    }\n    else\n    {\n        if (waveOut.PlaybackState == PlaybackState.Playing)\n        {\n            waveOut.Pause();\n            isPlaying = false;\n            ButtonPlay.BackgroundImage = Properties.Resources.play;\n        }\n        else\n        {\n            waveOut.Play();\n            isPlaying = true;\n            ButtonPlay.BackgroundImage = Properties.Resources.pause;\n        }\n    }\n}\n\nprivate void StartPlayback(MemoryStream audioStream)\n{\n    CleanUp();\n\n    waveOut = new WaveOutEvent\n    {\n        DeviceNumber = comboBoxDevices.SelectedIndex\n    };\n\n    // 重置流位置\n    audioStream.Seek(0, SeekOrigin.Begin);\n\n    // 使用 WaveFileReader\n    waveStream = new WaveFileReader(audioStream);\n    waveOut.Init(waveStream);\n    waveOut.PlaybackStopped += OnPlaybackStopped;\n\n    waveOut.Play();\n    isPlaying = true;\n\n    // 确保初始化时更新进度条\n    trackBarProgress.Maximum = (int)waveStream.TotalTime.TotalSeconds;\n}\n\nprivate void ChangeAudioFile(Button button)\n{\n    // 设置只允许选择 .wav 文件\n    openFileDialog.Filter = \"WAV files (*.wav)|*.wav\";\n\n    if (openFileDialog.ShowDialog() == DialogResult.OK)\n    {\n        string newFilePath = openFileDialog.FileName;\n\n        // 检查文件扩展名是否为 .wav（如果需要进一步验证）\n        if (System.IO.Path.GetExtension(newFilePath).ToLower() != \".wav\")\n        {\n            MessageBox.Show(\"只能选择 .wav 格式的文件！\", \"错误\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n            return;\n        }\n\n        button.Text = System.IO.Path.GetFileNameWithoutExtension(newFilePath);\n\n        // 加载音频文件为 MemoryStream\n        byte[] audioBytes = System.IO.File.ReadAllBytes(newFilePath);\n        System.IO.MemoryStream audioStream = new System.IO.MemoryStream(audioBytes);\n\n        // 更新 buttonAudioMapping 字典\n        if (buttonAudioMapping.ContainsKey(button))\n        {\n            buttonAudioMapping[button].Dispose(); // 释放旧的 MemoryStream\n            buttonAudioMapping[button] = audioStream;\n        }\n        else\n        {\n            buttonAudioMapping.Add(button, audioStream);\n        }\n\n        // 更新 appSettings 中的音频文件路径\n        appSettings.ButtonAudioFilePaths[button.Name] = newFilePath;\n\n        // 自动保存设置\n        settingsManager.SaveSettings(appSettings);\n    }\n\n}\nprivate void OnPlaybackStopped(object sender, StoppedEventArgs e)\n{\n    isPlaying = false;\n\n    // 检查是否正在播放其他音频\n    if (waveOut == null || waveOut.PlaybackState != PlaybackState.Playing)\n    {\n        ButtonPlay.BackgroundImage = Properties.Resources.play; // 播放图片\n    }\n}\n```\n\n##### 1.**音频文件加载和映射**\n\n- `ReadStreamToByteArray` 方法将 `UnmanagedMemoryStream` 读取到字节数组。\n- `InitializeButtonAudioMapping` 方法将音频文件与按钮关联，使用 `MemoryStream` 存储每个音频文件的内容。\n- 采用这样的方式储存音频数据原因：\n\n​\t**内存管理**：通过将音频流读取到 `MemoryStream` 中，可以更灵活地管理内存。`MemoryStream` 允许在内存中对音频数据进行快速读写操作，而不需要频繁地访问磁盘文件。\n\n​\t**易于处理**：在播放音频时，将其存储在内存中可以加快访问速度，因为它避免了每次播放时都去读取文件系统的延迟。这对于用户体验非常重要。\n\n​\t**数据封装**：使用 `ReadStreamToByteArray` 方法将音频文件的流转换为字节数组，使得音频文件可以以更加统一的方式存储和使用。这使得将多个按钮与不同的音频文件关联变得简单。\n\n​\t**资源整合**：`Properties.Resources` 可以将资源嵌入到程序中，方便管理和访问。将其转换为 `MemoryStream` 使得你可以在运行时直接从嵌入的资源读取数据。\n\n​\t**避免硬编码路径**：直接使用嵌入的资源而不是依赖于文件路径，减少了在文件管理上的复杂性，同时也提高了程序的可移植性。\n\n`UnmanagedMemoryStream` 是 C# 中的一个类，通常用于处理非托管内存中的数据。与常规的 `MemoryStream` 不同，`UnmanagedMemoryStream` 主要用于读取和写入存储在非托管内存中的字节数据。这种类型的流适合处理那些不由 .NET 垃圾回收器管理的内存，例如：\n\n1. **与 P/Invoke 交互**：当你需要调用本地 API（如 Windows API）时，通常需要在非托管内存中操作数据。\n2. **处理大数据**：在处理大文件或数据块时，可以使用非托管内存来提高性能，因为它可以减少内存分配的开销。\n3. **性能优化**：由于它直接在非托管内存中操作，可能会在某些情况下提供更好的性能，特别是在与硬件接口或其他语言的代码交互时。\n\n`UnmanagedMemoryStream` 通常会在以下情况下使用：\n\n- 从操作系统或其他低级 API 中获取数据，并在 C# 中处理。\n- 在 C# 与 C/C++ 等语言的互操作中，用于传递指向非托管内存的指针。\n\n例子\n\n一个简单的例子是，你可能会在调用某个非托管函数之前，先在非托管内存中分配空间，然后使用 `UnmanagedMemoryStream` 来读取或写入数据。\n\n总之，`UnmanagedMemoryStream` 是一个强大的工具，适用于需要直接操作非托管内存的场景。\n\n> **非托管内存**是指不由 .NET 垃圾回收器（GC）管理的内存。这种内存通常由应用程序直接分配和释放，主要用于与底层系统或其他语言（如 C/C++）交互。以下是一些关于非托管内存的关键点：\n>\n> 1. **手动管理**：在使用非托管内存时，开发者需要手动分配和释放内存，使用诸如 `Marshal.AllocHGlobal` 和 `Marshal.FreeHGlobal` 等方法。\n> 2. **性能优化**：非托管内存可以用于处理性能要求较高的场景，比如大型数据结构或高频率的数据交互，因为它可以减少内存分配和回收的开销。\n> 3. **与系统 API 交互**：许多系统级 API 和库（尤其是 C/C++ 编写的）需要使用非托管内存，因为它们不理解 .NET 的内存管理模型。\n> 4. **数据共享**：非托管内存可以用于在不同语言或模块之间共享数据，例如在 C# 和 C/C++ 代码之间传递复杂数据结构。\n> 5. **可能的内存泄漏**：由于需要手动管理，开发者必须小心以避免内存泄漏或未定义行为，这些都是在非托管内存中比较常见的问题。\n>\n> 在使用非托管内存时，确保了解其管理方式是非常重要的，以确保程序的稳定性和性能。\n\n\n\n> **`out` 关键字**：\n>\n> - 表示这是一个输出参数。在方法内部，必须对其进行赋值。\n> - 调用方法时，不需要在外部声明该变量，只需声明它为 `out` 类型即可。\n>\n> **用途**：\n>\n> - `out` 参数通常用于从方法中返回多个值。在 C# 中，一个方法只能返回一个值，但可以通过 `out` 参数返回额外的信息或结果。\n> - 在你的例子中，`audioStream` 是一个 `MemoryStream` 对象，可能用于返回音频数据的流。\n\n\n\n**数据流的转换**\n\n```c#\nprivate byte[] ReadStreamToByteArray(UnmanagedMemoryStream stream)\n{\n    using (var memoryStream = new MemoryStream())\n    {\n        stream.CopyTo(memoryStream);\n        return memoryStream.ToArray();\n    }\n}\n```\n\n这段代码的作用是将一个 `UnmanagedMemoryStream` 对象的内容复制到一个新的 `MemoryStream` 中，并返回其字节数组。以下是逐步解析：\n\n1. **`using` 语句**：确保 `memoryStream` 在使用完后自动释放资源，即使在发生异常时也能保证资源得到释放。\n2. **`stream.CopyTo(memoryStream)`**：将 `UnmanagedMemoryStream` 的内容复制到 `memoryStream` 中。`CopyTo` 方法会从源流读取数据并写入到目标流。\n3. **`memoryStream.ToArray()`**：将 `memoryStream` 中的内容转换为字节数组并返回。\n\n> `using` 语句在 C# 中用于确保对象在使用完后能够自动释放其占用的资源。主要有以下几个作用：\n>\n> 1. **自动释放资源**：`using` 语句会在代码块结束时自动调用对象的 `Dispose` 方法，释放资源。这在处理需要显式释放资源的对象（如文件流、数据库连接、图形资源等）时特别重要。\n> 2. **简化代码**：通过使用 `using`，你不需要显式调用 `Dispose`，这样可以减少代码的复杂性，并提高可读性。\n> 3. **异常安全**：即使在 `using` 语句块中发生异常，`Dispose` 仍然会被调用，确保资源得到正确释放，从而避免内存泄漏。\n>\n> ### 示例\n>\n> 以下是一个简单的示例，展示了如何使用 `using` 语句：\n>\n> ```\n> csharp复制代码using (var fileStream = new FileStream(\"example.txt\", FileMode.Open))\n> {\n>     // 进行文件操作\n> } // 这里会自动调用 fileStream.Dispose()\n> ```\n>\n> 在这个例子中，`fileStream` 会在 `using` 块结束后自动关闭，无需手动调用 `fileStream.Close()` 或 `fileStream.Dispose()`。\n>\n> ### 注意事项\n>\n> - `using` 语句只能用于实现了 `IDisposable` 接口的对象。\n> - 如果对象在 `using` 块之外的地方仍然被引用，确保对象不会被重复释放。\n\nDcitionary.Keys返回的是，所有key的集合Dictionary2，值的类型和Dictionary中key的类型一致。\n\n\n\n##### 2.音频播放逻辑实现\n\nbutton_click → handle(判断能否播放) → cleanup(释放上一次播放的内存)  → startplay(开始播放)\n\n音频储存方式变化：audiostream                                                                      → wavestream(可以利用wave的play功能)\n\n**`out` 关键字**：\n\n- 表示这是一个输出参数。在<u>方法内部</u>，必须对其进行赋值。\n- 调用方法时，<u>不需要在外部声明该变量</u>，只需声明它为 `out` 类型即可。\n\n**用途**：\n\n- `out` 参数通常用于从方法中返回多个值。在 C# 中，一个方法只能返回一个值，但可以通过 `out` 参数返回额外的信息或结果。\n- 在例子中，`audioStream` 是一个 `MemoryStream` 对象，可能用于返回音频数据的流。\n\n在这个例子中，`TryGetValue` 方法尝试从文件中读取音频流，并通过 `out` 参数返回 `MemoryStream` 对象。如果成功，调用者可以使用这个流；如果失败，流会被设置为 `null`。\n\n> ### `WaveFileReader` 与 `AudioFileReader` 的区别\n>\n> 1. **`WaveFileReader`**：\n>    - 专门用于读取 `.wav` 文件格式。\n>    - 提供对 WAV 文件的解析，包括文件头、采样率、通道数等信息。\n>    - 适用于需要处理纯 WAV 数据的场景。\n> 2. **`AudioFileReader`**：\n>    - 更通用，能够处理多种音频格式（如 WAV、MP3、AAC 等）。\n>    - 内部会根据文件格式自动解码并转换为 PCM 数据。\n>    - 适合需要处理不同音频格式的场景。\n>\n> ### 使用场景\n>\n> - 如果你只处理 WAV 文件，使用 `WaveFileReader` 可以更高效，因为它针对这种格式进行了优化。\n> - 如果你的应用需要支持多种音频格式，使用 `AudioFileReader` 会更方便，因为它可以自动处理多种类型的音频数据。\n\n\n\n##### 3.播放文件选择\n\n```c#\nprivate void ChangeAudioFile(Button button)\n{\n    // 设置只允许选择 .wav 文件\n    openFileDialog.Filter = \"WAV files (*.wav)|*.wav\";\n\n    if (openFileDialog.ShowDialog() == DialogResult.OK)\n    {\n        string newFilePath = openFileDialog.FileName;\n\n        // 检查文件扩展名是否为 .wav（如果需要进一步验证）\n        if (System.IO.Path.GetExtension(newFilePath).ToLower() != \".wav\")\n        {\n            MessageBox.Show(\"只能选择 .wav 格式的文件！\", \"错误\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n            return;\n        }\n\n        button.Text = System.IO.Path.GetFileNameWithoutExtension(newFilePath);\n\n        // 加载音频文件为 MemoryStream\n        byte[] audioBytes = System.IO.File.ReadAllBytes(newFilePath);\n        System.IO.MemoryStream audioStream = new System.IO.MemoryStream(audioBytes);\n\n        // 更新 buttonAudioMapping 字典\n        if (buttonAudioMapping.ContainsKey(button))\n        {\n            buttonAudioMapping[button].Dispose(); // 释放旧的 MemoryStream\n            buttonAudioMapping[button] = audioStream;\n        }\n        else\n        {\n            buttonAudioMapping.Add(button, audioStream);\n        }\n\n        // 更新 appSettings 中的音频文件路径\n        appSettings.ButtonAudioFilePaths[button.Name] = newFilePath;\n\n        // 自动保存设置\n        settingsManager.SaveSettings(appSettings);\n    }\n}\n```\n\n**设置文件对话框过滤器**：\n\n```c#\nopenFileDialog.Filter = \"WAV files (*.wav)|*.wav\";\n```\n\n这行代码设置文件选择对话框只允许选择 `.wav` 文件。\n\n**显示对话框并检查用户选择**：\n\n```c#\nif (openFileDialog.ShowDialog() == DialogResult.OK)\n```\n\n显示文件对话框，用户选择文件后，如果点击“确定”，则继续执行后续代码。\n\n**获取选择的文件路径**：\n\n```c#\nstring newFilePath = openFileDialog.FileName;\n```\n\n**检查文件扩展名**（可选）：\n\n```c#\nif (System.IO.Path.GetExtension(newFilePath).ToLower() != \".wav\")\n{\n    MessageBox.Show(\"只能选择 .wav 格式的文件！\", \"错误\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n    return;\n}\n```\n\n如果用户选择的文件不是 `.wav` 格式，则弹出错误提示，并退出方法。\n\n**更新按钮文本**：\n\n```c#\nbutton.Text = System.IO.Path.GetFileNameWithoutExtension(newFilePath);\n```\n\n将按钮的文本设置为文件名，不包括扩展名。\n\n**加载音频文件为 `MemoryStream`**：\n\n```c#\nbyte[] audioBytes = System.IO.File.ReadAllBytes(newFilePath);\nSystem.IO.MemoryStream audioStream = new System.IO.MemoryStream(audioBytes);\n```\n\n读取选择的音频文件的所有字节，并将其存入一个 `MemoryStream` 中，以便后续播放。\n\n**更新 `buttonAudioMapping` 字典**：\n\n```c#\nif (buttonAudioMapping.ContainsKey(button))\n{\n    buttonAudioMapping[button].Dispose(); // 释放旧的 MemoryStream\n    buttonAudioMapping[button] = audioStream;\n}\nelse\n{\n    buttonAudioMapping.Add(button, audioStream);\n}\n```\n\n检查字典中是否已有该按钮的映射。如果有，先释放旧的 `MemoryStream`，然后更新为新的流；如果没有，直接添加新的映射。\n\n**更新设置中的音频文件路径**：\n\n```c#\nappSettings.ButtonAudioFilePaths[button.Name] = newFilePath;\n```\n\n**自动保存设置**：\n\n```c#\nsettingsManager.SaveSettings(appSettings);\n```\n\n\n\n#### 音量大小\n\n...略\n\n#### 进度条\n\n1. `Timer_Tick` 方法\n\n```c#\nprivate void Timer_Tick(object sender, EventArgs e)\n{\n    if (waveStream != null && !isTrackBarDragging)\n    {\n        trackBarProgress.Maximum = (int)waveStream.TotalTime.TotalSeconds;\n        trackBarProgress.Value = (int)waveStream.CurrentTime.TotalSeconds;\n    }\n}\n```\n\n- **作用**：在定时器的每次触发时更新进度条的最大值和当前值。\n\n- 逻辑\n\n  ：\n\n  - 如果 `waveStream` 不为 `null` 且当前不在拖动进度条（`isTrackBarDragging` 为 `false`），则设置进度条的最大值为音频的总时间（秒），并将当前值更新为音频当前播放时间（秒）。\n\n2. `trackBarProgress_MouseDown` 方法\n\n```c#\nprivate void trackBarProgress_MouseDown(object sender, MouseEventArgs e)\n{\n    isTrackBarDragging = true;\n}\n```\n\n- **作用**：当用户开始拖动进度条时设置标志。\n- **逻辑**：将 `isTrackBarDragging` 设置为 `true`，表示用户正在拖动进度条，此时不应更新音频的播放位置。\n\n3. `trackBarProgress_MouseUp` 方法\n\n```c#\nprivate void trackBarProgress_MouseUp(object sender, MouseEventArgs e)\n{\n    isTrackBarDragging = false;\n    if (waveStream != null)\n    {\n        waveStream.CurrentTime = TimeSpan.FromSeconds(trackBarProgress.Value);\n    }\n}\n```\n\n- **作用**：当用户释放鼠标时停止拖动并更新音频播放位置。\n\n- 逻辑\n\n  ：\n\n  - 将 `isTrackBarDragging` 设置为 `false`，表示拖动结束。\n  - 如果 `waveStream` 不为 `null`，则根据当前进度条的值更新音频的当前播放时间。\n\n4. `trackBarProgress_ValueChanged` 方法\n\n```c#\nprivate void trackBarProgress_ValueChanged(object sender, EventArgs e)\n{\n    if (waveStream != null && !isTrackBarDragging)\n    {\n        waveStream.CurrentTime = TimeSpan.FromSeconds(trackBarProgress.Value);\n    }\n}\n```\n\n- **作用**：当进度条的值发生变化时更新音频播放位置。\n\n- 逻辑\n\n  ：\n\n  - 如果 `waveStream` 不为 `null` 且不在拖动进度条，则根据新的进度条值更新音频的当前播放时间。\n\n\n\n\n\n## 二、快捷键\n\n#### 实现\n\n##### 1.右键菜单\n\n```c#\nprivate void Button_MouseUp(object sender, MouseEventArgs e)\n{\n    if (e.Button == MouseButtons.Right)\n    {\n        Button button = sender as Button;\n        if (button == null) return;\n\n        ContextMenuStrip contextMenu = new ContextMenuStrip();\n        ToolStripMenuItem changeAudioFileMenuItem = new ToolStripMenuItem(\"更改音频文件\");\n        ToolStripMenuItem setShortcutKeyMenuItem = new ToolStripMenuItem(\"设置快捷键\");\n\n        changeAudioFileMenuItem.Click += (s, args) => ChangeAudioFile(button);\n        setShortcutKeyMenuItem.Click += SetShortcutKeyMenuItem_Click;\n\n        contextMenu.Items.Add(changeAudioFileMenuItem);\n        contextMenu.Items.Add(setShortcutKeyMenuItem);\n        contextMenu.Show(button, e.Location);\n    }\n}\n```\n\n`MouseEventArgs` 是 .NET 中用于处理鼠标事件的数据类，继承自 `EventArgs`。它提供了关于鼠标操作的信息，例如鼠标按钮的状态和鼠标指针的位置。\n\n主要属性\n\n- **Button**:\n  - 类型: `MouseButtons`\n  - 描述: 指示哪个鼠标按钮被按下或释放（如左键、右键或中键）。\n- **Clicks**:\n  - 类型: `int`\n  - 描述: 指示在事件发生时鼠标点击的次数。\n- **X**:\n  - 类型: `int`\n  - 描述: 鼠标指针相对于控件左上角的 X 坐标。\n- **Y**:\n  - 类型: `int`\n  - 描述: 鼠标指针相对于控件左上角的 Y 坐标。\n\n##### 2.快捷键设置窗口的实现\n\n```c#\nprivate void SetShortcutKeyMenuItem_Click(object sender, EventArgs e)\n{\n    ToolStripMenuItem menuItem = sender as ToolStripMenuItem;\n    if (menuItem != null)\n    {\n        ContextMenuStrip owner = menuItem.Owner as ContextMenuStrip;\n        if (owner != null)\n        {\n            Button button = owner.SourceControl as Button;\n            if (button != null)\n            {\n                using (var shortcutKeyForm = new ShortcutKeyForm())\n                {\n                    isSettingShortcutKey = true; // 设置状态为正在设置快捷键\n                    if (shortcutKeyForm.ShowDialog() == DialogResult.OK)\n                    {\n                        Keys selectedKey = shortcutKeyForm.SelectedKey;\n\n                        // 检查快捷键是否已被其他按钮使用\n                        if (shortcutKeyMapping.ContainsKey(selectedKey))\n                        {\n                            MessageBox.Show(\"此快捷键已被其他按钮使用，请选择其他快捷键。\");\n                            isSettingShortcutKey = false; // 重置状态\n                            return;\n                        }\n\n                        // 如果当前按钮已经设置了快捷键，将其从映射中移除\n                        var existingKey = shortcutKeyMapping.FirstOrDefault(x => x.Value == button).Key;\n                        if (existingKey != Keys.None)\n                        {\n                            shortcutKeyMapping.Remove(existingKey);\n                        }\n\n                        // 将新的快捷键映射到按钮\n                        shortcutKeyMapping[selectedKey] = button;\n\n                        // 更新按钮对应的 Label 文本\n                        if (buttonLabelMapping.TryGetValue(button, out Label label))\n                        {\n                            label.Text = $\"快捷键: {selectedKey}\";\n                            label.Visible = true;\n                        }\n                    }\n                    isSettingShortcutKey = false; // 重置状态\n                }\n            }\n        }\n    }\n}\n```\n\n```c#\npublic partial class ShortcutKeyForm : Form\n{\n    public Keys SelectedKey { get; private set; }\n\n    public ShortcutKeyForm()\n    {\n        InitializeComponent();\n        this.KeyPreview = true; // 使 Form 可以接收按键事件\n        this.Text = \"快捷键绑定\"; // 设置窗口标题\n        // 设置窗口启动位置为屏幕中心\n        this.StartPosition = FormStartPosition.CenterScreen;\n    }\n\n    private void ShortcutKeyForm_KeyDown(object sender, KeyEventArgs e)\n    {\n        // 检查是否是 <space> 键\n        if (e.KeyCode == Keys.Space)\n        {\n            MessageBox.Show(\"不能将 <space> 键设置为快捷键。\");\n            e.SuppressKeyPress = true; // 防止默认行为\n            return;\n        }\n        SelectedKey = e.KeyCode;\n        lblInstruction.Text = $\"按下的键: {SelectedKey}\";\n    }\n\n    private void btnConfirm_Click(object sender, EventArgs e)\n    {\n        this.DialogResult = DialogResult.OK;\n        this.Close();\n    }\n}\n```\n\n##### 3.快捷键设置的响应\n\n```c#\nprotected override bool ProcessCmdKey(ref Message msg, Keys keyData)\n{\n    // 如果正在设置快捷键，并且尝试设置 <space> 键\n    if (isSettingShortcutKey)\n    {\n        // 取消快捷键设置状态\n        if (keyData == Keys.Space)\n        {\n            MessageBox.Show(\"不能将 <space> 键设置为快捷键。\");\n            isSettingShortcutKey = false; // 取消设置状态\n            return true; // 表示事件已处理\n        }\n\n        // 设置其他快捷键\n        shortcutKey = keyData;\n        MessageBox.Show($\"快捷键已设置为: {shortcutKey}\");\n        isSettingShortcutKey = false;\n\n        // 检查快捷键是否已被使用\n        if (shortcutKeyMapping.ContainsKey(shortcutKey))\n        {\n            MessageBox.Show(\"此快捷键已被其他按钮使用，请选择其他快捷键。\");\n            return true;\n        }\n\n        // 将快捷键映射到按钮上\n        if (buttonLabelMapping.TryGetValue(ButtonPlay, out Label label))\n        {\n            // 移除旧的快捷键\n            if (shortcutKeyMapping.ContainsKey(shortcutKey))\n            {\n                shortcutKeyMapping.Remove(shortcutKey);\n            }\n\n            label.Text = $\"快捷键: {shortcutKey}\";\n            label.Visible = true;\n            shortcutKeyMapping[shortcutKey] = ButtonPlay; // 为 ButtonPlay 设置快捷键映射\n        }\n        return true; // 表示事件已处理\n    }\n\n    // 处理 <space> 键，调用 ButtonPlay_Click\n    if (keyData == Keys.Space)\n    {\n        ButtonPlay_Click(ButtonPlay, EventArgs.Empty);\n        return true; // 表示事件已处理\n    }\n\n    // 检查是否启用了快捷键功能\n    if (isShortcutKeyEnabled && shortcutKeyMapping.TryGetValue(keyData, out Button button))\n    {\n        Button_Click(button); // 触发与快捷键关联的按钮点击事件\n        return true; // 表示事件已处理\n    }\n\n    // 默认处理其他键\n    return base.ProcessCmdKey(ref msg, keyData);\n}\n```\n\n\n\n#### 全局响应\n\n具体来说，代码的主要功能是监控按键按下事件，并在特定的快捷键被按下时触发相应按钮的点击事件。\n\n1. 常量和委托定义\n\n```c#\nprivate const int WH_KEYBOARD_LL = 13; // 钩子类型\nprivate const int WM_KEYDOWN = 0x0100; // 按键按下消息\nprivate delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);\nprivate LowLevelKeyboardProc _proc;\nprivate IntPtr _hookID = IntPtr.Zero;\n```\n\n- **`WH_KEYBOARD_LL`**: 定义了低级键盘钩子的类型。\n- **`WM_KEYDOWN`**: 定义了键按下的消息。\n- **`LowLevelKeyboardProc`**: 定义了一个委托，用于处理键盘事件的回调方法。\n- **`_proc` 和 `_hookID`**: 存储钩子回调函数和钩子 ID。\n\n2. 设置钩子\n\n```c#\nprivate void SetHook()\n{\n    _proc = HookCallback;\n    _hookID = SetWindowsHookEx(WH_KEYBOARD_LL, _proc, IntPtr.Zero, 0);\n}\n```\n\n- **`SetHook`**: 用于设置全局键盘钩子。\n- **`SetWindowsHookEx`**: 调用 Windows API 设置钩子，传入钩子类型、回调方法和其他参数。\n\n3. 钩子回调\n\n```c#\nprivate IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)\n{\n    if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN)\n    {\n        Keys key = (Keys)Marshal.ReadInt32(lParam);\n\n        // 检查快捷键映射字典\n        if (shortcutKeyMapping.TryGetValue(key, out Button button))\n        {\n            // 触发与快捷键关联的按钮点击事件\n            Button_Click(button); // 替换为你的功能调用\n        }\n    }\n    return CallNextHookEx(_hookID, nCode, wParam, lParam);\n}\n```\n\n- **`HookCallback`**: 钩子回调方法，在每次按键事件触发时被调用。\n\n- 逻辑\n\n  ：\n\n  - 检查 `nCode` 是否大于等于 0（表示有效的事件）。\n  - 检查 `wParam` 是否为 `WM_KEYDOWN`（表示按键按下事件）。\n  - 使用 `Marshal.ReadInt32` 从 `lParam` 中读取按键值，并检查是否在 `shortcutKeyMapping` 字典中存在该键。\n  - 如果存在，则触发对应按钮的点击事件。\n\n4. 卸载钩子\n\n```c#\nprivate void UnhookWindowsHookEx()\n{\n    UnhookWindowsHookEx(_hookID);\n}\n```\n\n- **`UnhookWindowsHookEx`**: 卸载全局键盘钩子，释放资源。\n\n5. DLL 导入\n\n```\ncsharp复制代码[DllImport(\"user32.dll\")]\nprivate static extern IntPtr SetWindowsHookEx(int idHook, LowLevelKeyboardProc lpfn, IntPtr hMod, uint dwThreadId);\n\n[DllImport(\"user32.dll\")]\n[return: MarshalAs(UnmanagedType.Bool)]\nprivate static extern bool UnhookWindowsHookEx(IntPtr hhk);\n\n[DllImport(\"user32.dll\")]\nprivate static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);\n```\n\n- 这些 `DllImport` 属性导入 Windows API 函数，允许 C# 代码调用低级别的钩子功能。\n\n6. 窗体事件\n\n```c#\nprotected override void OnLoad(EventArgs e)\n{\n    base.OnLoad(e);\n    SetHook();\n}\n\nprotected override void OnFormClosing(FormClosingEventArgs e)\n{\n    UnhookWindowsHookEx();\n    base.OnFormClosing(e);\n}\n```\n\n- **`OnLoad`**: 在窗体加载时设置钩子。\n- **`OnFormClosing`**: 在窗体关闭时卸载钩子，防止资源泄露。\n\n\n\n## 三、操作存储\n\n```c#\nprivate void ApplySettings()\n{\n    // 设置快捷键\n    foreach (var kvp in appSettings.ShortcutKeys)\n    {\n        var buttonName = kvp.Key;\n        var key = kvp.Value;\n\n        // 查找与按钮名称对应的按钮控件\n        var button = this.Controls.Find(buttonName, true).FirstOrDefault() as Button;\n        if (button != null)\n        {\n            if (shortcutKeyMapping.ContainsKey(key))\n            {\n                shortcutKeyMapping.Remove(key); // 移除旧的键映射\n            }\n            shortcutKeyMapping[key] = button;\n            if (buttonLabelMapping.TryGetValue(button, out Label label))\n            {\n                label.Text = $\"快捷键: {key}\";\n                label.Visible = true;\n            }\n        }\n    }\n\n    // 设置音量\n    volumeSlider.Volume = appSettings.Volume;\n\n    // 加载按钮和音频文件路径映射\n    foreach (var kvp in appSettings.ButtonAudioFilePaths)\n    {\n        var buttonName = kvp.Key;\n        var filePath = kvp.Value;\n\n        var button = this.Controls.Find(buttonName, true).FirstOrDefault() as Button;\n        if (button != null && File.Exists(filePath))\n        {\n            byte[] audioBytes = File.ReadAllBytes(filePath);\n            MemoryStream audioStream = new MemoryStream(audioBytes);\n            buttonAudioMapping[button] = audioStream;\n\n            // 更新按钮文本为文件名（不包括扩展名）\n            button.Text = Path.GetFileNameWithoutExtension(filePath);\n        }\n    }\n}\n\nprivate void Form1_FormClosing(object sender, FormClosingEventArgs e)\n{\n    // 保存音量\n    appSettings.Volume = volumeSlider.Volume;\n\n    // 保存快捷键设置\n    appSettings.ShortcutKeys.Clear();\n    foreach (var kvp in shortcutKeyMapping)\n    {\n        var key = kvp.Key;\n        var button = kvp.Value;\n        appSettings.ShortcutKeys[button.Name] = key;\n    }\n\n    // 保存按钮和音频文件路径映射\n    SaveButtonAudioPaths();\n\n    // 更新 LastLoginTime\n    appSettings.LastLoginTime = DateTime.Now;\n\n    // 保存设置\n    settingsManager.SaveSettings(appSettings);\n}\n\nprivate void SaveButtonAudioPaths()\n{\n    foreach (var kvp in buttonAudioMapping)\n    {\n        var button = kvp.Key;\n        if (appSettings.ButtonAudioFilePaths.TryGetValue(button.Name, out var existingFilePath))\n        {\n            // 如果已经有文件路径存在，使用现有路径\n            appSettings.ButtonAudioFilePaths[button.Name] = existingFilePath;\n        }\n    }\n}\n\n\nprivate void ShowLoginForm()\n{\n    DateTime lastLoginTime = DateTime.MinValue; // 初始化变量\n\n    // 从 SettingsManager 加载设置\n    AppSettings settings = settingsManager.LoadSettings();\n\n    // 检查 LastLoginTime 是否存在和非空\n    if (settings.LastLoginTime.HasValue && DateTime.Now - settings.LastLoginTime.Value < TimeSpan.FromDays(1))\n    {\n        return; // 如果上次登录时间在一天内，则不显示登录窗口\n    }\n\n    // 创建 LoginForm 实例并传递 SettingsManager\n    LoginForm loginForm = new LoginForm(settingsManager);\n    if (loginForm.ShowDialog() != DialogResult.OK)\n    {\n        // 如果登录不成功，关闭主窗口\n        this.Close();\n    }\n}\n```\n\n\n\n### 1. `ApplySettings` 方法\n\n该方法用于应用之前保存的设置，包括快捷键、音量和按钮与音频文件路径的映射。\n\n- **快捷键设置**：\n  - 遍历 `appSettings.ShortcutKeys` 字典，查找与按钮名称对应的按钮控件。\n  - 如果按钮存在，移除旧的键映射，并将新映射添加到 `shortcutKeyMapping` 中。\n  - 更新按钮对应的标签，显示当前快捷键。\n- **音量设置**：\n  - 将音量滑块的值设置为保存的音量。\n- **音频文件路径加载**：\n  - 遍历 `appSettings.ButtonAudioFilePaths` 字典，查找与按钮名称对应的音频文件路径。\n  - 如果文件存在，则读取音频文件，存入 `buttonAudioMapping` 字典中，并更新按钮文本为文件名（不包括扩展名）。\n\n### 2. `Form1_FormClosing` 方法\n\n该方法在窗体关闭时调用，用于保存用户设置。\n\n- **保存音量**：将当前音量滑块的值保存到 `appSettings.Volume`。\n- **保存快捷键设置**：清空旧的快捷键设置，并遍历 `shortcutKeyMapping`，保存新的快捷键到 `appSettings.ShortcutKeys`。\n- **保存按钮与音频文件路径映射**：调用 `SaveButtonAudioPaths` 方法来保存音频文件路径的映射。\n- **更新最后登录时间**：将当前时间设置为 `appSettings.LastLoginTime`。\n- **保存设置**：调用 `settingsManager.SaveSettings(appSettings)` 将所有设置保存到文件或数据库中。\n\n### 3. `SaveButtonAudioPaths` 方法\n\n这个方法用于保存按钮与音频文件路径的映射。\n\n- 遍历 `buttonAudioMapping`，对于每个按钮，检查 `appSettings.ButtonAudioFilePaths` 中是否已经有对应的文件路径。如果有，则保留现有路径（逻辑可能需要补充具体路径更新的部分）。\n\n### 4. `ShowLoginForm` 方法\n\n该方法用于处理用户登录逻辑。\n\n- **最后登录时间检查**：从 `settingsManager` 中加载设置，检查 `LastLoginTime` 是否存在且在一天内。如果是，则直接返回，不显示登录窗口。\n- **显示登录窗口**：如果需要登录，创建 `LoginForm` 的实例并传递 `settingsManager`，显示登录对话框。如果用户未成功登录，则关闭主窗口。\n\n\n\n## 四、软件的封装\n\n略...","source":"_posts/音频软件开发_音效助手开发.md","raw":"---\ntitle: 音效助手软件开发归档\n---\n\n## 一、音频功能的开发\n\n核心功能的开发，利用NAudio.dll组件进行开发。\n\n### 委托\n\n```c#\ndelegate double Cal(double x,double y);\n\nstatic void Test(Cal f)\n{\n    Console.Write(\"请输入X:\");\n    double x=Convert.ToDouble(Console.ReadLine());\n    Console.write(\"请输入Y:\");\n    double y= Convert.ToDouble(Console. ReadLine());//委托方法工作,怎么工作由具体委托决定\n    double result =f(x, y);\n    Console.writeLine(\"x: {0}与Y:{1}委托方法计算结果为:{2}\"，x,y,result);\n}\n\nstatic void Main(string[] args)\n{\n\tTest(new Cal(Add));\n    Test(Add);\n}\n\nprivate void double Add(double x,double y){\n    //...\n}\n\n```\n\n将不变的进行封装，将变的隔离起来，让代码更易于维护。\n\n> ![image-20241029134923881](image/weituo)\n\n#### 使用步骤\n\n定义委托\n\n实例化委托（赋予方法）\n\n使用委托（输入参数）\n\n#### 观察者模式\n\n一种事件触发的模式。当定义某个委托之后，其他的类的方法可以订阅这个委托，然后通过这个委托，来统一触发一系列事件。\n\n```c#\nMyEvent?.Invoke(this, e); // 检查是否有任何订阅者，然后触发事件\n```\n\n\n\n> ![image-20241029141958516](image/weituo2)\n>\n> ![image-20241029142154108](image/weituo3)\n\n#### 委托类型/委托事件\n\n定义：\n\n```c#\npublic static event OnGameOver onGameOver;\n```\n\n事件委托和常规委托相同，只是事件委托只能从自己的类中进行调用，其他脚本只能进行订阅或者取消，但是不能触发、更改。这样可以防止其他脚本执行相关操作。\n\n\n\n#### 两种预定的事件泛型\n\n无返回值：\n\n```c#\nAction<T1,T2,T3>\n```\n\n有返回值：\n\n```c#\nFunc<T1,T2,T3>\n```\n\n\n\n#### Lambda表达式\n\n```c#\n() =>{\n\n//函数\n\n}\n```\n\nlambda表达式要和委托，事件联合使用。\n\n例如：\n\n```c#\nFunc<int , int> func = x => x+1;\n\nFunc<int , int> func;\npublic int fx(int x){\n    return x+1;\n}\n\n```\n\n再例如：\n\n```c#\nAction<string> action =msg =>Console.WriteLine(msg);\n\nAction<string> action string msg =>Console.WriteLine(msg);\n```\n\n#### 事件绑定\n\n```c#\nbutton.Click += (s, e) => Button_Click(button);\n```\n\n```c#\npublic event EventHandler Click{//}\n//delegate void System.EventHandler(object sender, System.EventArgs e)表示将用于处理不具有事件数据的事件的方法。\n```\n\n以下两种表述都是错误的：\n\n```c#\nbutton.Click += Button_Click;\n```\n\n```c#\nbutton.Click += Button_Click(Button button);\n```\n\n因为：\n\n`Button_Click` 方法的签名与 `EventHandler` 委托不匹配，使用 `button.Click += Button_Click;` 将会导致编译错误。\n\n`EventHandler` 的签名是：\n\n```\ncsharp\n\n\n复制代码\nvoid EventHandler(object sender, EventArgs e);\n```\n\n假设 `Button_Click` 方法的签名是这样的：\n\n```\ncsharp复制代码private void Button_Click(Button button)\n{\n    // 处理逻辑\n}\n```\n\n那么在这种情况下，`Button_Click` 的签名不匹配 `EventHandler` 委托，因此您不能直接使用方法组来订阅事件。编译器会报错，因为它找不到与 `EventHandler` 委托匹配的重载。\n\n### Hook\n\n略...\n\n### 音频设备识别与获取和切换\n\n通过类AudioDeviceManager来实现音频设备的识别。\n\n```C#\nusing System.Collections.Generic;\nusing NAudio.Wave;\n\npublic class AudioDeviceManager\n{\n    public List<WaveOutCapabilities> GetAudioDevices()\n    {\n        List<WaveOutCapabilities> devices = new List<WaveOutCapabilities>();\n        for (int i = 0; i < WaveOut.DeviceCount; i++)\n        {\n            devices.Add(WaveOut.GetCapabilities(i));\n        }\n        return devices;\n    }\n}\n\n```\n\n#### public List<WaveOutCapabilities> GetAudioDevices()方法\n\n通常用于获取系统中可用的音频设备列表，并返回一个包含 `WaveOutCapabilities` 对象的列表。每个 `WaveOutCapabilities` 对象描述了一个音频输出设备的特性，比如：\n\n- 设备名称\n- 支持的声道数\n- 采样率\n- 支持的位深度\n\n#### `WaveOut.DeviceCount` \n\n是一个静态属性，用于获取系统中可用的音频输出设备的数量。这个属性返回一个**整数**，表示当前可以用于音频播放的设备总数。可以用它来遍历每个设备，进而获取设备的详细信息。\n\n#### WaveOut.GetCapabilities(i)\n\n是一个静态方法，用于获取指定索引 `i` 的音频输出设备的能力（`WaveOutCapabilities`）。该方法返回一个 `WaveOutCapabilities` 对象，其中包含有关设备的详细信息，例如：\n\n- **设备名称**：音频设备的描述性名称。\n- **支持的声道数**：设备支持的声道（单声道或立体声）数量。\n- **最大采样率**：设备支持的最高采样率。\n- **最大位深度**：设备支持的最高位深度（如16位、24位等）。\n\n#### 实现步骤\n\n```c#\nprivate void LoadAudioDevices()\n{\n    var devices = audioDeviceManager.GetAudioDevices();\n    foreach (var device in devices)\n    {\n        comboBoxDevices.Items.Add(device.ProductName);\n    }\n    if (comboBoxDevices.Items.Count > 0)\n    {\n        comboBoxDevices.SelectedIndex = 0;\n    }\n}\n```\n\n`LoadAudioDevices` 方法的功能是加载系统中的音频设备并将它们添加到下拉框（`comboBoxDevices`）中。具体步骤如下：\n\n1. **获取音频设备列表**：调用 `audioDeviceManager.GetAudioDevices()` 方法，获取可用的音频设备列表。\n2. **添加设备到下拉框**：使用 `foreach` 循环遍历设备列表，将每个设备的名称（`device.ProductName`）添加到 `comboBoxDevices.Items` 中。\n3. **选择第一个设备**：如果下拉框中有设备项（`Items.Count` 大于 0），将 `comboBoxDevices.SelectedIndex` 设置为 0，默认选择第一个设备。\n4. 注意事项：\n   - 确保 `audioDeviceManager` 已正确初始化。\n   - 如果需要处理没有可用设备的情况，可以考虑在下拉框中显示一条提示信息。\n\n#### 音频设备的切换\n\n```c#\nprivate void comboBoxDevices_SelectedIndexChanged(object sender, EventArgs e)\n{\n    if (waveOut != null)\n    {\n        waveOut.Stop();\n        waveOut.Dispose();\n        waveOut = null;\n    }\n\n    if (audioFileReader != null)\n    {\n        audioFileReader.Dispose();\n        audioFileReader = null;\n    }\n\n    if (!string.IsNullOrEmpty(currentFilePath))\n    {\n        waveOut = new WaveOutEvent\n        {\n            DeviceNumber = comboBoxDevices.SelectedIndex,\n            Volume = volumeSlider.Volume\n        };\n        audioFileReader = new AudioFileReader(currentFilePath);\n        waveOut.Init(audioFileReader);\n\n        if (isPlaying)\n        {\n            waveOut.Play();\n        }\n    }\n}\n```\n\n这个 `comboBoxDevices_SelectedIndexChanged` 方法的功能是处理用户在设备选择下拉框（`comboBoxDevices`）中更改选定设备时的逻辑。具体步骤如下：\n\n1. **停止并释放现有的 `waveOut`**：如果 `waveOut` 不为空，先停止播放并释放其资源。\n2. **释放音频文件读取器**：如果 `audioFileReader` 不为空，释放其资源。\n3. **检查当前文件路径**：如果 `currentFilePath` 不为空，则进行下一步：\n4. **创建新的 `WaveOutEvent` 实例**：\n   - 设置 `DeviceNumber` 为所选设备的索引。\n   - 将音量设置为滑块（`volumeSlider.Volume`）的值。\n5. **初始化 `AudioFileReader`**：使用当前文件路径创建新的 `AudioFileReader` 实例，并用其初始化 `waveOut`。\n6. **播放音频**：如果当前状态为播放（`isPlaying` 为真），则调用 `waveOut.Play()` 开始播放。\n\n注意事项：\n\n- 确保在选择新设备时，正确管理资源，防止内存泄漏。\n- 如果 `currentFilePath` 可能为空，考虑在此处添加错误处理逻辑。\n\n\n\n\n\n### 音频管理系统\n\n#### 音频文件播放的实现步骤\n\n**初始化**：在构造函数或初始化方法中实例化 `waveOut`。\n\n**加载音频数据**：将音频数据加载到 `waveOut` 中。通常你会使用 `AudioFileReader` 来读取音频文件。\n\n```c#\nvar audioFile = new AudioFileReader(\"path/to/audio/file.mp3\");\nwaveOut.Init(audioFile);\n```\n\n**播放音频；**\n\n**控制音频**；\n\n**释放资源**：在不再需要时，确保调用 `Dispose()` 方法释放（waveout和audiofile）资源。\n\n\n\n#### `WaveStream` \n\n是 NAudio 中的一个基类，用于表示音频数据流，它可以用于处理各种音频格式。\n\n`WaveStream` 的常见用途：\n\n1. **加载音频文件**：可以通过继承 `WaveStream` 的类（如 `AudioFileReader`）来加载音频文件。\n2. **音频播放**：`WaveStream` 可以与 `WaveOut` 或 `WaveOutEvent` 等输出设备配合使用，以实现音频播放。\n3. **处理流数据**：可以用于处理实时音频流，比如录音或网络音频流。\n\n#### InitializeButtons()\n\n```c#\nprivate void InitializeButtons()\n{\n    foreach (var button in buttonAudioMapping.Keys)\n    {\n        if (button != ButtonPlay)\n        {\n            button.Click += (s, e) => Button_Click(button);\n            button.MouseUp += Button_MouseUp;\n        }\n    }\n```\n\n**点击事件**：\n\n```\nbutton.Click += (s, e) => Button_Click(button);\n```\n\n- 这行代码为 `button` 的 `Click` 事件添加了一个匿名方法（lambda 表达式）。当按钮被点击时，这个匿名方法会被调用。\n- 在这个方法中，调用了 `Button_Click(button)`，将当前按钮作为参数传递。这样，你可以在 `Button_Click` 方法中处理点击事件，使用特定于该按钮的逻辑。\n\n> Lambda语法：\n>\n> (参数列表)=>\n>\n> {\n>\n> ​\t//函数体\n>\n> }\n>\n> ​\t//\"=>\"意思为goes to。\n\n\n\n\n\n#### 音频播放管理系统\n\n```c#\nprivate byte[] ReadStreamToByteArray(UnmanagedMemoryStream stream)\n{\n    using (var memoryStream = new MemoryStream())\n    {\n        stream.CopyTo(memoryStream);\n        return memoryStream.ToArray();\n    }\n}\n\nprivate void InitializeButtonAudioMapping()\n{\n    buttonAudioMapping = new Dictionary<Button, MemoryStream>\n    {\n        //笑声\n        { ButtonPlayPause, new MemoryStream(ReadStreamToByteArray(Properties.Resources.SFX_001)) },// 继续为其他按钮设置音频文件路径\n    };\n}\nprivate void InitializeButtons()\n{\n    foreach (var button in buttonAudioMapping.Keys)\n    {\n        if (button != ButtonPlay)\n        {\n            button.Click += (s, e) => Button_Click(button);\n            button.MouseUp += Button_MouseUp;\n        }\n    }\n}\n\nprivate void Button_Click(Button button)\n{\n    HandleButtonClick(button);\n}\n\nprivate void HandleButtonClick(Button button)\n{\n    if (!buttonAudioMapping.TryGetValue(button, out MemoryStream audioStream))\n    {\n        MessageBox.Show(\"音频文件未定义\");\n        return;\n    }\n\n    if (waveStream == null || waveOut == null || isPlaying)\n    {\n        StartPlayback(audioStream);\n        ButtonPlay.BackgroundImage = Properties.Resources.pause;\n    }\n    else\n    {\n        StartPlayback(audioStream);\n        ButtonPlay.BackgroundImage = Properties.Resources.pause;\n    }\n}\n\nprivate void CleanUp()\n{\n    if (waveOut != null)\n    {\n        // 确保事件处理程序被解绑\n        waveOut.PlaybackStopped -= OnPlaybackStopped;\n        waveOut.Stop();\n        waveOut.Dispose();\n        waveOut = null;\n    }\n\n    if (audioFileReader != null)\n    {\n        audioFileReader.Dispose();\n        audioFileReader = null;\n    }\n}\n\nprivate void ButtonPlay_Click(object sender, EventArgs e)\n{\n    if (waveOut == null || waveStream == null)\n    {\n        if (buttonAudioMapping.TryGetValue(ButtonPlay, out MemoryStream audioStream))\n        {\n            StartPlayback(audioStream);\n            ButtonPlay.BackgroundImage = Properties.Resources.pause;\n        }\n    }\n    else\n    {\n        if (waveOut.PlaybackState == PlaybackState.Playing)\n        {\n            waveOut.Pause();\n            isPlaying = false;\n            ButtonPlay.BackgroundImage = Properties.Resources.play;\n        }\n        else\n        {\n            waveOut.Play();\n            isPlaying = true;\n            ButtonPlay.BackgroundImage = Properties.Resources.pause;\n        }\n    }\n}\n\nprivate void StartPlayback(MemoryStream audioStream)\n{\n    CleanUp();\n\n    waveOut = new WaveOutEvent\n    {\n        DeviceNumber = comboBoxDevices.SelectedIndex\n    };\n\n    // 重置流位置\n    audioStream.Seek(0, SeekOrigin.Begin);\n\n    // 使用 WaveFileReader\n    waveStream = new WaveFileReader(audioStream);\n    waveOut.Init(waveStream);\n    waveOut.PlaybackStopped += OnPlaybackStopped;\n\n    waveOut.Play();\n    isPlaying = true;\n\n    // 确保初始化时更新进度条\n    trackBarProgress.Maximum = (int)waveStream.TotalTime.TotalSeconds;\n}\n\nprivate void ChangeAudioFile(Button button)\n{\n    // 设置只允许选择 .wav 文件\n    openFileDialog.Filter = \"WAV files (*.wav)|*.wav\";\n\n    if (openFileDialog.ShowDialog() == DialogResult.OK)\n    {\n        string newFilePath = openFileDialog.FileName;\n\n        // 检查文件扩展名是否为 .wav（如果需要进一步验证）\n        if (System.IO.Path.GetExtension(newFilePath).ToLower() != \".wav\")\n        {\n            MessageBox.Show(\"只能选择 .wav 格式的文件！\", \"错误\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n            return;\n        }\n\n        button.Text = System.IO.Path.GetFileNameWithoutExtension(newFilePath);\n\n        // 加载音频文件为 MemoryStream\n        byte[] audioBytes = System.IO.File.ReadAllBytes(newFilePath);\n        System.IO.MemoryStream audioStream = new System.IO.MemoryStream(audioBytes);\n\n        // 更新 buttonAudioMapping 字典\n        if (buttonAudioMapping.ContainsKey(button))\n        {\n            buttonAudioMapping[button].Dispose(); // 释放旧的 MemoryStream\n            buttonAudioMapping[button] = audioStream;\n        }\n        else\n        {\n            buttonAudioMapping.Add(button, audioStream);\n        }\n\n        // 更新 appSettings 中的音频文件路径\n        appSettings.ButtonAudioFilePaths[button.Name] = newFilePath;\n\n        // 自动保存设置\n        settingsManager.SaveSettings(appSettings);\n    }\n\n}\nprivate void OnPlaybackStopped(object sender, StoppedEventArgs e)\n{\n    isPlaying = false;\n\n    // 检查是否正在播放其他音频\n    if (waveOut == null || waveOut.PlaybackState != PlaybackState.Playing)\n    {\n        ButtonPlay.BackgroundImage = Properties.Resources.play; // 播放图片\n    }\n}\n```\n\n##### 1.**音频文件加载和映射**\n\n- `ReadStreamToByteArray` 方法将 `UnmanagedMemoryStream` 读取到字节数组。\n- `InitializeButtonAudioMapping` 方法将音频文件与按钮关联，使用 `MemoryStream` 存储每个音频文件的内容。\n- 采用这样的方式储存音频数据原因：\n\n​\t**内存管理**：通过将音频流读取到 `MemoryStream` 中，可以更灵活地管理内存。`MemoryStream` 允许在内存中对音频数据进行快速读写操作，而不需要频繁地访问磁盘文件。\n\n​\t**易于处理**：在播放音频时，将其存储在内存中可以加快访问速度，因为它避免了每次播放时都去读取文件系统的延迟。这对于用户体验非常重要。\n\n​\t**数据封装**：使用 `ReadStreamToByteArray` 方法将音频文件的流转换为字节数组，使得音频文件可以以更加统一的方式存储和使用。这使得将多个按钮与不同的音频文件关联变得简单。\n\n​\t**资源整合**：`Properties.Resources` 可以将资源嵌入到程序中，方便管理和访问。将其转换为 `MemoryStream` 使得你可以在运行时直接从嵌入的资源读取数据。\n\n​\t**避免硬编码路径**：直接使用嵌入的资源而不是依赖于文件路径，减少了在文件管理上的复杂性，同时也提高了程序的可移植性。\n\n`UnmanagedMemoryStream` 是 C# 中的一个类，通常用于处理非托管内存中的数据。与常规的 `MemoryStream` 不同，`UnmanagedMemoryStream` 主要用于读取和写入存储在非托管内存中的字节数据。这种类型的流适合处理那些不由 .NET 垃圾回收器管理的内存，例如：\n\n1. **与 P/Invoke 交互**：当你需要调用本地 API（如 Windows API）时，通常需要在非托管内存中操作数据。\n2. **处理大数据**：在处理大文件或数据块时，可以使用非托管内存来提高性能，因为它可以减少内存分配的开销。\n3. **性能优化**：由于它直接在非托管内存中操作，可能会在某些情况下提供更好的性能，特别是在与硬件接口或其他语言的代码交互时。\n\n`UnmanagedMemoryStream` 通常会在以下情况下使用：\n\n- 从操作系统或其他低级 API 中获取数据，并在 C# 中处理。\n- 在 C# 与 C/C++ 等语言的互操作中，用于传递指向非托管内存的指针。\n\n例子\n\n一个简单的例子是，你可能会在调用某个非托管函数之前，先在非托管内存中分配空间，然后使用 `UnmanagedMemoryStream` 来读取或写入数据。\n\n总之，`UnmanagedMemoryStream` 是一个强大的工具，适用于需要直接操作非托管内存的场景。\n\n> **非托管内存**是指不由 .NET 垃圾回收器（GC）管理的内存。这种内存通常由应用程序直接分配和释放，主要用于与底层系统或其他语言（如 C/C++）交互。以下是一些关于非托管内存的关键点：\n>\n> 1. **手动管理**：在使用非托管内存时，开发者需要手动分配和释放内存，使用诸如 `Marshal.AllocHGlobal` 和 `Marshal.FreeHGlobal` 等方法。\n> 2. **性能优化**：非托管内存可以用于处理性能要求较高的场景，比如大型数据结构或高频率的数据交互，因为它可以减少内存分配和回收的开销。\n> 3. **与系统 API 交互**：许多系统级 API 和库（尤其是 C/C++ 编写的）需要使用非托管内存，因为它们不理解 .NET 的内存管理模型。\n> 4. **数据共享**：非托管内存可以用于在不同语言或模块之间共享数据，例如在 C# 和 C/C++ 代码之间传递复杂数据结构。\n> 5. **可能的内存泄漏**：由于需要手动管理，开发者必须小心以避免内存泄漏或未定义行为，这些都是在非托管内存中比较常见的问题。\n>\n> 在使用非托管内存时，确保了解其管理方式是非常重要的，以确保程序的稳定性和性能。\n\n\n\n> **`out` 关键字**：\n>\n> - 表示这是一个输出参数。在方法内部，必须对其进行赋值。\n> - 调用方法时，不需要在外部声明该变量，只需声明它为 `out` 类型即可。\n>\n> **用途**：\n>\n> - `out` 参数通常用于从方法中返回多个值。在 C# 中，一个方法只能返回一个值，但可以通过 `out` 参数返回额外的信息或结果。\n> - 在你的例子中，`audioStream` 是一个 `MemoryStream` 对象，可能用于返回音频数据的流。\n\n\n\n**数据流的转换**\n\n```c#\nprivate byte[] ReadStreamToByteArray(UnmanagedMemoryStream stream)\n{\n    using (var memoryStream = new MemoryStream())\n    {\n        stream.CopyTo(memoryStream);\n        return memoryStream.ToArray();\n    }\n}\n```\n\n这段代码的作用是将一个 `UnmanagedMemoryStream` 对象的内容复制到一个新的 `MemoryStream` 中，并返回其字节数组。以下是逐步解析：\n\n1. **`using` 语句**：确保 `memoryStream` 在使用完后自动释放资源，即使在发生异常时也能保证资源得到释放。\n2. **`stream.CopyTo(memoryStream)`**：将 `UnmanagedMemoryStream` 的内容复制到 `memoryStream` 中。`CopyTo` 方法会从源流读取数据并写入到目标流。\n3. **`memoryStream.ToArray()`**：将 `memoryStream` 中的内容转换为字节数组并返回。\n\n> `using` 语句在 C# 中用于确保对象在使用完后能够自动释放其占用的资源。主要有以下几个作用：\n>\n> 1. **自动释放资源**：`using` 语句会在代码块结束时自动调用对象的 `Dispose` 方法，释放资源。这在处理需要显式释放资源的对象（如文件流、数据库连接、图形资源等）时特别重要。\n> 2. **简化代码**：通过使用 `using`，你不需要显式调用 `Dispose`，这样可以减少代码的复杂性，并提高可读性。\n> 3. **异常安全**：即使在 `using` 语句块中发生异常，`Dispose` 仍然会被调用，确保资源得到正确释放，从而避免内存泄漏。\n>\n> ### 示例\n>\n> 以下是一个简单的示例，展示了如何使用 `using` 语句：\n>\n> ```\n> csharp复制代码using (var fileStream = new FileStream(\"example.txt\", FileMode.Open))\n> {\n>     // 进行文件操作\n> } // 这里会自动调用 fileStream.Dispose()\n> ```\n>\n> 在这个例子中，`fileStream` 会在 `using` 块结束后自动关闭，无需手动调用 `fileStream.Close()` 或 `fileStream.Dispose()`。\n>\n> ### 注意事项\n>\n> - `using` 语句只能用于实现了 `IDisposable` 接口的对象。\n> - 如果对象在 `using` 块之外的地方仍然被引用，确保对象不会被重复释放。\n\nDcitionary.Keys返回的是，所有key的集合Dictionary2，值的类型和Dictionary中key的类型一致。\n\n\n\n##### 2.音频播放逻辑实现\n\nbutton_click → handle(判断能否播放) → cleanup(释放上一次播放的内存)  → startplay(开始播放)\n\n音频储存方式变化：audiostream                                                                      → wavestream(可以利用wave的play功能)\n\n**`out` 关键字**：\n\n- 表示这是一个输出参数。在<u>方法内部</u>，必须对其进行赋值。\n- 调用方法时，<u>不需要在外部声明该变量</u>，只需声明它为 `out` 类型即可。\n\n**用途**：\n\n- `out` 参数通常用于从方法中返回多个值。在 C# 中，一个方法只能返回一个值，但可以通过 `out` 参数返回额外的信息或结果。\n- 在例子中，`audioStream` 是一个 `MemoryStream` 对象，可能用于返回音频数据的流。\n\n在这个例子中，`TryGetValue` 方法尝试从文件中读取音频流，并通过 `out` 参数返回 `MemoryStream` 对象。如果成功，调用者可以使用这个流；如果失败，流会被设置为 `null`。\n\n> ### `WaveFileReader` 与 `AudioFileReader` 的区别\n>\n> 1. **`WaveFileReader`**：\n>    - 专门用于读取 `.wav` 文件格式。\n>    - 提供对 WAV 文件的解析，包括文件头、采样率、通道数等信息。\n>    - 适用于需要处理纯 WAV 数据的场景。\n> 2. **`AudioFileReader`**：\n>    - 更通用，能够处理多种音频格式（如 WAV、MP3、AAC 等）。\n>    - 内部会根据文件格式自动解码并转换为 PCM 数据。\n>    - 适合需要处理不同音频格式的场景。\n>\n> ### 使用场景\n>\n> - 如果你只处理 WAV 文件，使用 `WaveFileReader` 可以更高效，因为它针对这种格式进行了优化。\n> - 如果你的应用需要支持多种音频格式，使用 `AudioFileReader` 会更方便，因为它可以自动处理多种类型的音频数据。\n\n\n\n##### 3.播放文件选择\n\n```c#\nprivate void ChangeAudioFile(Button button)\n{\n    // 设置只允许选择 .wav 文件\n    openFileDialog.Filter = \"WAV files (*.wav)|*.wav\";\n\n    if (openFileDialog.ShowDialog() == DialogResult.OK)\n    {\n        string newFilePath = openFileDialog.FileName;\n\n        // 检查文件扩展名是否为 .wav（如果需要进一步验证）\n        if (System.IO.Path.GetExtension(newFilePath).ToLower() != \".wav\")\n        {\n            MessageBox.Show(\"只能选择 .wav 格式的文件！\", \"错误\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n            return;\n        }\n\n        button.Text = System.IO.Path.GetFileNameWithoutExtension(newFilePath);\n\n        // 加载音频文件为 MemoryStream\n        byte[] audioBytes = System.IO.File.ReadAllBytes(newFilePath);\n        System.IO.MemoryStream audioStream = new System.IO.MemoryStream(audioBytes);\n\n        // 更新 buttonAudioMapping 字典\n        if (buttonAudioMapping.ContainsKey(button))\n        {\n            buttonAudioMapping[button].Dispose(); // 释放旧的 MemoryStream\n            buttonAudioMapping[button] = audioStream;\n        }\n        else\n        {\n            buttonAudioMapping.Add(button, audioStream);\n        }\n\n        // 更新 appSettings 中的音频文件路径\n        appSettings.ButtonAudioFilePaths[button.Name] = newFilePath;\n\n        // 自动保存设置\n        settingsManager.SaveSettings(appSettings);\n    }\n}\n```\n\n**设置文件对话框过滤器**：\n\n```c#\nopenFileDialog.Filter = \"WAV files (*.wav)|*.wav\";\n```\n\n这行代码设置文件选择对话框只允许选择 `.wav` 文件。\n\n**显示对话框并检查用户选择**：\n\n```c#\nif (openFileDialog.ShowDialog() == DialogResult.OK)\n```\n\n显示文件对话框，用户选择文件后，如果点击“确定”，则继续执行后续代码。\n\n**获取选择的文件路径**：\n\n```c#\nstring newFilePath = openFileDialog.FileName;\n```\n\n**检查文件扩展名**（可选）：\n\n```c#\nif (System.IO.Path.GetExtension(newFilePath).ToLower() != \".wav\")\n{\n    MessageBox.Show(\"只能选择 .wav 格式的文件！\", \"错误\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n    return;\n}\n```\n\n如果用户选择的文件不是 `.wav` 格式，则弹出错误提示，并退出方法。\n\n**更新按钮文本**：\n\n```c#\nbutton.Text = System.IO.Path.GetFileNameWithoutExtension(newFilePath);\n```\n\n将按钮的文本设置为文件名，不包括扩展名。\n\n**加载音频文件为 `MemoryStream`**：\n\n```c#\nbyte[] audioBytes = System.IO.File.ReadAllBytes(newFilePath);\nSystem.IO.MemoryStream audioStream = new System.IO.MemoryStream(audioBytes);\n```\n\n读取选择的音频文件的所有字节，并将其存入一个 `MemoryStream` 中，以便后续播放。\n\n**更新 `buttonAudioMapping` 字典**：\n\n```c#\nif (buttonAudioMapping.ContainsKey(button))\n{\n    buttonAudioMapping[button].Dispose(); // 释放旧的 MemoryStream\n    buttonAudioMapping[button] = audioStream;\n}\nelse\n{\n    buttonAudioMapping.Add(button, audioStream);\n}\n```\n\n检查字典中是否已有该按钮的映射。如果有，先释放旧的 `MemoryStream`，然后更新为新的流；如果没有，直接添加新的映射。\n\n**更新设置中的音频文件路径**：\n\n```c#\nappSettings.ButtonAudioFilePaths[button.Name] = newFilePath;\n```\n\n**自动保存设置**：\n\n```c#\nsettingsManager.SaveSettings(appSettings);\n```\n\n\n\n#### 音量大小\n\n...略\n\n#### 进度条\n\n1. `Timer_Tick` 方法\n\n```c#\nprivate void Timer_Tick(object sender, EventArgs e)\n{\n    if (waveStream != null && !isTrackBarDragging)\n    {\n        trackBarProgress.Maximum = (int)waveStream.TotalTime.TotalSeconds;\n        trackBarProgress.Value = (int)waveStream.CurrentTime.TotalSeconds;\n    }\n}\n```\n\n- **作用**：在定时器的每次触发时更新进度条的最大值和当前值。\n\n- 逻辑\n\n  ：\n\n  - 如果 `waveStream` 不为 `null` 且当前不在拖动进度条（`isTrackBarDragging` 为 `false`），则设置进度条的最大值为音频的总时间（秒），并将当前值更新为音频当前播放时间（秒）。\n\n2. `trackBarProgress_MouseDown` 方法\n\n```c#\nprivate void trackBarProgress_MouseDown(object sender, MouseEventArgs e)\n{\n    isTrackBarDragging = true;\n}\n```\n\n- **作用**：当用户开始拖动进度条时设置标志。\n- **逻辑**：将 `isTrackBarDragging` 设置为 `true`，表示用户正在拖动进度条，此时不应更新音频的播放位置。\n\n3. `trackBarProgress_MouseUp` 方法\n\n```c#\nprivate void trackBarProgress_MouseUp(object sender, MouseEventArgs e)\n{\n    isTrackBarDragging = false;\n    if (waveStream != null)\n    {\n        waveStream.CurrentTime = TimeSpan.FromSeconds(trackBarProgress.Value);\n    }\n}\n```\n\n- **作用**：当用户释放鼠标时停止拖动并更新音频播放位置。\n\n- 逻辑\n\n  ：\n\n  - 将 `isTrackBarDragging` 设置为 `false`，表示拖动结束。\n  - 如果 `waveStream` 不为 `null`，则根据当前进度条的值更新音频的当前播放时间。\n\n4. `trackBarProgress_ValueChanged` 方法\n\n```c#\nprivate void trackBarProgress_ValueChanged(object sender, EventArgs e)\n{\n    if (waveStream != null && !isTrackBarDragging)\n    {\n        waveStream.CurrentTime = TimeSpan.FromSeconds(trackBarProgress.Value);\n    }\n}\n```\n\n- **作用**：当进度条的值发生变化时更新音频播放位置。\n\n- 逻辑\n\n  ：\n\n  - 如果 `waveStream` 不为 `null` 且不在拖动进度条，则根据新的进度条值更新音频的当前播放时间。\n\n\n\n\n\n## 二、快捷键\n\n#### 实现\n\n##### 1.右键菜单\n\n```c#\nprivate void Button_MouseUp(object sender, MouseEventArgs e)\n{\n    if (e.Button == MouseButtons.Right)\n    {\n        Button button = sender as Button;\n        if (button == null) return;\n\n        ContextMenuStrip contextMenu = new ContextMenuStrip();\n        ToolStripMenuItem changeAudioFileMenuItem = new ToolStripMenuItem(\"更改音频文件\");\n        ToolStripMenuItem setShortcutKeyMenuItem = new ToolStripMenuItem(\"设置快捷键\");\n\n        changeAudioFileMenuItem.Click += (s, args) => ChangeAudioFile(button);\n        setShortcutKeyMenuItem.Click += SetShortcutKeyMenuItem_Click;\n\n        contextMenu.Items.Add(changeAudioFileMenuItem);\n        contextMenu.Items.Add(setShortcutKeyMenuItem);\n        contextMenu.Show(button, e.Location);\n    }\n}\n```\n\n`MouseEventArgs` 是 .NET 中用于处理鼠标事件的数据类，继承自 `EventArgs`。它提供了关于鼠标操作的信息，例如鼠标按钮的状态和鼠标指针的位置。\n\n主要属性\n\n- **Button**:\n  - 类型: `MouseButtons`\n  - 描述: 指示哪个鼠标按钮被按下或释放（如左键、右键或中键）。\n- **Clicks**:\n  - 类型: `int`\n  - 描述: 指示在事件发生时鼠标点击的次数。\n- **X**:\n  - 类型: `int`\n  - 描述: 鼠标指针相对于控件左上角的 X 坐标。\n- **Y**:\n  - 类型: `int`\n  - 描述: 鼠标指针相对于控件左上角的 Y 坐标。\n\n##### 2.快捷键设置窗口的实现\n\n```c#\nprivate void SetShortcutKeyMenuItem_Click(object sender, EventArgs e)\n{\n    ToolStripMenuItem menuItem = sender as ToolStripMenuItem;\n    if (menuItem != null)\n    {\n        ContextMenuStrip owner = menuItem.Owner as ContextMenuStrip;\n        if (owner != null)\n        {\n            Button button = owner.SourceControl as Button;\n            if (button != null)\n            {\n                using (var shortcutKeyForm = new ShortcutKeyForm())\n                {\n                    isSettingShortcutKey = true; // 设置状态为正在设置快捷键\n                    if (shortcutKeyForm.ShowDialog() == DialogResult.OK)\n                    {\n                        Keys selectedKey = shortcutKeyForm.SelectedKey;\n\n                        // 检查快捷键是否已被其他按钮使用\n                        if (shortcutKeyMapping.ContainsKey(selectedKey))\n                        {\n                            MessageBox.Show(\"此快捷键已被其他按钮使用，请选择其他快捷键。\");\n                            isSettingShortcutKey = false; // 重置状态\n                            return;\n                        }\n\n                        // 如果当前按钮已经设置了快捷键，将其从映射中移除\n                        var existingKey = shortcutKeyMapping.FirstOrDefault(x => x.Value == button).Key;\n                        if (existingKey != Keys.None)\n                        {\n                            shortcutKeyMapping.Remove(existingKey);\n                        }\n\n                        // 将新的快捷键映射到按钮\n                        shortcutKeyMapping[selectedKey] = button;\n\n                        // 更新按钮对应的 Label 文本\n                        if (buttonLabelMapping.TryGetValue(button, out Label label))\n                        {\n                            label.Text = $\"快捷键: {selectedKey}\";\n                            label.Visible = true;\n                        }\n                    }\n                    isSettingShortcutKey = false; // 重置状态\n                }\n            }\n        }\n    }\n}\n```\n\n```c#\npublic partial class ShortcutKeyForm : Form\n{\n    public Keys SelectedKey { get; private set; }\n\n    public ShortcutKeyForm()\n    {\n        InitializeComponent();\n        this.KeyPreview = true; // 使 Form 可以接收按键事件\n        this.Text = \"快捷键绑定\"; // 设置窗口标题\n        // 设置窗口启动位置为屏幕中心\n        this.StartPosition = FormStartPosition.CenterScreen;\n    }\n\n    private void ShortcutKeyForm_KeyDown(object sender, KeyEventArgs e)\n    {\n        // 检查是否是 <space> 键\n        if (e.KeyCode == Keys.Space)\n        {\n            MessageBox.Show(\"不能将 <space> 键设置为快捷键。\");\n            e.SuppressKeyPress = true; // 防止默认行为\n            return;\n        }\n        SelectedKey = e.KeyCode;\n        lblInstruction.Text = $\"按下的键: {SelectedKey}\";\n    }\n\n    private void btnConfirm_Click(object sender, EventArgs e)\n    {\n        this.DialogResult = DialogResult.OK;\n        this.Close();\n    }\n}\n```\n\n##### 3.快捷键设置的响应\n\n```c#\nprotected override bool ProcessCmdKey(ref Message msg, Keys keyData)\n{\n    // 如果正在设置快捷键，并且尝试设置 <space> 键\n    if (isSettingShortcutKey)\n    {\n        // 取消快捷键设置状态\n        if (keyData == Keys.Space)\n        {\n            MessageBox.Show(\"不能将 <space> 键设置为快捷键。\");\n            isSettingShortcutKey = false; // 取消设置状态\n            return true; // 表示事件已处理\n        }\n\n        // 设置其他快捷键\n        shortcutKey = keyData;\n        MessageBox.Show($\"快捷键已设置为: {shortcutKey}\");\n        isSettingShortcutKey = false;\n\n        // 检查快捷键是否已被使用\n        if (shortcutKeyMapping.ContainsKey(shortcutKey))\n        {\n            MessageBox.Show(\"此快捷键已被其他按钮使用，请选择其他快捷键。\");\n            return true;\n        }\n\n        // 将快捷键映射到按钮上\n        if (buttonLabelMapping.TryGetValue(ButtonPlay, out Label label))\n        {\n            // 移除旧的快捷键\n            if (shortcutKeyMapping.ContainsKey(shortcutKey))\n            {\n                shortcutKeyMapping.Remove(shortcutKey);\n            }\n\n            label.Text = $\"快捷键: {shortcutKey}\";\n            label.Visible = true;\n            shortcutKeyMapping[shortcutKey] = ButtonPlay; // 为 ButtonPlay 设置快捷键映射\n        }\n        return true; // 表示事件已处理\n    }\n\n    // 处理 <space> 键，调用 ButtonPlay_Click\n    if (keyData == Keys.Space)\n    {\n        ButtonPlay_Click(ButtonPlay, EventArgs.Empty);\n        return true; // 表示事件已处理\n    }\n\n    // 检查是否启用了快捷键功能\n    if (isShortcutKeyEnabled && shortcutKeyMapping.TryGetValue(keyData, out Button button))\n    {\n        Button_Click(button); // 触发与快捷键关联的按钮点击事件\n        return true; // 表示事件已处理\n    }\n\n    // 默认处理其他键\n    return base.ProcessCmdKey(ref msg, keyData);\n}\n```\n\n\n\n#### 全局响应\n\n具体来说，代码的主要功能是监控按键按下事件，并在特定的快捷键被按下时触发相应按钮的点击事件。\n\n1. 常量和委托定义\n\n```c#\nprivate const int WH_KEYBOARD_LL = 13; // 钩子类型\nprivate const int WM_KEYDOWN = 0x0100; // 按键按下消息\nprivate delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);\nprivate LowLevelKeyboardProc _proc;\nprivate IntPtr _hookID = IntPtr.Zero;\n```\n\n- **`WH_KEYBOARD_LL`**: 定义了低级键盘钩子的类型。\n- **`WM_KEYDOWN`**: 定义了键按下的消息。\n- **`LowLevelKeyboardProc`**: 定义了一个委托，用于处理键盘事件的回调方法。\n- **`_proc` 和 `_hookID`**: 存储钩子回调函数和钩子 ID。\n\n2. 设置钩子\n\n```c#\nprivate void SetHook()\n{\n    _proc = HookCallback;\n    _hookID = SetWindowsHookEx(WH_KEYBOARD_LL, _proc, IntPtr.Zero, 0);\n}\n```\n\n- **`SetHook`**: 用于设置全局键盘钩子。\n- **`SetWindowsHookEx`**: 调用 Windows API 设置钩子，传入钩子类型、回调方法和其他参数。\n\n3. 钩子回调\n\n```c#\nprivate IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)\n{\n    if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN)\n    {\n        Keys key = (Keys)Marshal.ReadInt32(lParam);\n\n        // 检查快捷键映射字典\n        if (shortcutKeyMapping.TryGetValue(key, out Button button))\n        {\n            // 触发与快捷键关联的按钮点击事件\n            Button_Click(button); // 替换为你的功能调用\n        }\n    }\n    return CallNextHookEx(_hookID, nCode, wParam, lParam);\n}\n```\n\n- **`HookCallback`**: 钩子回调方法，在每次按键事件触发时被调用。\n\n- 逻辑\n\n  ：\n\n  - 检查 `nCode` 是否大于等于 0（表示有效的事件）。\n  - 检查 `wParam` 是否为 `WM_KEYDOWN`（表示按键按下事件）。\n  - 使用 `Marshal.ReadInt32` 从 `lParam` 中读取按键值，并检查是否在 `shortcutKeyMapping` 字典中存在该键。\n  - 如果存在，则触发对应按钮的点击事件。\n\n4. 卸载钩子\n\n```c#\nprivate void UnhookWindowsHookEx()\n{\n    UnhookWindowsHookEx(_hookID);\n}\n```\n\n- **`UnhookWindowsHookEx`**: 卸载全局键盘钩子，释放资源。\n\n5. DLL 导入\n\n```\ncsharp复制代码[DllImport(\"user32.dll\")]\nprivate static extern IntPtr SetWindowsHookEx(int idHook, LowLevelKeyboardProc lpfn, IntPtr hMod, uint dwThreadId);\n\n[DllImport(\"user32.dll\")]\n[return: MarshalAs(UnmanagedType.Bool)]\nprivate static extern bool UnhookWindowsHookEx(IntPtr hhk);\n\n[DllImport(\"user32.dll\")]\nprivate static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);\n```\n\n- 这些 `DllImport` 属性导入 Windows API 函数，允许 C# 代码调用低级别的钩子功能。\n\n6. 窗体事件\n\n```c#\nprotected override void OnLoad(EventArgs e)\n{\n    base.OnLoad(e);\n    SetHook();\n}\n\nprotected override void OnFormClosing(FormClosingEventArgs e)\n{\n    UnhookWindowsHookEx();\n    base.OnFormClosing(e);\n}\n```\n\n- **`OnLoad`**: 在窗体加载时设置钩子。\n- **`OnFormClosing`**: 在窗体关闭时卸载钩子，防止资源泄露。\n\n\n\n## 三、操作存储\n\n```c#\nprivate void ApplySettings()\n{\n    // 设置快捷键\n    foreach (var kvp in appSettings.ShortcutKeys)\n    {\n        var buttonName = kvp.Key;\n        var key = kvp.Value;\n\n        // 查找与按钮名称对应的按钮控件\n        var button = this.Controls.Find(buttonName, true).FirstOrDefault() as Button;\n        if (button != null)\n        {\n            if (shortcutKeyMapping.ContainsKey(key))\n            {\n                shortcutKeyMapping.Remove(key); // 移除旧的键映射\n            }\n            shortcutKeyMapping[key] = button;\n            if (buttonLabelMapping.TryGetValue(button, out Label label))\n            {\n                label.Text = $\"快捷键: {key}\";\n                label.Visible = true;\n            }\n        }\n    }\n\n    // 设置音量\n    volumeSlider.Volume = appSettings.Volume;\n\n    // 加载按钮和音频文件路径映射\n    foreach (var kvp in appSettings.ButtonAudioFilePaths)\n    {\n        var buttonName = kvp.Key;\n        var filePath = kvp.Value;\n\n        var button = this.Controls.Find(buttonName, true).FirstOrDefault() as Button;\n        if (button != null && File.Exists(filePath))\n        {\n            byte[] audioBytes = File.ReadAllBytes(filePath);\n            MemoryStream audioStream = new MemoryStream(audioBytes);\n            buttonAudioMapping[button] = audioStream;\n\n            // 更新按钮文本为文件名（不包括扩展名）\n            button.Text = Path.GetFileNameWithoutExtension(filePath);\n        }\n    }\n}\n\nprivate void Form1_FormClosing(object sender, FormClosingEventArgs e)\n{\n    // 保存音量\n    appSettings.Volume = volumeSlider.Volume;\n\n    // 保存快捷键设置\n    appSettings.ShortcutKeys.Clear();\n    foreach (var kvp in shortcutKeyMapping)\n    {\n        var key = kvp.Key;\n        var button = kvp.Value;\n        appSettings.ShortcutKeys[button.Name] = key;\n    }\n\n    // 保存按钮和音频文件路径映射\n    SaveButtonAudioPaths();\n\n    // 更新 LastLoginTime\n    appSettings.LastLoginTime = DateTime.Now;\n\n    // 保存设置\n    settingsManager.SaveSettings(appSettings);\n}\n\nprivate void SaveButtonAudioPaths()\n{\n    foreach (var kvp in buttonAudioMapping)\n    {\n        var button = kvp.Key;\n        if (appSettings.ButtonAudioFilePaths.TryGetValue(button.Name, out var existingFilePath))\n        {\n            // 如果已经有文件路径存在，使用现有路径\n            appSettings.ButtonAudioFilePaths[button.Name] = existingFilePath;\n        }\n    }\n}\n\n\nprivate void ShowLoginForm()\n{\n    DateTime lastLoginTime = DateTime.MinValue; // 初始化变量\n\n    // 从 SettingsManager 加载设置\n    AppSettings settings = settingsManager.LoadSettings();\n\n    // 检查 LastLoginTime 是否存在和非空\n    if (settings.LastLoginTime.HasValue && DateTime.Now - settings.LastLoginTime.Value < TimeSpan.FromDays(1))\n    {\n        return; // 如果上次登录时间在一天内，则不显示登录窗口\n    }\n\n    // 创建 LoginForm 实例并传递 SettingsManager\n    LoginForm loginForm = new LoginForm(settingsManager);\n    if (loginForm.ShowDialog() != DialogResult.OK)\n    {\n        // 如果登录不成功，关闭主窗口\n        this.Close();\n    }\n}\n```\n\n\n\n### 1. `ApplySettings` 方法\n\n该方法用于应用之前保存的设置，包括快捷键、音量和按钮与音频文件路径的映射。\n\n- **快捷键设置**：\n  - 遍历 `appSettings.ShortcutKeys` 字典，查找与按钮名称对应的按钮控件。\n  - 如果按钮存在，移除旧的键映射，并将新映射添加到 `shortcutKeyMapping` 中。\n  - 更新按钮对应的标签，显示当前快捷键。\n- **音量设置**：\n  - 将音量滑块的值设置为保存的音量。\n- **音频文件路径加载**：\n  - 遍历 `appSettings.ButtonAudioFilePaths` 字典，查找与按钮名称对应的音频文件路径。\n  - 如果文件存在，则读取音频文件，存入 `buttonAudioMapping` 字典中，并更新按钮文本为文件名（不包括扩展名）。\n\n### 2. `Form1_FormClosing` 方法\n\n该方法在窗体关闭时调用，用于保存用户设置。\n\n- **保存音量**：将当前音量滑块的值保存到 `appSettings.Volume`。\n- **保存快捷键设置**：清空旧的快捷键设置，并遍历 `shortcutKeyMapping`，保存新的快捷键到 `appSettings.ShortcutKeys`。\n- **保存按钮与音频文件路径映射**：调用 `SaveButtonAudioPaths` 方法来保存音频文件路径的映射。\n- **更新最后登录时间**：将当前时间设置为 `appSettings.LastLoginTime`。\n- **保存设置**：调用 `settingsManager.SaveSettings(appSettings)` 将所有设置保存到文件或数据库中。\n\n### 3. `SaveButtonAudioPaths` 方法\n\n这个方法用于保存按钮与音频文件路径的映射。\n\n- 遍历 `buttonAudioMapping`，对于每个按钮，检查 `appSettings.ButtonAudioFilePaths` 中是否已经有对应的文件路径。如果有，则保留现有路径（逻辑可能需要补充具体路径更新的部分）。\n\n### 4. `ShowLoginForm` 方法\n\n该方法用于处理用户登录逻辑。\n\n- **最后登录时间检查**：从 `settingsManager` 中加载设置，检查 `LastLoginTime` 是否存在且在一天内。如果是，则直接返回，不显示登录窗口。\n- **显示登录窗口**：如果需要登录，创建 `LoginForm` 的实例并传递 `settingsManager`，显示登录对话框。如果用户未成功登录，则关闭主窗口。\n\n\n\n## 四、软件的封装\n\n略...","slug":"音频软件开发_音效助手开发","published":1,"date":"2025-04-13T10:39:03.431Z","updated":"2025-04-13T10:41:44.955Z","comments":1,"layout":"post","photos":[],"_id":"cm9h6j6xw0007sspybnt04k82","content":"<div class=\".article-gallery\"><h2 id=\"一、音频功能的开发\"><a href=\"#一、音频功能的开发\" class=\"headerlink\" title=\"一、音频功能的开发\"></a>一、音频功能的开发</h2><p>核心功能的开发，利用NAudio.dll组件进行开发。</p>\n<h3 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a>委托</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"built_in\">double</span> <span class=\"title\">Cal</span>(<span class=\"params\"><span class=\"built_in\">double</span> x,<span class=\"built_in\">double</span> y</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\">Cal f</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.Write(<span class=\"string\">&quot;请输入X:&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">double</span> x=Convert.ToDouble(Console.ReadLine());</span><br><span class=\"line\">    Console.write(<span class=\"string\">&quot;请输入Y:&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">double</span> y= Convert.ToDouble(Console. ReadLine());<span class=\"comment\">//委托方法工作,怎么工作由具体委托决定</span></span><br><span class=\"line\">    <span class=\"built_in\">double</span> result =f(x, y);</span><br><span class=\"line\">    Console.writeLine(<span class=\"string\">&quot;x: &#123;0&#125;与Y:&#123;1&#125;委托方法计算结果为:&#123;2&#125;&quot;</span>，x,y,result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTest(<span class=\"keyword\">new</span> Cal(Add));</span><br><span class=\"line\">    Test(Add);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"built_in\">double</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"built_in\">double</span> x,<span class=\"built_in\">double</span> y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>将不变的进行封装，将变的隔离起来，让代码更易于维护。</p>\n<blockquote>\n<p><a href=\"/image/weituo\" title=\"image-20241029134923881\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/weituo\" alt=\"image-20241029134923881\"></a></p>\n</blockquote>\n<h4 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h4><p>定义委托</p>\n<p>实例化委托（赋予方法）</p>\n<p>使用委托（输入参数）</p>\n<h4 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h4><p>一种事件触发的模式。当定义某个委托之后，其他的类的方法可以订阅这个委托，然后通过这个委托，来统一触发一系列事件。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyEvent?.Invoke(<span class=\"keyword\">this</span>, e); <span class=\"comment\">// 检查是否有任何订阅者，然后触发事件</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><a href=\"/image/weituo2\" title=\"image-20241029141958516\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/weituo2\" alt=\"image-20241029141958516\"></a></p>\n<p><a href=\"/image/weituo3\" title=\"image-20241029142154108\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/weituo3\" alt=\"image-20241029142154108\"></a></p>\n</blockquote>\n<h4 id=\"委托类型-委托事件\"><a href=\"#委托类型-委托事件\" class=\"headerlink\" title=\"委托类型&#x2F;委托事件\"></a>委托类型&#x2F;委托事件</h4><p>定义：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">event</span> OnGameOver onGameOver;</span><br></pre></td></tr></table></figure>\n\n<p>事件委托和常规委托相同，只是事件委托只能从自己的类中进行调用，其他脚本只能进行订阅或者取消，但是不能触发、更改。这样可以防止其他脚本执行相关操作。</p>\n<h4 id=\"两种预定的事件泛型\"><a href=\"#两种预定的事件泛型\" class=\"headerlink\" title=\"两种预定的事件泛型\"></a>两种预定的事件泛型</h4><p>无返回值：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Action&lt;T1,T2,T3&gt;</span><br></pre></td></tr></table></figure>\n\n<p>有返回值：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Func&lt;T1,T2,T3&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h4><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">() =&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>lambda表达式要和委托，事件联合使用。</p>\n<p>例如：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Func&lt;<span class=\"built_in\">int</span> , <span class=\"built_in\">int</span>&gt; func = x =&gt; x+<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Func&lt;<span class=\"built_in\">int</span> , <span class=\"built_in\">int</span>&gt; func;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">fx</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>再例如：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Action&lt;<span class=\"built_in\">string</span>&gt; action =msg =&gt;Console.WriteLine(msg);</span><br><span class=\"line\"></span><br><span class=\"line\">Action&lt;<span class=\"built_in\">string</span>&gt; action <span class=\"built_in\">string</span> msg =&gt;Console.WriteLine(msg);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h4><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.Click += (s, e) =&gt; Button_Click(button);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandler Click&#123;<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//delegate void System.EventHandler(object sender, System.EventArgs e)表示将用于处理不具有事件数据的事件的方法。</span></span><br></pre></td></tr></table></figure>\n\n<p>以下两种表述都是错误的：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.Click += Button_Click;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.Click += Button_Click(Button button);</span><br></pre></td></tr></table></figure>\n\n<p>因为：</p>\n<p><code>Button_Click</code> 方法的签名与 <code>EventHandler</code> 委托不匹配，使用 <code>button.Click += Button_Click;</code> 将会导致编译错误。</p>\n<p><code>EventHandler</code> 的签名是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">csharp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">void EventHandler(object sender, EventArgs e);</span><br></pre></td></tr></table></figure>\n\n<p>假设 <code>Button_Click</code> 方法的签名是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">csharp复制代码private void Button_Click(Button button)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 处理逻辑</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么在这种情况下，<code>Button_Click</code> 的签名不匹配 <code>EventHandler</code> 委托，因此您不能直接使用方法组来订阅事件。编译器会报错，因为它找不到与 <code>EventHandler</code> 委托匹配的重载。</p>\n<h3 id=\"Hook\"><a href=\"#Hook\" class=\"headerlink\" title=\"Hook\"></a>Hook</h3><p>略…</p>\n<h3 id=\"音频设备识别与获取和切换\"><a href=\"#音频设备识别与获取和切换\" class=\"headerlink\" title=\"音频设备识别与获取和切换\"></a>音频设备识别与获取和切换</h3><p>通过类AudioDeviceManager来实现音频设备的识别。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> NAudio.Wave;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AudioDeviceManager</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;WaveOutCapabilities&gt; <span class=\"title\">GetAudioDevices</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        List&lt;WaveOutCapabilities&gt; devices = <span class=\"keyword\">new</span> List&lt;WaveOutCapabilities&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; WaveOut.DeviceCount; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            devices.Add(WaveOut.GetCapabilities(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> devices;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"public-List-GetAudioDevices-方法\"><a href=\"#public-List-GetAudioDevices-方法\" class=\"headerlink\" title=\"public List GetAudioDevices()方法\"></a>public List<WaveOutCapabilities> GetAudioDevices()方法</h4><p>通常用于获取系统中可用的音频设备列表，并返回一个包含 <code>WaveOutCapabilities</code> 对象的列表。每个 <code>WaveOutCapabilities</code> 对象描述了一个音频输出设备的特性，比如：</p>\n<ul>\n<li>设备名称</li>\n<li>支持的声道数</li>\n<li>采样率</li>\n<li>支持的位深度</li>\n</ul>\n<h4 id=\"WaveOut-DeviceCount\"><a href=\"#WaveOut-DeviceCount\" class=\"headerlink\" title=\"WaveOut.DeviceCount\"></a><code>WaveOut.DeviceCount</code></h4><p>是一个静态属性，用于获取系统中可用的音频输出设备的数量。这个属性返回一个<strong>整数</strong>，表示当前可以用于音频播放的设备总数。可以用它来遍历每个设备，进而获取设备的详细信息。</p>\n<h4 id=\"WaveOut-GetCapabilities-i\"><a href=\"#WaveOut-GetCapabilities-i\" class=\"headerlink\" title=\"WaveOut.GetCapabilities(i)\"></a>WaveOut.GetCapabilities(i)</h4><p>是一个静态方法，用于获取指定索引 <code>i</code> 的音频输出设备的能力（<code>WaveOutCapabilities</code>）。该方法返回一个 <code>WaveOutCapabilities</code> 对象，其中包含有关设备的详细信息，例如：</p>\n<ul>\n<li><strong>设备名称</strong>：音频设备的描述性名称。</li>\n<li><strong>支持的声道数</strong>：设备支持的声道（单声道或立体声）数量。</li>\n<li><strong>最大采样率</strong>：设备支持的最高采样率。</li>\n<li><strong>最大位深度</strong>：设备支持的最高位深度（如16位、24位等）。</li>\n</ul>\n<h4 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h4><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">LoadAudioDevices</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> devices = audioDeviceManager.GetAudioDevices();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> device <span class=\"keyword\">in</span> devices)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        comboBoxDevices.Items.Add(device.ProductName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (comboBoxDevices.Items.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        comboBoxDevices.SelectedIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>LoadAudioDevices</code> 方法的功能是加载系统中的音频设备并将它们添加到下拉框（<code>comboBoxDevices</code>）中。具体步骤如下：</p>\n<ol>\n<li><strong>获取音频设备列表</strong>：调用 <code>audioDeviceManager.GetAudioDevices()</code> 方法，获取可用的音频设备列表。</li>\n<li><strong>添加设备到下拉框</strong>：使用 <code>foreach</code> 循环遍历设备列表，将每个设备的名称（<code>device.ProductName</code>）添加到 <code>comboBoxDevices.Items</code> 中。</li>\n<li><strong>选择第一个设备</strong>：如果下拉框中有设备项（<code>Items.Count</code> 大于 0），将 <code>comboBoxDevices.SelectedIndex</code> 设置为 0，默认选择第一个设备。</li>\n<li>注意事项：<ul>\n<li>确保 <code>audioDeviceManager</code> 已正确初始化。</li>\n<li>如果需要处理没有可用设备的情况，可以考虑在下拉框中显示一条提示信息。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"音频设备的切换\"><a href=\"#音频设备的切换\" class=\"headerlink\" title=\"音频设备的切换\"></a>音频设备的切换</h4><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">comboBoxDevices_SelectedIndexChanged</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveOut != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waveOut.Stop();</span><br><span class=\"line\">        waveOut.Dispose();</span><br><span class=\"line\">        waveOut = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (audioFileReader != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        audioFileReader.Dispose();</span><br><span class=\"line\">        audioFileReader = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(currentFilePath))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waveOut = <span class=\"keyword\">new</span> WaveOutEvent</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            DeviceNumber = comboBoxDevices.SelectedIndex,</span><br><span class=\"line\">            Volume = volumeSlider.Volume</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        audioFileReader = <span class=\"keyword\">new</span> AudioFileReader(currentFilePath);</span><br><span class=\"line\">        waveOut.Init(audioFileReader);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isPlaying)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            waveOut.Play();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个 <code>comboBoxDevices_SelectedIndexChanged</code> 方法的功能是处理用户在设备选择下拉框（<code>comboBoxDevices</code>）中更改选定设备时的逻辑。具体步骤如下：</p>\n<ol>\n<li>**停止并释放现有的 <code>waveOut</code>**：如果 <code>waveOut</code> 不为空，先停止播放并释放其资源。</li>\n<li><strong>释放音频文件读取器</strong>：如果 <code>audioFileReader</code> 不为空，释放其资源。</li>\n<li><strong>检查当前文件路径</strong>：如果 <code>currentFilePath</code> 不为空，则进行下一步：</li>\n<li><strong>创建新的 <code>WaveOutEvent</code> 实例</strong>：<ul>\n<li>设置 <code>DeviceNumber</code> 为所选设备的索引。</li>\n<li>将音量设置为滑块（<code>volumeSlider.Volume</code>）的值。</li>\n</ul>\n</li>\n<li>**初始化 <code>AudioFileReader</code>**：使用当前文件路径创建新的 <code>AudioFileReader</code> 实例，并用其初始化 <code>waveOut</code>。</li>\n<li><strong>播放音频</strong>：如果当前状态为播放（<code>isPlaying</code> 为真），则调用 <code>waveOut.Play()</code> 开始播放。</li>\n</ol>\n<p>注意事项：</p>\n<ul>\n<li>确保在选择新设备时，正确管理资源，防止内存泄漏。</li>\n<li>如果 <code>currentFilePath</code> 可能为空，考虑在此处添加错误处理逻辑。</li>\n</ul>\n<h3 id=\"音频管理系统\"><a href=\"#音频管理系统\" class=\"headerlink\" title=\"音频管理系统\"></a>音频管理系统</h3><h4 id=\"音频文件播放的实现步骤\"><a href=\"#音频文件播放的实现步骤\" class=\"headerlink\" title=\"音频文件播放的实现步骤\"></a>音频文件播放的实现步骤</h4><p><strong>初始化</strong>：在构造函数或初始化方法中实例化 <code>waveOut</code>。</p>\n<p><strong>加载音频数据</strong>：将音频数据加载到 <code>waveOut</code> 中。通常你会使用 <code>AudioFileReader</code> 来读取音频文件。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> audioFile = <span class=\"keyword\">new</span> AudioFileReader(<span class=\"string\">&quot;path/to/audio/file.mp3&quot;</span>);</span><br><span class=\"line\">waveOut.Init(audioFile);</span><br></pre></td></tr></table></figure>\n\n<p><strong>播放音频；</strong></p>\n<p><strong>控制音频</strong>；</p>\n<p><strong>释放资源</strong>：在不再需要时，确保调用 <code>Dispose()</code> 方法释放（waveout和audiofile）资源。</p>\n<h4 id=\"WaveStream\"><a href=\"#WaveStream\" class=\"headerlink\" title=\"WaveStream\"></a><code>WaveStream</code></h4><p>是 NAudio 中的一个基类，用于表示音频数据流，它可以用于处理各种音频格式。</p>\n<p><code>WaveStream</code> 的常见用途：</p>\n<ol>\n<li><strong>加载音频文件</strong>：可以通过继承 <code>WaveStream</code> 的类（如 <code>AudioFileReader</code>）来加载音频文件。</li>\n<li><strong>音频播放</strong>：<code>WaveStream</code> 可以与 <code>WaveOut</code> 或 <code>WaveOutEvent</code> 等输出设备配合使用，以实现音频播放。</li>\n<li><strong>处理流数据</strong>：可以用于处理实时音频流，比如录音或网络音频流。</li>\n</ol>\n<h4 id=\"InitializeButtons\"><a href=\"#InitializeButtons\" class=\"headerlink\" title=\"InitializeButtons()\"></a>InitializeButtons()</h4><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">InitializeButtons</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> button <span class=\"keyword\">in</span> buttonAudioMapping.Keys)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (button != ButtonPlay)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            button.Click += (s, e) =&gt; Button_Click(button);</span><br><span class=\"line\">            button.MouseUp += Button_MouseUp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>点击事件</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.Click += (s, e) =&gt; Button_Click(button);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这行代码为 <code>button</code> 的 <code>Click</code> 事件添加了一个匿名方法（lambda 表达式）。当按钮被点击时，这个匿名方法会被调用。</li>\n<li>在这个方法中，调用了 <code>Button_Click(button)</code>，将当前按钮作为参数传递。这样，你可以在 <code>Button_Click</code> 方法中处理点击事件，使用特定于该按钮的逻辑。</li>\n</ul>\n<blockquote>\n<p>Lambda语法：</p>\n<p>(参数列表)&#x3D;&gt;</p>\n<p>{</p>\n<p>​\t&#x2F;&#x2F;函数体</p>\n<p>}</p>\n<p>​\t&#x2F;&#x2F;“&#x3D;&gt;”意思为goes to。</p>\n</blockquote>\n<h4 id=\"音频播放管理系统\"><a href=\"#音频播放管理系统\" class=\"headerlink\" title=\"音频播放管理系统\"></a>音频播放管理系统</h4><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">byte</span>[] <span class=\"title\">ReadStreamToByteArray</span>(<span class=\"params\">UnmanagedMemoryStream stream</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> memoryStream = <span class=\"keyword\">new</span> MemoryStream())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        stream.CopyTo(memoryStream);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memoryStream.ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">InitializeButtonAudioMapping</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    buttonAudioMapping = <span class=\"keyword\">new</span> Dictionary&lt;Button, MemoryStream&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//笑声</span></span><br><span class=\"line\">        &#123; ButtonPlayPause, <span class=\"keyword\">new</span> MemoryStream(ReadStreamToByteArray(Properties.Resources.SFX_001)) &#125;,<span class=\"comment\">// 继续为其他按钮设置音频文件路径</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">InitializeButtons</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> button <span class=\"keyword\">in</span> buttonAudioMapping.Keys)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (button != ButtonPlay)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            button.Click += (s, e) =&gt; Button_Click(button);</span><br><span class=\"line\">            button.MouseUp += Button_MouseUp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Button_Click</span>(<span class=\"params\">Button button</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HandleButtonClick(button);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">HandleButtonClick</span>(<span class=\"params\">Button button</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!buttonAudioMapping.TryGetValue(button, <span class=\"keyword\">out</span> MemoryStream audioStream))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MessageBox.Show(<span class=\"string\">&quot;音频文件未定义&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveStream == <span class=\"literal\">null</span> || waveOut == <span class=\"literal\">null</span> || isPlaying)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        StartPlayback(audioStream);</span><br><span class=\"line\">        ButtonPlay.BackgroundImage = Properties.Resources.pause;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        StartPlayback(audioStream);</span><br><span class=\"line\">        ButtonPlay.BackgroundImage = Properties.Resources.pause;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">CleanUp</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveOut != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 确保事件处理程序被解绑</span></span><br><span class=\"line\">        waveOut.PlaybackStopped -= OnPlaybackStopped;</span><br><span class=\"line\">        waveOut.Stop();</span><br><span class=\"line\">        waveOut.Dispose();</span><br><span class=\"line\">        waveOut = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (audioFileReader != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        audioFileReader.Dispose();</span><br><span class=\"line\">        audioFileReader = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ButtonPlay_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveOut == <span class=\"literal\">null</span> || waveStream == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buttonAudioMapping.TryGetValue(ButtonPlay, <span class=\"keyword\">out</span> MemoryStream audioStream))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            StartPlayback(audioStream);</span><br><span class=\"line\">            ButtonPlay.BackgroundImage = Properties.Resources.pause;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (waveOut.PlaybackState == PlaybackState.Playing)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            waveOut.Pause();</span><br><span class=\"line\">            isPlaying = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            ButtonPlay.BackgroundImage = Properties.Resources.play;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            waveOut.Play();</span><br><span class=\"line\">            isPlaying = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            ButtonPlay.BackgroundImage = Properties.Resources.pause;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">StartPlayback</span>(<span class=\"params\">MemoryStream audioStream</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    CleanUp();</span><br><span class=\"line\"></span><br><span class=\"line\">    waveOut = <span class=\"keyword\">new</span> WaveOutEvent</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DeviceNumber = comboBoxDevices.SelectedIndex</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重置流位置</span></span><br><span class=\"line\">    audioStream.Seek(<span class=\"number\">0</span>, SeekOrigin.Begin);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 WaveFileReader</span></span><br><span class=\"line\">    waveStream = <span class=\"keyword\">new</span> WaveFileReader(audioStream);</span><br><span class=\"line\">    waveOut.Init(waveStream);</span><br><span class=\"line\">    waveOut.PlaybackStopped += OnPlaybackStopped;</span><br><span class=\"line\"></span><br><span class=\"line\">    waveOut.Play();</span><br><span class=\"line\">    isPlaying = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 确保初始化时更新进度条</span></span><br><span class=\"line\">    trackBarProgress.Maximum = (<span class=\"built_in\">int</span>)waveStream.TotalTime.TotalSeconds;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ChangeAudioFile</span>(<span class=\"params\">Button button</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置只允许选择 .wav 文件</span></span><br><span class=\"line\">    openFileDialog.Filter = <span class=\"string\">&quot;WAV files (*.wav)|*.wav&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (openFileDialog.ShowDialog() == DialogResult.OK)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> newFilePath = openFileDialog.FileName;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查文件扩展名是否为 .wav（如果需要进一步验证）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (System.IO.Path.GetExtension(newFilePath).ToLower() != <span class=\"string\">&quot;.wav&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;只能选择 .wav 格式的文件！&quot;</span>, <span class=\"string\">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        button.Text = System.IO.Path.GetFileNameWithoutExtension(newFilePath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 加载音频文件为 MemoryStream</span></span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] audioBytes = System.IO.File.ReadAllBytes(newFilePath);</span><br><span class=\"line\">        System.IO.MemoryStream audioStream = <span class=\"keyword\">new</span> System.IO.MemoryStream(audioBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新 buttonAudioMapping 字典</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buttonAudioMapping.ContainsKey(button))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            buttonAudioMapping[button].Dispose(); <span class=\"comment\">// 释放旧的 MemoryStream</span></span><br><span class=\"line\">            buttonAudioMapping[button] = audioStream;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            buttonAudioMapping.Add(button, audioStream);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新 appSettings 中的音频文件路径</span></span><br><span class=\"line\">        appSettings.ButtonAudioFilePaths[button.Name] = newFilePath;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自动保存设置</span></span><br><span class=\"line\">        settingsManager.SaveSettings(appSettings);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">OnPlaybackStopped</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, StoppedEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    isPlaying = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查是否正在播放其他音频</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveOut == <span class=\"literal\">null</span> || waveOut.PlaybackState != PlaybackState.Playing)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ButtonPlay.BackgroundImage = Properties.Resources.play; <span class=\"comment\">// 播放图片</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-音频文件加载和映射\"><a href=\"#1-音频文件加载和映射\" class=\"headerlink\" title=\"1.音频文件加载和映射\"></a>1.<strong>音频文件加载和映射</strong></h5><ul>\n<li><code>ReadStreamToByteArray</code> 方法将 <code>UnmanagedMemoryStream</code> 读取到字节数组。</li>\n<li><code>InitializeButtonAudioMapping</code> 方法将音频文件与按钮关联，使用 <code>MemoryStream</code> 存储每个音频文件的内容。</li>\n<li>采用这样的方式储存音频数据原因：</li>\n</ul>\n<p>​\t<strong>内存管理</strong>：通过将音频流读取到 <code>MemoryStream</code> 中，可以更灵活地管理内存。<code>MemoryStream</code> 允许在内存中对音频数据进行快速读写操作，而不需要频繁地访问磁盘文件。</p>\n<p>​\t<strong>易于处理</strong>：在播放音频时，将其存储在内存中可以加快访问速度，因为它避免了每次播放时都去读取文件系统的延迟。这对于用户体验非常重要。</p>\n<p>​\t<strong>数据封装</strong>：使用 <code>ReadStreamToByteArray</code> 方法将音频文件的流转换为字节数组，使得音频文件可以以更加统一的方式存储和使用。这使得将多个按钮与不同的音频文件关联变得简单。</p>\n<p>​\t<strong>资源整合</strong>：<code>Properties.Resources</code> 可以将资源嵌入到程序中，方便管理和访问。将其转换为 <code>MemoryStream</code> 使得你可以在运行时直接从嵌入的资源读取数据。</p>\n<p>​\t<strong>避免硬编码路径</strong>：直接使用嵌入的资源而不是依赖于文件路径，减少了在文件管理上的复杂性，同时也提高了程序的可移植性。</p>\n<p><code>UnmanagedMemoryStream</code> 是 C# 中的一个类，通常用于处理非托管内存中的数据。与常规的 <code>MemoryStream</code> 不同，<code>UnmanagedMemoryStream</code> 主要用于读取和写入存储在非托管内存中的字节数据。这种类型的流适合处理那些不由 .NET 垃圾回收器管理的内存，例如：</p>\n<ol>\n<li><strong>与 P&#x2F;Invoke 交互</strong>：当你需要调用本地 API（如 Windows API）时，通常需要在非托管内存中操作数据。</li>\n<li><strong>处理大数据</strong>：在处理大文件或数据块时，可以使用非托管内存来提高性能，因为它可以减少内存分配的开销。</li>\n<li><strong>性能优化</strong>：由于它直接在非托管内存中操作，可能会在某些情况下提供更好的性能，特别是在与硬件接口或其他语言的代码交互时。</li>\n</ol>\n<p><code>UnmanagedMemoryStream</code> 通常会在以下情况下使用：</p>\n<ul>\n<li>从操作系统或其他低级 API 中获取数据，并在 C# 中处理。</li>\n<li>在 C# 与 C&#x2F;C++ 等语言的互操作中，用于传递指向非托管内存的指针。</li>\n</ul>\n<p>例子</p>\n<p>一个简单的例子是，你可能会在调用某个非托管函数之前，先在非托管内存中分配空间，然后使用 <code>UnmanagedMemoryStream</code> 来读取或写入数据。</p>\n<p>总之，<code>UnmanagedMemoryStream</code> 是一个强大的工具，适用于需要直接操作非托管内存的场景。</p>\n<blockquote>\n<p><strong>非托管内存</strong>是指不由 .NET 垃圾回收器（GC）管理的内存。这种内存通常由应用程序直接分配和释放，主要用于与底层系统或其他语言（如 C&#x2F;C++）交互。以下是一些关于非托管内存的关键点：</p>\n<ol>\n<li><strong>手动管理</strong>：在使用非托管内存时，开发者需要手动分配和释放内存，使用诸如 <code>Marshal.AllocHGlobal</code> 和 <code>Marshal.FreeHGlobal</code> 等方法。</li>\n<li><strong>性能优化</strong>：非托管内存可以用于处理性能要求较高的场景，比如大型数据结构或高频率的数据交互，因为它可以减少内存分配和回收的开销。</li>\n<li><strong>与系统 API 交互</strong>：许多系统级 API 和库（尤其是 C&#x2F;C++ 编写的）需要使用非托管内存，因为它们不理解 .NET 的内存管理模型。</li>\n<li><strong>数据共享</strong>：非托管内存可以用于在不同语言或模块之间共享数据，例如在 C# 和 C&#x2F;C++ 代码之间传递复杂数据结构。</li>\n<li><strong>可能的内存泄漏</strong>：由于需要手动管理，开发者必须小心以避免内存泄漏或未定义行为，这些都是在非托管内存中比较常见的问题。</li>\n</ol>\n<p>在使用非托管内存时，确保了解其管理方式是非常重要的，以确保程序的稳定性和性能。</p>\n</blockquote>\n<blockquote>\n<p><strong><code>out</code> 关键字</strong>：</p>\n<ul>\n<li>表示这是一个输出参数。在方法内部，必须对其进行赋值。</li>\n<li>调用方法时，不需要在外部声明该变量，只需声明它为 <code>out</code> 类型即可。</li>\n</ul>\n<p><strong>用途</strong>：</p>\n<ul>\n<li><code>out</code> 参数通常用于从方法中返回多个值。在 C# 中，一个方法只能返回一个值，但可以通过 <code>out</code> 参数返回额外的信息或结果。</li>\n<li>在你的例子中，<code>audioStream</code> 是一个 <code>MemoryStream</code> 对象，可能用于返回音频数据的流。</li>\n</ul>\n</blockquote>\n<p><strong>数据流的转换</strong></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">byte</span>[] <span class=\"title\">ReadStreamToByteArray</span>(<span class=\"params\">UnmanagedMemoryStream stream</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> memoryStream = <span class=\"keyword\">new</span> MemoryStream())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        stream.CopyTo(memoryStream);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memoryStream.ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码的作用是将一个 <code>UnmanagedMemoryStream</code> 对象的内容复制到一个新的 <code>MemoryStream</code> 中，并返回其字节数组。以下是逐步解析：</p>\n<ol>\n<li><strong><code>using</code> 语句</strong>：确保 <code>memoryStream</code> 在使用完后自动释放资源，即使在发生异常时也能保证资源得到释放。</li>\n<li>**<code>stream.CopyTo(memoryStream)</code>**：将 <code>UnmanagedMemoryStream</code> 的内容复制到 <code>memoryStream</code> 中。<code>CopyTo</code> 方法会从源流读取数据并写入到目标流。</li>\n<li>**<code>memoryStream.ToArray()</code>**：将 <code>memoryStream</code> 中的内容转换为字节数组并返回。</li>\n</ol>\n<blockquote>\n<p><code>using</code> 语句在 C# 中用于确保对象在使用完后能够自动释放其占用的资源。主要有以下几个作用：</p>\n<ol>\n<li><strong>自动释放资源</strong>：<code>using</code> 语句会在代码块结束时自动调用对象的 <code>Dispose</code> 方法，释放资源。这在处理需要显式释放资源的对象（如文件流、数据库连接、图形资源等）时特别重要。</li>\n<li><strong>简化代码</strong>：通过使用 <code>using</code>，你不需要显式调用 <code>Dispose</code>，这样可以减少代码的复杂性，并提高可读性。</li>\n<li><strong>异常安全</strong>：即使在 <code>using</code> 语句块中发生异常，<code>Dispose</code> 仍然会被调用，确保资源得到正确释放，从而避免内存泄漏。</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>以下是一个简单的示例，展示了如何使用 <code>using</code> 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">csharp复制代码using (var fileStream = new FileStream(&quot;example.txt&quot;, FileMode.Open))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 进行文件操作</span><br><span class=\"line\">&#125; // 这里会自动调用 fileStream.Dispose()</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>fileStream</code> 会在 <code>using</code> 块结束后自动关闭，无需手动调用 <code>fileStream.Close()</code> 或 <code>fileStream.Dispose()</code>。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><code>using</code> 语句只能用于实现了 <code>IDisposable</code> 接口的对象。</li>\n<li>如果对象在 <code>using</code> 块之外的地方仍然被引用，确保对象不会被重复释放。</li>\n</ul>\n</blockquote>\n<p>Dcitionary.Keys返回的是，所有key的集合Dictionary2，值的类型和Dictionary中key的类型一致。</p>\n<h5 id=\"2-音频播放逻辑实现\"><a href=\"#2-音频播放逻辑实现\" class=\"headerlink\" title=\"2.音频播放逻辑实现\"></a>2.音频播放逻辑实现</h5><p>button_click → handle(判断能否播放) → cleanup(释放上一次播放的内存)  → startplay(开始播放)</p>\n<p>音频储存方式变化：audiostream                                                                      → wavestream(可以利用wave的play功能)</p>\n<p><strong><code>out</code> 关键字</strong>：</p>\n<ul>\n<li>表示这是一个输出参数。在<u>方法内部</u>，必须对其进行赋值。</li>\n<li>调用方法时，<u>不需要在外部声明该变量</u>，只需声明它为 <code>out</code> 类型即可。</li>\n</ul>\n<p><strong>用途</strong>：</p>\n<ul>\n<li><code>out</code> 参数通常用于从方法中返回多个值。在 C# 中，一个方法只能返回一个值，但可以通过 <code>out</code> 参数返回额外的信息或结果。</li>\n<li>在例子中，<code>audioStream</code> 是一个 <code>MemoryStream</code> 对象，可能用于返回音频数据的流。</li>\n</ul>\n<p>在这个例子中，<code>TryGetValue</code> 方法尝试从文件中读取音频流，并通过 <code>out</code> 参数返回 <code>MemoryStream</code> 对象。如果成功，调用者可以使用这个流；如果失败，流会被设置为 <code>null</code>。</p>\n<blockquote>\n<h3 id=\"WaveFileReader-与-AudioFileReader-的区别\"><a href=\"#WaveFileReader-与-AudioFileReader-的区别\" class=\"headerlink\" title=\"WaveFileReader 与 AudioFileReader 的区别\"></a><code>WaveFileReader</code> 与 <code>AudioFileReader</code> 的区别</h3><ol>\n<li>**<code>WaveFileReader</code>**：<ul>\n<li>专门用于读取 <code>.wav</code> 文件格式。</li>\n<li>提供对 WAV 文件的解析，包括文件头、采样率、通道数等信息。</li>\n<li>适用于需要处理纯 WAV 数据的场景。</li>\n</ul>\n</li>\n<li>**<code>AudioFileReader</code>**：<ul>\n<li>更通用，能够处理多种音频格式（如 WAV、MP3、AAC 等）。</li>\n<li>内部会根据文件格式自动解码并转换为 PCM 数据。</li>\n<li>适合需要处理不同音频格式的场景。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ul>\n<li>如果你只处理 WAV 文件，使用 <code>WaveFileReader</code> 可以更高效，因为它针对这种格式进行了优化。</li>\n<li>如果你的应用需要支持多种音频格式，使用 <code>AudioFileReader</code> 会更方便，因为它可以自动处理多种类型的音频数据。</li>\n</ul>\n</blockquote>\n<h5 id=\"3-播放文件选择\"><a href=\"#3-播放文件选择\" class=\"headerlink\" title=\"3.播放文件选择\"></a>3.播放文件选择</h5><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ChangeAudioFile</span>(<span class=\"params\">Button button</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置只允许选择 .wav 文件</span></span><br><span class=\"line\">    openFileDialog.Filter = <span class=\"string\">&quot;WAV files (*.wav)|*.wav&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (openFileDialog.ShowDialog() == DialogResult.OK)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> newFilePath = openFileDialog.FileName;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查文件扩展名是否为 .wav（如果需要进一步验证）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (System.IO.Path.GetExtension(newFilePath).ToLower() != <span class=\"string\">&quot;.wav&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;只能选择 .wav 格式的文件！&quot;</span>, <span class=\"string\">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        button.Text = System.IO.Path.GetFileNameWithoutExtension(newFilePath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 加载音频文件为 MemoryStream</span></span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] audioBytes = System.IO.File.ReadAllBytes(newFilePath);</span><br><span class=\"line\">        System.IO.MemoryStream audioStream = <span class=\"keyword\">new</span> System.IO.MemoryStream(audioBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新 buttonAudioMapping 字典</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buttonAudioMapping.ContainsKey(button))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            buttonAudioMapping[button].Dispose(); <span class=\"comment\">// 释放旧的 MemoryStream</span></span><br><span class=\"line\">            buttonAudioMapping[button] = audioStream;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            buttonAudioMapping.Add(button, audioStream);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新 appSettings 中的音频文件路径</span></span><br><span class=\"line\">        appSettings.ButtonAudioFilePaths[button.Name] = newFilePath;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自动保存设置</span></span><br><span class=\"line\">        settingsManager.SaveSettings(appSettings);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>设置文件对话框过滤器</strong>：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openFileDialog.Filter = <span class=\"string\">&quot;WAV files (*.wav)|*.wav&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这行代码设置文件选择对话框只允许选择 <code>.wav</code> 文件。</p>\n<p><strong>显示对话框并检查用户选择</strong>：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (openFileDialog.ShowDialog() == DialogResult.OK)</span><br></pre></td></tr></table></figure>\n\n<p>显示文件对话框，用户选择文件后，如果点击“确定”，则继续执行后续代码。</p>\n<p><strong>获取选择的文件路径</strong>：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> newFilePath = openFileDialog.FileName;</span><br></pre></td></tr></table></figure>\n\n<p><strong>检查文件扩展名</strong>（可选）：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (System.IO.Path.GetExtension(newFilePath).ToLower() != <span class=\"string\">&quot;.wav&quot;</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MessageBox.Show(<span class=\"string\">&quot;只能选择 .wav 格式的文件！&quot;</span>, <span class=\"string\">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果用户选择的文件不是 <code>.wav</code> 格式，则弹出错误提示，并退出方法。</p>\n<p><strong>更新按钮文本</strong>：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.Text = System.IO.Path.GetFileNameWithoutExtension(newFilePath);</span><br></pre></td></tr></table></figure>\n\n<p>将按钮的文本设置为文件名，不包括扩展名。</p>\n<p>**加载音频文件为 <code>MemoryStream</code>**：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">byte</span>[] audioBytes = System.IO.File.ReadAllBytes(newFilePath);</span><br><span class=\"line\">System.IO.MemoryStream audioStream = <span class=\"keyword\">new</span> System.IO.MemoryStream(audioBytes);</span><br></pre></td></tr></table></figure>\n\n<p>读取选择的音频文件的所有字节，并将其存入一个 <code>MemoryStream</code> 中，以便后续播放。</p>\n<p><strong>更新 <code>buttonAudioMapping</code> 字典</strong>：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (buttonAudioMapping.ContainsKey(button))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    buttonAudioMapping[button].Dispose(); <span class=\"comment\">// 释放旧的 MemoryStream</span></span><br><span class=\"line\">    buttonAudioMapping[button] = audioStream;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    buttonAudioMapping.Add(button, audioStream);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>检查字典中是否已有该按钮的映射。如果有，先释放旧的 <code>MemoryStream</code>，然后更新为新的流；如果没有，直接添加新的映射。</p>\n<p><strong>更新设置中的音频文件路径</strong>：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appSettings.ButtonAudioFilePaths[button.Name] = newFilePath;</span><br></pre></td></tr></table></figure>\n\n<p><strong>自动保存设置</strong>：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">settingsManager.SaveSettings(appSettings);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"音量大小\"><a href=\"#音量大小\" class=\"headerlink\" title=\"音量大小\"></a>音量大小</h4><p>…略</p>\n<h4 id=\"进度条\"><a href=\"#进度条\" class=\"headerlink\" title=\"进度条\"></a>进度条</h4><ol>\n<li><code>Timer_Tick</code> 方法</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Timer_Tick</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveStream != <span class=\"literal\">null</span> &amp;&amp; !isTrackBarDragging)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        trackBarProgress.Maximum = (<span class=\"built_in\">int</span>)waveStream.TotalTime.TotalSeconds;</span><br><span class=\"line\">        trackBarProgress.Value = (<span class=\"built_in\">int</span>)waveStream.CurrentTime.TotalSeconds;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>作用</strong>：在定时器的每次触发时更新进度条的最大值和当前值。</p>\n</li>\n<li><p>逻辑</p>\n<p>：</p>\n<ul>\n<li>如果 <code>waveStream</code> 不为 <code>null</code> 且当前不在拖动进度条（<code>isTrackBarDragging</code> 为 <code>false</code>），则设置进度条的最大值为音频的总时间（秒），并将当前值更新为音频当前播放时间（秒）。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li><code>trackBarProgress_MouseDown</code> 方法</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">trackBarProgress_MouseDown</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    isTrackBarDragging = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>作用</strong>：当用户开始拖动进度条时设置标志。</li>\n<li><strong>逻辑</strong>：将 <code>isTrackBarDragging</code> 设置为 <code>true</code>，表示用户正在拖动进度条，此时不应更新音频的播放位置。</li>\n</ul>\n<ol start=\"3\">\n<li><code>trackBarProgress_MouseUp</code> 方法</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">trackBarProgress_MouseUp</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    isTrackBarDragging = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waveStream.CurrentTime = TimeSpan.FromSeconds(trackBarProgress.Value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>作用</strong>：当用户释放鼠标时停止拖动并更新音频播放位置。</p>\n</li>\n<li><p>逻辑</p>\n<p>：</p>\n<ul>\n<li>将 <code>isTrackBarDragging</code> 设置为 <code>false</code>，表示拖动结束。</li>\n<li>如果 <code>waveStream</code> 不为 <code>null</code>，则根据当前进度条的值更新音频的当前播放时间。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li><code>trackBarProgress_ValueChanged</code> 方法</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">trackBarProgress_ValueChanged</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveStream != <span class=\"literal\">null</span> &amp;&amp; !isTrackBarDragging)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waveStream.CurrentTime = TimeSpan.FromSeconds(trackBarProgress.Value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>作用</strong>：当进度条的值发生变化时更新音频播放位置。</p>\n</li>\n<li><p>逻辑</p>\n<p>：</p>\n<ul>\n<li>如果 <code>waveStream</code> 不为 <code>null</code> 且不在拖动进度条，则根据新的进度条值更新音频的当前播放时间。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、快捷键\"><a href=\"#二、快捷键\" class=\"headerlink\" title=\"二、快捷键\"></a>二、快捷键</h2><h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><h5 id=\"1-右键菜单\"><a href=\"#1-右键菜单\" class=\"headerlink\" title=\"1.右键菜单\"></a>1.右键菜单</h5><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Button_MouseUp</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.Button == MouseButtons.Right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Button button = sender <span class=\"keyword\">as</span> Button;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (button == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        ContextMenuStrip contextMenu = <span class=\"keyword\">new</span> ContextMenuStrip();</span><br><span class=\"line\">        ToolStripMenuItem changeAudioFileMenuItem = <span class=\"keyword\">new</span> ToolStripMenuItem(<span class=\"string\">&quot;更改音频文件&quot;</span>);</span><br><span class=\"line\">        ToolStripMenuItem setShortcutKeyMenuItem = <span class=\"keyword\">new</span> ToolStripMenuItem(<span class=\"string\">&quot;设置快捷键&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        changeAudioFileMenuItem.Click += (s, <span class=\"keyword\">args</span>) =&gt; ChangeAudioFile(button);</span><br><span class=\"line\">        setShortcutKeyMenuItem.Click += SetShortcutKeyMenuItem_Click;</span><br><span class=\"line\"></span><br><span class=\"line\">        contextMenu.Items.Add(changeAudioFileMenuItem);</span><br><span class=\"line\">        contextMenu.Items.Add(setShortcutKeyMenuItem);</span><br><span class=\"line\">        contextMenu.Show(button, e.Location);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>MouseEventArgs</code> 是 .NET 中用于处理鼠标事件的数据类，继承自 <code>EventArgs</code>。它提供了关于鼠标操作的信息，例如鼠标按钮的状态和鼠标指针的位置。</p>\n<p>主要属性</p>\n<ul>\n<li><strong>Button</strong>:<ul>\n<li>类型: <code>MouseButtons</code></li>\n<li>描述: 指示哪个鼠标按钮被按下或释放（如左键、右键或中键）。</li>\n</ul>\n</li>\n<li><strong>Clicks</strong>:<ul>\n<li>类型: <code>int</code></li>\n<li>描述: 指示在事件发生时鼠标点击的次数。</li>\n</ul>\n</li>\n<li><strong>X</strong>:<ul>\n<li>类型: <code>int</code></li>\n<li>描述: 鼠标指针相对于控件左上角的 X 坐标。</li>\n</ul>\n</li>\n<li><strong>Y</strong>:<ul>\n<li>类型: <code>int</code></li>\n<li>描述: 鼠标指针相对于控件左上角的 Y 坐标。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-快捷键设置窗口的实现\"><a href=\"#2-快捷键设置窗口的实现\" class=\"headerlink\" title=\"2.快捷键设置窗口的实现\"></a>2.快捷键设置窗口的实现</h5><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">SetShortcutKeyMenuItem_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ToolStripMenuItem menuItem = sender <span class=\"keyword\">as</span> ToolStripMenuItem;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (menuItem != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ContextMenuStrip owner = menuItem.Owner <span class=\"keyword\">as</span> ContextMenuStrip;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (owner != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Button button = owner.SourceControl <span class=\"keyword\">as</span> Button;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (button != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> shortcutKeyForm = <span class=\"keyword\">new</span> ShortcutKeyForm())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    isSettingShortcutKey = <span class=\"literal\">true</span>; <span class=\"comment\">// 设置状态为正在设置快捷键</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (shortcutKeyForm.ShowDialog() == DialogResult.OK)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Keys selectedKey = shortcutKeyForm.SelectedKey;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 检查快捷键是否已被其他按钮使用</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (shortcutKeyMapping.ContainsKey(selectedKey))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            MessageBox.Show(<span class=\"string\">&quot;此快捷键已被其他按钮使用，请选择其他快捷键。&quot;</span>);</span><br><span class=\"line\">                            isSettingShortcutKey = <span class=\"literal\">false</span>; <span class=\"comment\">// 重置状态</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 如果当前按钮已经设置了快捷键，将其从映射中移除</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> existingKey = shortcutKeyMapping.FirstOrDefault(x =&gt; x.Value == button).Key;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (existingKey != Keys.None)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            shortcutKeyMapping.Remove(existingKey);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 将新的快捷键映射到按钮</span></span><br><span class=\"line\">                        shortcutKeyMapping[selectedKey] = button;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 更新按钮对应的 Label 文本</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (buttonLabelMapping.TryGetValue(button, <span class=\"keyword\">out</span> Label label))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            label.Text = <span class=\"string\">$&quot;快捷键: <span class=\"subst\">&#123;selectedKey&#125;</span>&quot;</span>;</span><br><span class=\"line\">                            label.Visible = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    isSettingShortcutKey = <span class=\"literal\">false</span>; <span class=\"comment\">// 重置状态</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">ShortcutKeyForm</span> : <span class=\"title\">Form</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Keys SelectedKey &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShortcutKeyForm</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        InitializeComponent();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.KeyPreview = <span class=\"literal\">true</span>; <span class=\"comment\">// 使 Form 可以接收按键事件</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Text = <span class=\"string\">&quot;快捷键绑定&quot;</span>; <span class=\"comment\">// 设置窗口标题</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置窗口启动位置为屏幕中心</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.StartPosition = FormStartPosition.CenterScreen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ShortcutKeyForm_KeyDown</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, KeyEventArgs e</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查是否是 &lt;space&gt; 键</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.KeyCode == Keys.Space)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;不能将 &lt;space&gt; 键设置为快捷键。&quot;</span>);</span><br><span class=\"line\">            e.SuppressKeyPress = <span class=\"literal\">true</span>; <span class=\"comment\">// 防止默认行为</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SelectedKey = e.KeyCode;</span><br><span class=\"line\">        lblInstruction.Text = <span class=\"string\">$&quot;按下的键: <span class=\"subst\">&#123;SelectedKey&#125;</span>&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">btnConfirm_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.DialogResult = DialogResult.OK;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-快捷键设置的响应\"><a href=\"#3-快捷键设置的响应\" class=\"headerlink\" title=\"3.快捷键设置的响应\"></a>3.快捷键设置的响应</h5><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"built_in\">bool</span> <span class=\"title\">ProcessCmdKey</span>(<span class=\"params\"><span class=\"keyword\">ref</span> Message msg, Keys keyData</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果正在设置快捷键，并且尝试设置 &lt;space&gt; 键</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSettingShortcutKey)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 取消快捷键设置状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (keyData == Keys.Space)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;不能将 &lt;space&gt; 键设置为快捷键。&quot;</span>);</span><br><span class=\"line\">            isSettingShortcutKey = <span class=\"literal\">false</span>; <span class=\"comment\">// 取消设置状态</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 表示事件已处理</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置其他快捷键</span></span><br><span class=\"line\">        shortcutKey = keyData;</span><br><span class=\"line\">        MessageBox.Show(<span class=\"string\">$&quot;快捷键已设置为: <span class=\"subst\">&#123;shortcutKey&#125;</span>&quot;</span>);</span><br><span class=\"line\">        isSettingShortcutKey = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查快捷键是否已被使用</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shortcutKeyMapping.ContainsKey(shortcutKey))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;此快捷键已被其他按钮使用，请选择其他快捷键。&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将快捷键映射到按钮上</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buttonLabelMapping.TryGetValue(ButtonPlay, <span class=\"keyword\">out</span> Label label))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移除旧的快捷键</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shortcutKeyMapping.ContainsKey(shortcutKey))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                shortcutKeyMapping.Remove(shortcutKey);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            label.Text = <span class=\"string\">$&quot;快捷键: <span class=\"subst\">&#123;shortcutKey&#125;</span>&quot;</span>;</span><br><span class=\"line\">            label.Visible = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            shortcutKeyMapping[shortcutKey] = ButtonPlay; <span class=\"comment\">// 为 ButtonPlay 设置快捷键映射</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 表示事件已处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理 &lt;space&gt; 键，调用 ButtonPlay_Click</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (keyData == Keys.Space)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ButtonPlay_Click(ButtonPlay, EventArgs.Empty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 表示事件已处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查是否启用了快捷键功能</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isShortcutKeyEnabled &amp;&amp; shortcutKeyMapping.TryGetValue(keyData, <span class=\"keyword\">out</span> Button button))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Button_Click(button); <span class=\"comment\">// 触发与快捷键关联的按钮点击事件</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 表示事件已处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 默认处理其他键</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.ProcessCmdKey(<span class=\"keyword\">ref</span> msg, keyData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"全局响应\"><a href=\"#全局响应\" class=\"headerlink\" title=\"全局响应\"></a>全局响应</h4><p>具体来说，代码的主要功能是监控按键按下事件，并在特定的快捷键被按下时触发相应按钮的点击事件。</p>\n<ol>\n<li>常量和委托定义</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"built_in\">int</span> WH_KEYBOARD_LL = <span class=\"number\">13</span>; <span class=\"comment\">// 钩子类型</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"built_in\">int</span> WM_KEYDOWN = <span class=\"number\">0x0100</span>; <span class=\"comment\">// 按键按下消息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">delegate</span> IntPtr <span class=\"title\">LowLevelKeyboardProc</span>(<span class=\"params\"><span class=\"built_in\">int</span> nCode, IntPtr wParam, IntPtr lParam</span>)</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> LowLevelKeyboardProc _proc;</span><br><span class=\"line\"><span class=\"keyword\">private</span> IntPtr _hookID = IntPtr.Zero;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>WH_KEYBOARD_LL</code></strong>: 定义了低级键盘钩子的类型。</li>\n<li><strong><code>WM_KEYDOWN</code></strong>: 定义了键按下的消息。</li>\n<li><strong><code>LowLevelKeyboardProc</code></strong>: 定义了一个委托，用于处理键盘事件的回调方法。</li>\n<li><strong><code>_proc</code> 和 <code>_hookID</code></strong>: 存储钩子回调函数和钩子 ID。</li>\n</ul>\n<ol start=\"2\">\n<li>设置钩子</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">SetHook</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _proc = HookCallback;</span><br><span class=\"line\">    _hookID = SetWindowsHookEx(WH_KEYBOARD_LL, _proc, IntPtr.Zero, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>SetHook</code></strong>: 用于设置全局键盘钩子。</li>\n<li><strong><code>SetWindowsHookEx</code></strong>: 调用 Windows API 设置钩子，传入钩子类型、回调方法和其他参数。</li>\n</ul>\n<ol start=\"3\">\n<li>钩子回调</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> IntPtr <span class=\"title\">HookCallback</span>(<span class=\"params\"><span class=\"built_in\">int</span> nCode, IntPtr wParam, IntPtr lParam</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nCode &gt;= <span class=\"number\">0</span> &amp;&amp; wParam == (IntPtr)WM_KEYDOWN)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Keys key = (Keys)Marshal.ReadInt32(lParam);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查快捷键映射字典</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shortcutKeyMapping.TryGetValue(key, <span class=\"keyword\">out</span> Button button))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 触发与快捷键关联的按钮点击事件</span></span><br><span class=\"line\">            Button_Click(button); <span class=\"comment\">// 替换为你的功能调用</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> CallNextHookEx(_hookID, nCode, wParam, lParam);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong><code>HookCallback</code></strong>: 钩子回调方法，在每次按键事件触发时被调用。</p>\n</li>\n<li><p>逻辑</p>\n<p>：</p>\n<ul>\n<li>检查 <code>nCode</code> 是否大于等于 0（表示有效的事件）。</li>\n<li>检查 <code>wParam</code> 是否为 <code>WM_KEYDOWN</code>（表示按键按下事件）。</li>\n<li>使用 <code>Marshal.ReadInt32</code> 从 <code>lParam</code> 中读取按键值，并检查是否在 <code>shortcutKeyMapping</code> 字典中存在该键。</li>\n<li>如果存在，则触发对应按钮的点击事件。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>卸载钩子</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">UnhookWindowsHookEx</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    UnhookWindowsHookEx(_hookID);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>UnhookWindowsHookEx</code></strong>: 卸载全局键盘钩子，释放资源。</li>\n</ul>\n<ol start=\"5\">\n<li>DLL 导入</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">csharp复制代码[DllImport(&quot;user32.dll&quot;)]</span><br><span class=\"line\">private static extern IntPtr SetWindowsHookEx(int idHook, LowLevelKeyboardProc lpfn, IntPtr hMod, uint dwThreadId);</span><br><span class=\"line\"></span><br><span class=\"line\">[DllImport(&quot;user32.dll&quot;)]</span><br><span class=\"line\">[return: MarshalAs(UnmanagedType.Bool)]</span><br><span class=\"line\">private static extern bool UnhookWindowsHookEx(IntPtr hhk);</span><br><span class=\"line\"></span><br><span class=\"line\">[DllImport(&quot;user32.dll&quot;)]</span><br><span class=\"line\">private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这些 <code>DllImport</code> 属性导入 Windows API 函数，允许 C# 代码调用低级别的钩子功能。</li>\n</ul>\n<ol start=\"6\">\n<li>窗体事件</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnLoad</span>(<span class=\"params\">EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">base</span>.OnLoad(e);</span><br><span class=\"line\">    SetHook();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnFormClosing</span>(<span class=\"params\">FormClosingEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    UnhookWindowsHookEx();</span><br><span class=\"line\">    <span class=\"keyword\">base</span>.OnFormClosing(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>OnLoad</code></strong>: 在窗体加载时设置钩子。</li>\n<li><strong><code>OnFormClosing</code></strong>: 在窗体关闭时卸载钩子，防止资源泄露。</li>\n</ul>\n<h2 id=\"三、操作存储\"><a href=\"#三、操作存储\" class=\"headerlink\" title=\"三、操作存储\"></a>三、操作存储</h2><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ApplySettings</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置快捷键</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> kvp <span class=\"keyword\">in</span> appSettings.ShortcutKeys)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> buttonName = kvp.Key;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> key = kvp.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查找与按钮名称对应的按钮控件</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> button = <span class=\"keyword\">this</span>.Controls.Find(buttonName, <span class=\"literal\">true</span>).FirstOrDefault() <span class=\"keyword\">as</span> Button;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (button != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shortcutKeyMapping.ContainsKey(key))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                shortcutKeyMapping.Remove(key); <span class=\"comment\">// 移除旧的键映射</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            shortcutKeyMapping[key] = button;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (buttonLabelMapping.TryGetValue(button, <span class=\"keyword\">out</span> Label label))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                label.Text = <span class=\"string\">$&quot;快捷键: <span class=\"subst\">&#123;key&#125;</span>&quot;</span>;</span><br><span class=\"line\">                label.Visible = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置音量</span></span><br><span class=\"line\">    volumeSlider.Volume = appSettings.Volume;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加载按钮和音频文件路径映射</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> kvp <span class=\"keyword\">in</span> appSettings.ButtonAudioFilePaths)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> buttonName = kvp.Key;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> filePath = kvp.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> button = <span class=\"keyword\">this</span>.Controls.Find(buttonName, <span class=\"literal\">true</span>).FirstOrDefault() <span class=\"keyword\">as</span> Button;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (button != <span class=\"literal\">null</span> &amp;&amp; File.Exists(filePath))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">byte</span>[] audioBytes = File.ReadAllBytes(filePath);</span><br><span class=\"line\">            MemoryStream audioStream = <span class=\"keyword\">new</span> MemoryStream(audioBytes);</span><br><span class=\"line\">            buttonAudioMapping[button] = audioStream;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 更新按钮文本为文件名（不包括扩展名）</span></span><br><span class=\"line\">            button.Text = Path.GetFileNameWithoutExtension(filePath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Form1_FormClosing</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, FormClosingEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保存音量</span></span><br><span class=\"line\">    appSettings.Volume = volumeSlider.Volume;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存快捷键设置</span></span><br><span class=\"line\">    appSettings.ShortcutKeys.Clear();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> kvp <span class=\"keyword\">in</span> shortcutKeyMapping)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> key = kvp.Key;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> button = kvp.Value;</span><br><span class=\"line\">        appSettings.ShortcutKeys[button.Name] = key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存按钮和音频文件路径映射</span></span><br><span class=\"line\">    SaveButtonAudioPaths();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新 LastLoginTime</span></span><br><span class=\"line\">    appSettings.LastLoginTime = DateTime.Now;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存设置</span></span><br><span class=\"line\">    settingsManager.SaveSettings(appSettings);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">SaveButtonAudioPaths</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> kvp <span class=\"keyword\">in</span> buttonAudioMapping)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> button = kvp.Key;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (appSettings.ButtonAudioFilePaths.TryGetValue(button.Name, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> existingFilePath))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果已经有文件路径存在，使用现有路径</span></span><br><span class=\"line\">            appSettings.ButtonAudioFilePaths[button.Name] = existingFilePath;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ShowLoginForm</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DateTime lastLoginTime = DateTime.MinValue; <span class=\"comment\">// 初始化变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 SettingsManager 加载设置</span></span><br><span class=\"line\">    AppSettings settings = settingsManager.LoadSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查 LastLoginTime 是否存在和非空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (settings.LastLoginTime.HasValue &amp;&amp; DateTime.Now - settings.LastLoginTime.Value &lt; TimeSpan.FromDays(<span class=\"number\">1</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>; <span class=\"comment\">// 如果上次登录时间在一天内，则不显示登录窗口</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建 LoginForm 实例并传递 SettingsManager</span></span><br><span class=\"line\">    LoginForm loginForm = <span class=\"keyword\">new</span> LoginForm(settingsManager);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loginForm.ShowDialog() != DialogResult.OK)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果登录不成功，关闭主窗口</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-ApplySettings-方法\"><a href=\"#1-ApplySettings-方法\" class=\"headerlink\" title=\"1. ApplySettings 方法\"></a>1. <code>ApplySettings</code> 方法</h3><p>该方法用于应用之前保存的设置，包括快捷键、音量和按钮与音频文件路径的映射。</p>\n<ul>\n<li><strong>快捷键设置</strong>：<ul>\n<li>遍历 <code>appSettings.ShortcutKeys</code> 字典，查找与按钮名称对应的按钮控件。</li>\n<li>如果按钮存在，移除旧的键映射，并将新映射添加到 <code>shortcutKeyMapping</code> 中。</li>\n<li>更新按钮对应的标签，显示当前快捷键。</li>\n</ul>\n</li>\n<li><strong>音量设置</strong>：<ul>\n<li>将音量滑块的值设置为保存的音量。</li>\n</ul>\n</li>\n<li><strong>音频文件路径加载</strong>：<ul>\n<li>遍历 <code>appSettings.ButtonAudioFilePaths</code> 字典，查找与按钮名称对应的音频文件路径。</li>\n<li>如果文件存在，则读取音频文件，存入 <code>buttonAudioMapping</code> 字典中，并更新按钮文本为文件名（不包括扩展名）。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-Form1-FormClosing-方法\"><a href=\"#2-Form1-FormClosing-方法\" class=\"headerlink\" title=\"2. Form1_FormClosing 方法\"></a>2. <code>Form1_FormClosing</code> 方法</h3><p>该方法在窗体关闭时调用，用于保存用户设置。</p>\n<ul>\n<li><strong>保存音量</strong>：将当前音量滑块的值保存到 <code>appSettings.Volume</code>。</li>\n<li><strong>保存快捷键设置</strong>：清空旧的快捷键设置，并遍历 <code>shortcutKeyMapping</code>，保存新的快捷键到 <code>appSettings.ShortcutKeys</code>。</li>\n<li><strong>保存按钮与音频文件路径映射</strong>：调用 <code>SaveButtonAudioPaths</code> 方法来保存音频文件路径的映射。</li>\n<li><strong>更新最后登录时间</strong>：将当前时间设置为 <code>appSettings.LastLoginTime</code>。</li>\n<li><strong>保存设置</strong>：调用 <code>settingsManager.SaveSettings(appSettings)</code> 将所有设置保存到文件或数据库中。</li>\n</ul>\n<h3 id=\"3-SaveButtonAudioPaths-方法\"><a href=\"#3-SaveButtonAudioPaths-方法\" class=\"headerlink\" title=\"3. SaveButtonAudioPaths 方法\"></a>3. <code>SaveButtonAudioPaths</code> 方法</h3><p>这个方法用于保存按钮与音频文件路径的映射。</p>\n<ul>\n<li>遍历 <code>buttonAudioMapping</code>，对于每个按钮，检查 <code>appSettings.ButtonAudioFilePaths</code> 中是否已经有对应的文件路径。如果有，则保留现有路径（逻辑可能需要补充具体路径更新的部分）。</li>\n</ul>\n<h3 id=\"4-ShowLoginForm-方法\"><a href=\"#4-ShowLoginForm-方法\" class=\"headerlink\" title=\"4. ShowLoginForm 方法\"></a>4. <code>ShowLoginForm</code> 方法</h3><p>该方法用于处理用户登录逻辑。</p>\n<ul>\n<li><strong>最后登录时间检查</strong>：从 <code>settingsManager</code> 中加载设置，检查 <code>LastLoginTime</code> 是否存在且在一天内。如果是，则直接返回，不显示登录窗口。</li>\n<li><strong>显示登录窗口</strong>：如果需要登录，创建 <code>LoginForm</code> 的实例并传递 <code>settingsManager</code>，显示登录对话框。如果用户未成功登录，则关闭主窗口。</li>\n</ul>\n<h2 id=\"四、软件的封装\"><a href=\"#四、软件的封装\" class=\"headerlink\" title=\"四、软件的封装\"></a>四、软件的封装</h2><p>略…</p>\n</div>","excerpt":"","more":"<div class=\".article-gallery\"><h2 id=\"一、音频功能的开发\"><a href=\"#一、音频功能的开发\" class=\"headerlink\" title=\"一、音频功能的开发\"></a>一、音频功能的开发</h2><p>核心功能的开发，利用NAudio.dll组件进行开发。</p>\n<h3 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a>委托</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">delegate</span> <span class=\"built_in\">double</span> <span class=\"title\">Cal</span>(<span class=\"params\"><span class=\"built_in\">double</span> x,<span class=\"built_in\">double</span> y</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\">Cal f</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.Write(<span class=\"string\">&quot;请输入X:&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">double</span> x=Convert.ToDouble(Console.ReadLine());</span><br><span class=\"line\">    Console.write(<span class=\"string\">&quot;请输入Y:&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">double</span> y= Convert.ToDouble(Console. ReadLine());<span class=\"comment\">//委托方法工作,怎么工作由具体委托决定</span></span><br><span class=\"line\">    <span class=\"built_in\">double</span> result =f(x, y);</span><br><span class=\"line\">    Console.writeLine(<span class=\"string\">&quot;x: &#123;0&#125;与Y:&#123;1&#125;委托方法计算结果为:&#123;2&#125;&quot;</span>，x,y,result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tTest(<span class=\"keyword\">new</span> Cal(Add));</span><br><span class=\"line\">    Test(Add);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"built_in\">double</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"built_in\">double</span> x,<span class=\"built_in\">double</span> y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>将不变的进行封装，将变的隔离起来，让代码更易于维护。</p>\n<blockquote>\n<p><a href=\"/image/weituo\" title=\"image-20241029134923881\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/weituo\" alt=\"image-20241029134923881\"></a></p>\n</blockquote>\n<h4 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h4><p>定义委托</p>\n<p>实例化委托（赋予方法）</p>\n<p>使用委托（输入参数）</p>\n<h4 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h4><p>一种事件触发的模式。当定义某个委托之后，其他的类的方法可以订阅这个委托，然后通过这个委托，来统一触发一系列事件。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyEvent?.Invoke(<span class=\"keyword\">this</span>, e); <span class=\"comment\">// 检查是否有任何订阅者，然后触发事件</span></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><a href=\"/image/weituo2\" title=\"image-20241029141958516\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/weituo2\" alt=\"image-20241029141958516\"></a></p>\n<p><a href=\"/image/weituo3\" title=\"image-20241029142154108\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/weituo3\" alt=\"image-20241029142154108\"></a></p>\n</blockquote>\n<h4 id=\"委托类型-委托事件\"><a href=\"#委托类型-委托事件\" class=\"headerlink\" title=\"委托类型&#x2F;委托事件\"></a>委托类型&#x2F;委托事件</h4><p>定义：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">event</span> OnGameOver onGameOver;</span><br></pre></td></tr></table></figure>\n\n<p>事件委托和常规委托相同，只是事件委托只能从自己的类中进行调用，其他脚本只能进行订阅或者取消，但是不能触发、更改。这样可以防止其他脚本执行相关操作。</p>\n<h4 id=\"两种预定的事件泛型\"><a href=\"#两种预定的事件泛型\" class=\"headerlink\" title=\"两种预定的事件泛型\"></a>两种预定的事件泛型</h4><p>无返回值：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Action&lt;T1,T2,T3&gt;</span><br></pre></td></tr></table></figure>\n\n<p>有返回值：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Func&lt;T1,T2,T3&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h4><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">() =&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>lambda表达式要和委托，事件联合使用。</p>\n<p>例如：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Func&lt;<span class=\"built_in\">int</span> , <span class=\"built_in\">int</span>&gt; func = x =&gt; x+<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Func&lt;<span class=\"built_in\">int</span> , <span class=\"built_in\">int</span>&gt; func;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">fx</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>再例如：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Action&lt;<span class=\"built_in\">string</span>&gt; action =msg =&gt;Console.WriteLine(msg);</span><br><span class=\"line\"></span><br><span class=\"line\">Action&lt;<span class=\"built_in\">string</span>&gt; action <span class=\"built_in\">string</span> msg =&gt;Console.WriteLine(msg);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h4><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.Click += (s, e) =&gt; Button_Click(button);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">event</span> EventHandler Click&#123;<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//delegate void System.EventHandler(object sender, System.EventArgs e)表示将用于处理不具有事件数据的事件的方法。</span></span><br></pre></td></tr></table></figure>\n\n<p>以下两种表述都是错误的：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.Click += Button_Click;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.Click += Button_Click(Button button);</span><br></pre></td></tr></table></figure>\n\n<p>因为：</p>\n<p><code>Button_Click</code> 方法的签名与 <code>EventHandler</code> 委托不匹配，使用 <code>button.Click += Button_Click;</code> 将会导致编译错误。</p>\n<p><code>EventHandler</code> 的签名是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">csharp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">复制代码</span><br><span class=\"line\">void EventHandler(object sender, EventArgs e);</span><br></pre></td></tr></table></figure>\n\n<p>假设 <code>Button_Click</code> 方法的签名是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">csharp复制代码private void Button_Click(Button button)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 处理逻辑</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么在这种情况下，<code>Button_Click</code> 的签名不匹配 <code>EventHandler</code> 委托，因此您不能直接使用方法组来订阅事件。编译器会报错，因为它找不到与 <code>EventHandler</code> 委托匹配的重载。</p>\n<h3 id=\"Hook\"><a href=\"#Hook\" class=\"headerlink\" title=\"Hook\"></a>Hook</h3><p>略…</p>\n<h3 id=\"音频设备识别与获取和切换\"><a href=\"#音频设备识别与获取和切换\" class=\"headerlink\" title=\"音频设备识别与获取和切换\"></a>音频设备识别与获取和切换</h3><p>通过类AudioDeviceManager来实现音频设备的识别。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> NAudio.Wave;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AudioDeviceManager</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;WaveOutCapabilities&gt; <span class=\"title\">GetAudioDevices</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        List&lt;WaveOutCapabilities&gt; devices = <span class=\"keyword\">new</span> List&lt;WaveOutCapabilities&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; WaveOut.DeviceCount; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            devices.Add(WaveOut.GetCapabilities(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> devices;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"public-List-GetAudioDevices-方法\"><a href=\"#public-List-GetAudioDevices-方法\" class=\"headerlink\" title=\"public List GetAudioDevices()方法\"></a>public List<WaveOutCapabilities> GetAudioDevices()方法</h4><p>通常用于获取系统中可用的音频设备列表，并返回一个包含 <code>WaveOutCapabilities</code> 对象的列表。每个 <code>WaveOutCapabilities</code> 对象描述了一个音频输出设备的特性，比如：</p>\n<ul>\n<li>设备名称</li>\n<li>支持的声道数</li>\n<li>采样率</li>\n<li>支持的位深度</li>\n</ul>\n<h4 id=\"WaveOut-DeviceCount\"><a href=\"#WaveOut-DeviceCount\" class=\"headerlink\" title=\"WaveOut.DeviceCount\"></a><code>WaveOut.DeviceCount</code></h4><p>是一个静态属性，用于获取系统中可用的音频输出设备的数量。这个属性返回一个<strong>整数</strong>，表示当前可以用于音频播放的设备总数。可以用它来遍历每个设备，进而获取设备的详细信息。</p>\n<h4 id=\"WaveOut-GetCapabilities-i\"><a href=\"#WaveOut-GetCapabilities-i\" class=\"headerlink\" title=\"WaveOut.GetCapabilities(i)\"></a>WaveOut.GetCapabilities(i)</h4><p>是一个静态方法，用于获取指定索引 <code>i</code> 的音频输出设备的能力（<code>WaveOutCapabilities</code>）。该方法返回一个 <code>WaveOutCapabilities</code> 对象，其中包含有关设备的详细信息，例如：</p>\n<ul>\n<li><strong>设备名称</strong>：音频设备的描述性名称。</li>\n<li><strong>支持的声道数</strong>：设备支持的声道（单声道或立体声）数量。</li>\n<li><strong>最大采样率</strong>：设备支持的最高采样率。</li>\n<li><strong>最大位深度</strong>：设备支持的最高位深度（如16位、24位等）。</li>\n</ul>\n<h4 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h4><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">LoadAudioDevices</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> devices = audioDeviceManager.GetAudioDevices();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> device <span class=\"keyword\">in</span> devices)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        comboBoxDevices.Items.Add(device.ProductName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (comboBoxDevices.Items.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        comboBoxDevices.SelectedIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>LoadAudioDevices</code> 方法的功能是加载系统中的音频设备并将它们添加到下拉框（<code>comboBoxDevices</code>）中。具体步骤如下：</p>\n<ol>\n<li><strong>获取音频设备列表</strong>：调用 <code>audioDeviceManager.GetAudioDevices()</code> 方法，获取可用的音频设备列表。</li>\n<li><strong>添加设备到下拉框</strong>：使用 <code>foreach</code> 循环遍历设备列表，将每个设备的名称（<code>device.ProductName</code>）添加到 <code>comboBoxDevices.Items</code> 中。</li>\n<li><strong>选择第一个设备</strong>：如果下拉框中有设备项（<code>Items.Count</code> 大于 0），将 <code>comboBoxDevices.SelectedIndex</code> 设置为 0，默认选择第一个设备。</li>\n<li>注意事项：<ul>\n<li>确保 <code>audioDeviceManager</code> 已正确初始化。</li>\n<li>如果需要处理没有可用设备的情况，可以考虑在下拉框中显示一条提示信息。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"音频设备的切换\"><a href=\"#音频设备的切换\" class=\"headerlink\" title=\"音频设备的切换\"></a>音频设备的切换</h4><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">comboBoxDevices_SelectedIndexChanged</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveOut != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waveOut.Stop();</span><br><span class=\"line\">        waveOut.Dispose();</span><br><span class=\"line\">        waveOut = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (audioFileReader != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        audioFileReader.Dispose();</span><br><span class=\"line\">        audioFileReader = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(currentFilePath))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waveOut = <span class=\"keyword\">new</span> WaveOutEvent</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            DeviceNumber = comboBoxDevices.SelectedIndex,</span><br><span class=\"line\">            Volume = volumeSlider.Volume</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        audioFileReader = <span class=\"keyword\">new</span> AudioFileReader(currentFilePath);</span><br><span class=\"line\">        waveOut.Init(audioFileReader);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isPlaying)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            waveOut.Play();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个 <code>comboBoxDevices_SelectedIndexChanged</code> 方法的功能是处理用户在设备选择下拉框（<code>comboBoxDevices</code>）中更改选定设备时的逻辑。具体步骤如下：</p>\n<ol>\n<li>**停止并释放现有的 <code>waveOut</code>**：如果 <code>waveOut</code> 不为空，先停止播放并释放其资源。</li>\n<li><strong>释放音频文件读取器</strong>：如果 <code>audioFileReader</code> 不为空，释放其资源。</li>\n<li><strong>检查当前文件路径</strong>：如果 <code>currentFilePath</code> 不为空，则进行下一步：</li>\n<li><strong>创建新的 <code>WaveOutEvent</code> 实例</strong>：<ul>\n<li>设置 <code>DeviceNumber</code> 为所选设备的索引。</li>\n<li>将音量设置为滑块（<code>volumeSlider.Volume</code>）的值。</li>\n</ul>\n</li>\n<li>**初始化 <code>AudioFileReader</code>**：使用当前文件路径创建新的 <code>AudioFileReader</code> 实例，并用其初始化 <code>waveOut</code>。</li>\n<li><strong>播放音频</strong>：如果当前状态为播放（<code>isPlaying</code> 为真），则调用 <code>waveOut.Play()</code> 开始播放。</li>\n</ol>\n<p>注意事项：</p>\n<ul>\n<li>确保在选择新设备时，正确管理资源，防止内存泄漏。</li>\n<li>如果 <code>currentFilePath</code> 可能为空，考虑在此处添加错误处理逻辑。</li>\n</ul>\n<h3 id=\"音频管理系统\"><a href=\"#音频管理系统\" class=\"headerlink\" title=\"音频管理系统\"></a>音频管理系统</h3><h4 id=\"音频文件播放的实现步骤\"><a href=\"#音频文件播放的实现步骤\" class=\"headerlink\" title=\"音频文件播放的实现步骤\"></a>音频文件播放的实现步骤</h4><p><strong>初始化</strong>：在构造函数或初始化方法中实例化 <code>waveOut</code>。</p>\n<p><strong>加载音频数据</strong>：将音频数据加载到 <code>waveOut</code> 中。通常你会使用 <code>AudioFileReader</code> 来读取音频文件。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> audioFile = <span class=\"keyword\">new</span> AudioFileReader(<span class=\"string\">&quot;path/to/audio/file.mp3&quot;</span>);</span><br><span class=\"line\">waveOut.Init(audioFile);</span><br></pre></td></tr></table></figure>\n\n<p><strong>播放音频；</strong></p>\n<p><strong>控制音频</strong>；</p>\n<p><strong>释放资源</strong>：在不再需要时，确保调用 <code>Dispose()</code> 方法释放（waveout和audiofile）资源。</p>\n<h4 id=\"WaveStream\"><a href=\"#WaveStream\" class=\"headerlink\" title=\"WaveStream\"></a><code>WaveStream</code></h4><p>是 NAudio 中的一个基类，用于表示音频数据流，它可以用于处理各种音频格式。</p>\n<p><code>WaveStream</code> 的常见用途：</p>\n<ol>\n<li><strong>加载音频文件</strong>：可以通过继承 <code>WaveStream</code> 的类（如 <code>AudioFileReader</code>）来加载音频文件。</li>\n<li><strong>音频播放</strong>：<code>WaveStream</code> 可以与 <code>WaveOut</code> 或 <code>WaveOutEvent</code> 等输出设备配合使用，以实现音频播放。</li>\n<li><strong>处理流数据</strong>：可以用于处理实时音频流，比如录音或网络音频流。</li>\n</ol>\n<h4 id=\"InitializeButtons\"><a href=\"#InitializeButtons\" class=\"headerlink\" title=\"InitializeButtons()\"></a>InitializeButtons()</h4><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">InitializeButtons</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> button <span class=\"keyword\">in</span> buttonAudioMapping.Keys)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (button != ButtonPlay)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            button.Click += (s, e) =&gt; Button_Click(button);</span><br><span class=\"line\">            button.MouseUp += Button_MouseUp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>点击事件</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.Click += (s, e) =&gt; Button_Click(button);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这行代码为 <code>button</code> 的 <code>Click</code> 事件添加了一个匿名方法（lambda 表达式）。当按钮被点击时，这个匿名方法会被调用。</li>\n<li>在这个方法中，调用了 <code>Button_Click(button)</code>，将当前按钮作为参数传递。这样，你可以在 <code>Button_Click</code> 方法中处理点击事件，使用特定于该按钮的逻辑。</li>\n</ul>\n<blockquote>\n<p>Lambda语法：</p>\n<p>(参数列表)&#x3D;&gt;</p>\n<p>{</p>\n<p>​\t&#x2F;&#x2F;函数体</p>\n<p>}</p>\n<p>​\t&#x2F;&#x2F;“&#x3D;&gt;”意思为goes to。</p>\n</blockquote>\n<h4 id=\"音频播放管理系统\"><a href=\"#音频播放管理系统\" class=\"headerlink\" title=\"音频播放管理系统\"></a>音频播放管理系统</h4><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">byte</span>[] <span class=\"title\">ReadStreamToByteArray</span>(<span class=\"params\">UnmanagedMemoryStream stream</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> memoryStream = <span class=\"keyword\">new</span> MemoryStream())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        stream.CopyTo(memoryStream);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memoryStream.ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">InitializeButtonAudioMapping</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    buttonAudioMapping = <span class=\"keyword\">new</span> Dictionary&lt;Button, MemoryStream&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//笑声</span></span><br><span class=\"line\">        &#123; ButtonPlayPause, <span class=\"keyword\">new</span> MemoryStream(ReadStreamToByteArray(Properties.Resources.SFX_001)) &#125;,<span class=\"comment\">// 继续为其他按钮设置音频文件路径</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">InitializeButtons</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> button <span class=\"keyword\">in</span> buttonAudioMapping.Keys)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (button != ButtonPlay)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            button.Click += (s, e) =&gt; Button_Click(button);</span><br><span class=\"line\">            button.MouseUp += Button_MouseUp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Button_Click</span>(<span class=\"params\">Button button</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HandleButtonClick(button);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">HandleButtonClick</span>(<span class=\"params\">Button button</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!buttonAudioMapping.TryGetValue(button, <span class=\"keyword\">out</span> MemoryStream audioStream))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MessageBox.Show(<span class=\"string\">&quot;音频文件未定义&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveStream == <span class=\"literal\">null</span> || waveOut == <span class=\"literal\">null</span> || isPlaying)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        StartPlayback(audioStream);</span><br><span class=\"line\">        ButtonPlay.BackgroundImage = Properties.Resources.pause;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        StartPlayback(audioStream);</span><br><span class=\"line\">        ButtonPlay.BackgroundImage = Properties.Resources.pause;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">CleanUp</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveOut != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 确保事件处理程序被解绑</span></span><br><span class=\"line\">        waveOut.PlaybackStopped -= OnPlaybackStopped;</span><br><span class=\"line\">        waveOut.Stop();</span><br><span class=\"line\">        waveOut.Dispose();</span><br><span class=\"line\">        waveOut = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (audioFileReader != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        audioFileReader.Dispose();</span><br><span class=\"line\">        audioFileReader = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ButtonPlay_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveOut == <span class=\"literal\">null</span> || waveStream == <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buttonAudioMapping.TryGetValue(ButtonPlay, <span class=\"keyword\">out</span> MemoryStream audioStream))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            StartPlayback(audioStream);</span><br><span class=\"line\">            ButtonPlay.BackgroundImage = Properties.Resources.pause;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (waveOut.PlaybackState == PlaybackState.Playing)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            waveOut.Pause();</span><br><span class=\"line\">            isPlaying = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            ButtonPlay.BackgroundImage = Properties.Resources.play;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            waveOut.Play();</span><br><span class=\"line\">            isPlaying = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            ButtonPlay.BackgroundImage = Properties.Resources.pause;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">StartPlayback</span>(<span class=\"params\">MemoryStream audioStream</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    CleanUp();</span><br><span class=\"line\"></span><br><span class=\"line\">    waveOut = <span class=\"keyword\">new</span> WaveOutEvent</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DeviceNumber = comboBoxDevices.SelectedIndex</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重置流位置</span></span><br><span class=\"line\">    audioStream.Seek(<span class=\"number\">0</span>, SeekOrigin.Begin);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用 WaveFileReader</span></span><br><span class=\"line\">    waveStream = <span class=\"keyword\">new</span> WaveFileReader(audioStream);</span><br><span class=\"line\">    waveOut.Init(waveStream);</span><br><span class=\"line\">    waveOut.PlaybackStopped += OnPlaybackStopped;</span><br><span class=\"line\"></span><br><span class=\"line\">    waveOut.Play();</span><br><span class=\"line\">    isPlaying = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 确保初始化时更新进度条</span></span><br><span class=\"line\">    trackBarProgress.Maximum = (<span class=\"built_in\">int</span>)waveStream.TotalTime.TotalSeconds;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ChangeAudioFile</span>(<span class=\"params\">Button button</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置只允许选择 .wav 文件</span></span><br><span class=\"line\">    openFileDialog.Filter = <span class=\"string\">&quot;WAV files (*.wav)|*.wav&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (openFileDialog.ShowDialog() == DialogResult.OK)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> newFilePath = openFileDialog.FileName;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查文件扩展名是否为 .wav（如果需要进一步验证）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (System.IO.Path.GetExtension(newFilePath).ToLower() != <span class=\"string\">&quot;.wav&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;只能选择 .wav 格式的文件！&quot;</span>, <span class=\"string\">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        button.Text = System.IO.Path.GetFileNameWithoutExtension(newFilePath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 加载音频文件为 MemoryStream</span></span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] audioBytes = System.IO.File.ReadAllBytes(newFilePath);</span><br><span class=\"line\">        System.IO.MemoryStream audioStream = <span class=\"keyword\">new</span> System.IO.MemoryStream(audioBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新 buttonAudioMapping 字典</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buttonAudioMapping.ContainsKey(button))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            buttonAudioMapping[button].Dispose(); <span class=\"comment\">// 释放旧的 MemoryStream</span></span><br><span class=\"line\">            buttonAudioMapping[button] = audioStream;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            buttonAudioMapping.Add(button, audioStream);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新 appSettings 中的音频文件路径</span></span><br><span class=\"line\">        appSettings.ButtonAudioFilePaths[button.Name] = newFilePath;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自动保存设置</span></span><br><span class=\"line\">        settingsManager.SaveSettings(appSettings);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">OnPlaybackStopped</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, StoppedEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    isPlaying = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查是否正在播放其他音频</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveOut == <span class=\"literal\">null</span> || waveOut.PlaybackState != PlaybackState.Playing)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ButtonPlay.BackgroundImage = Properties.Resources.play; <span class=\"comment\">// 播放图片</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-音频文件加载和映射\"><a href=\"#1-音频文件加载和映射\" class=\"headerlink\" title=\"1.音频文件加载和映射\"></a>1.<strong>音频文件加载和映射</strong></h5><ul>\n<li><code>ReadStreamToByteArray</code> 方法将 <code>UnmanagedMemoryStream</code> 读取到字节数组。</li>\n<li><code>InitializeButtonAudioMapping</code> 方法将音频文件与按钮关联，使用 <code>MemoryStream</code> 存储每个音频文件的内容。</li>\n<li>采用这样的方式储存音频数据原因：</li>\n</ul>\n<p>​\t<strong>内存管理</strong>：通过将音频流读取到 <code>MemoryStream</code> 中，可以更灵活地管理内存。<code>MemoryStream</code> 允许在内存中对音频数据进行快速读写操作，而不需要频繁地访问磁盘文件。</p>\n<p>​\t<strong>易于处理</strong>：在播放音频时，将其存储在内存中可以加快访问速度，因为它避免了每次播放时都去读取文件系统的延迟。这对于用户体验非常重要。</p>\n<p>​\t<strong>数据封装</strong>：使用 <code>ReadStreamToByteArray</code> 方法将音频文件的流转换为字节数组，使得音频文件可以以更加统一的方式存储和使用。这使得将多个按钮与不同的音频文件关联变得简单。</p>\n<p>​\t<strong>资源整合</strong>：<code>Properties.Resources</code> 可以将资源嵌入到程序中，方便管理和访问。将其转换为 <code>MemoryStream</code> 使得你可以在运行时直接从嵌入的资源读取数据。</p>\n<p>​\t<strong>避免硬编码路径</strong>：直接使用嵌入的资源而不是依赖于文件路径，减少了在文件管理上的复杂性，同时也提高了程序的可移植性。</p>\n<p><code>UnmanagedMemoryStream</code> 是 C# 中的一个类，通常用于处理非托管内存中的数据。与常规的 <code>MemoryStream</code> 不同，<code>UnmanagedMemoryStream</code> 主要用于读取和写入存储在非托管内存中的字节数据。这种类型的流适合处理那些不由 .NET 垃圾回收器管理的内存，例如：</p>\n<ol>\n<li><strong>与 P&#x2F;Invoke 交互</strong>：当你需要调用本地 API（如 Windows API）时，通常需要在非托管内存中操作数据。</li>\n<li><strong>处理大数据</strong>：在处理大文件或数据块时，可以使用非托管内存来提高性能，因为它可以减少内存分配的开销。</li>\n<li><strong>性能优化</strong>：由于它直接在非托管内存中操作，可能会在某些情况下提供更好的性能，特别是在与硬件接口或其他语言的代码交互时。</li>\n</ol>\n<p><code>UnmanagedMemoryStream</code> 通常会在以下情况下使用：</p>\n<ul>\n<li>从操作系统或其他低级 API 中获取数据，并在 C# 中处理。</li>\n<li>在 C# 与 C&#x2F;C++ 等语言的互操作中，用于传递指向非托管内存的指针。</li>\n</ul>\n<p>例子</p>\n<p>一个简单的例子是，你可能会在调用某个非托管函数之前，先在非托管内存中分配空间，然后使用 <code>UnmanagedMemoryStream</code> 来读取或写入数据。</p>\n<p>总之，<code>UnmanagedMemoryStream</code> 是一个强大的工具，适用于需要直接操作非托管内存的场景。</p>\n<blockquote>\n<p><strong>非托管内存</strong>是指不由 .NET 垃圾回收器（GC）管理的内存。这种内存通常由应用程序直接分配和释放，主要用于与底层系统或其他语言（如 C&#x2F;C++）交互。以下是一些关于非托管内存的关键点：</p>\n<ol>\n<li><strong>手动管理</strong>：在使用非托管内存时，开发者需要手动分配和释放内存，使用诸如 <code>Marshal.AllocHGlobal</code> 和 <code>Marshal.FreeHGlobal</code> 等方法。</li>\n<li><strong>性能优化</strong>：非托管内存可以用于处理性能要求较高的场景，比如大型数据结构或高频率的数据交互，因为它可以减少内存分配和回收的开销。</li>\n<li><strong>与系统 API 交互</strong>：许多系统级 API 和库（尤其是 C&#x2F;C++ 编写的）需要使用非托管内存，因为它们不理解 .NET 的内存管理模型。</li>\n<li><strong>数据共享</strong>：非托管内存可以用于在不同语言或模块之间共享数据，例如在 C# 和 C&#x2F;C++ 代码之间传递复杂数据结构。</li>\n<li><strong>可能的内存泄漏</strong>：由于需要手动管理，开发者必须小心以避免内存泄漏或未定义行为，这些都是在非托管内存中比较常见的问题。</li>\n</ol>\n<p>在使用非托管内存时，确保了解其管理方式是非常重要的，以确保程序的稳定性和性能。</p>\n</blockquote>\n<blockquote>\n<p><strong><code>out</code> 关键字</strong>：</p>\n<ul>\n<li>表示这是一个输出参数。在方法内部，必须对其进行赋值。</li>\n<li>调用方法时，不需要在外部声明该变量，只需声明它为 <code>out</code> 类型即可。</li>\n</ul>\n<p><strong>用途</strong>：</p>\n<ul>\n<li><code>out</code> 参数通常用于从方法中返回多个值。在 C# 中，一个方法只能返回一个值，但可以通过 <code>out</code> 参数返回额外的信息或结果。</li>\n<li>在你的例子中，<code>audioStream</code> 是一个 <code>MemoryStream</code> 对象，可能用于返回音频数据的流。</li>\n</ul>\n</blockquote>\n<p><strong>数据流的转换</strong></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">byte</span>[] <span class=\"title\">ReadStreamToByteArray</span>(<span class=\"params\">UnmanagedMemoryStream stream</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> memoryStream = <span class=\"keyword\">new</span> MemoryStream())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        stream.CopyTo(memoryStream);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memoryStream.ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码的作用是将一个 <code>UnmanagedMemoryStream</code> 对象的内容复制到一个新的 <code>MemoryStream</code> 中，并返回其字节数组。以下是逐步解析：</p>\n<ol>\n<li><strong><code>using</code> 语句</strong>：确保 <code>memoryStream</code> 在使用完后自动释放资源，即使在发生异常时也能保证资源得到释放。</li>\n<li>**<code>stream.CopyTo(memoryStream)</code>**：将 <code>UnmanagedMemoryStream</code> 的内容复制到 <code>memoryStream</code> 中。<code>CopyTo</code> 方法会从源流读取数据并写入到目标流。</li>\n<li>**<code>memoryStream.ToArray()</code>**：将 <code>memoryStream</code> 中的内容转换为字节数组并返回。</li>\n</ol>\n<blockquote>\n<p><code>using</code> 语句在 C# 中用于确保对象在使用完后能够自动释放其占用的资源。主要有以下几个作用：</p>\n<ol>\n<li><strong>自动释放资源</strong>：<code>using</code> 语句会在代码块结束时自动调用对象的 <code>Dispose</code> 方法，释放资源。这在处理需要显式释放资源的对象（如文件流、数据库连接、图形资源等）时特别重要。</li>\n<li><strong>简化代码</strong>：通过使用 <code>using</code>，你不需要显式调用 <code>Dispose</code>，这样可以减少代码的复杂性，并提高可读性。</li>\n<li><strong>异常安全</strong>：即使在 <code>using</code> 语句块中发生异常，<code>Dispose</code> 仍然会被调用，确保资源得到正确释放，从而避免内存泄漏。</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>以下是一个简单的示例，展示了如何使用 <code>using</code> 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">csharp复制代码using (var fileStream = new FileStream(&quot;example.txt&quot;, FileMode.Open))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 进行文件操作</span><br><span class=\"line\">&#125; // 这里会自动调用 fileStream.Dispose()</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>fileStream</code> 会在 <code>using</code> 块结束后自动关闭，无需手动调用 <code>fileStream.Close()</code> 或 <code>fileStream.Dispose()</code>。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><code>using</code> 语句只能用于实现了 <code>IDisposable</code> 接口的对象。</li>\n<li>如果对象在 <code>using</code> 块之外的地方仍然被引用，确保对象不会被重复释放。</li>\n</ul>\n</blockquote>\n<p>Dcitionary.Keys返回的是，所有key的集合Dictionary2，值的类型和Dictionary中key的类型一致。</p>\n<h5 id=\"2-音频播放逻辑实现\"><a href=\"#2-音频播放逻辑实现\" class=\"headerlink\" title=\"2.音频播放逻辑实现\"></a>2.音频播放逻辑实现</h5><p>button_click → handle(判断能否播放) → cleanup(释放上一次播放的内存)  → startplay(开始播放)</p>\n<p>音频储存方式变化：audiostream                                                                      → wavestream(可以利用wave的play功能)</p>\n<p><strong><code>out</code> 关键字</strong>：</p>\n<ul>\n<li>表示这是一个输出参数。在<u>方法内部</u>，必须对其进行赋值。</li>\n<li>调用方法时，<u>不需要在外部声明该变量</u>，只需声明它为 <code>out</code> 类型即可。</li>\n</ul>\n<p><strong>用途</strong>：</p>\n<ul>\n<li><code>out</code> 参数通常用于从方法中返回多个值。在 C# 中，一个方法只能返回一个值，但可以通过 <code>out</code> 参数返回额外的信息或结果。</li>\n<li>在例子中，<code>audioStream</code> 是一个 <code>MemoryStream</code> 对象，可能用于返回音频数据的流。</li>\n</ul>\n<p>在这个例子中，<code>TryGetValue</code> 方法尝试从文件中读取音频流，并通过 <code>out</code> 参数返回 <code>MemoryStream</code> 对象。如果成功，调用者可以使用这个流；如果失败，流会被设置为 <code>null</code>。</p>\n<blockquote>\n<h3 id=\"WaveFileReader-与-AudioFileReader-的区别\"><a href=\"#WaveFileReader-与-AudioFileReader-的区别\" class=\"headerlink\" title=\"WaveFileReader 与 AudioFileReader 的区别\"></a><code>WaveFileReader</code> 与 <code>AudioFileReader</code> 的区别</h3><ol>\n<li>**<code>WaveFileReader</code>**：<ul>\n<li>专门用于读取 <code>.wav</code> 文件格式。</li>\n<li>提供对 WAV 文件的解析，包括文件头、采样率、通道数等信息。</li>\n<li>适用于需要处理纯 WAV 数据的场景。</li>\n</ul>\n</li>\n<li>**<code>AudioFileReader</code>**：<ul>\n<li>更通用，能够处理多种音频格式（如 WAV、MP3、AAC 等）。</li>\n<li>内部会根据文件格式自动解码并转换为 PCM 数据。</li>\n<li>适合需要处理不同音频格式的场景。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ul>\n<li>如果你只处理 WAV 文件，使用 <code>WaveFileReader</code> 可以更高效，因为它针对这种格式进行了优化。</li>\n<li>如果你的应用需要支持多种音频格式，使用 <code>AudioFileReader</code> 会更方便，因为它可以自动处理多种类型的音频数据。</li>\n</ul>\n</blockquote>\n<h5 id=\"3-播放文件选择\"><a href=\"#3-播放文件选择\" class=\"headerlink\" title=\"3.播放文件选择\"></a>3.播放文件选择</h5><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ChangeAudioFile</span>(<span class=\"params\">Button button</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置只允许选择 .wav 文件</span></span><br><span class=\"line\">    openFileDialog.Filter = <span class=\"string\">&quot;WAV files (*.wav)|*.wav&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (openFileDialog.ShowDialog() == DialogResult.OK)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> newFilePath = openFileDialog.FileName;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查文件扩展名是否为 .wav（如果需要进一步验证）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (System.IO.Path.GetExtension(newFilePath).ToLower() != <span class=\"string\">&quot;.wav&quot;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;只能选择 .wav 格式的文件！&quot;</span>, <span class=\"string\">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        button.Text = System.IO.Path.GetFileNameWithoutExtension(newFilePath);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 加载音频文件为 MemoryStream</span></span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] audioBytes = System.IO.File.ReadAllBytes(newFilePath);</span><br><span class=\"line\">        System.IO.MemoryStream audioStream = <span class=\"keyword\">new</span> System.IO.MemoryStream(audioBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新 buttonAudioMapping 字典</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buttonAudioMapping.ContainsKey(button))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            buttonAudioMapping[button].Dispose(); <span class=\"comment\">// 释放旧的 MemoryStream</span></span><br><span class=\"line\">            buttonAudioMapping[button] = audioStream;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            buttonAudioMapping.Add(button, audioStream);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新 appSettings 中的音频文件路径</span></span><br><span class=\"line\">        appSettings.ButtonAudioFilePaths[button.Name] = newFilePath;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 自动保存设置</span></span><br><span class=\"line\">        settingsManager.SaveSettings(appSettings);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>设置文件对话框过滤器</strong>：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openFileDialog.Filter = <span class=\"string\">&quot;WAV files (*.wav)|*.wav&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这行代码设置文件选择对话框只允许选择 <code>.wav</code> 文件。</p>\n<p><strong>显示对话框并检查用户选择</strong>：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (openFileDialog.ShowDialog() == DialogResult.OK)</span><br></pre></td></tr></table></figure>\n\n<p>显示文件对话框，用户选择文件后，如果点击“确定”，则继续执行后续代码。</p>\n<p><strong>获取选择的文件路径</strong>：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> newFilePath = openFileDialog.FileName;</span><br></pre></td></tr></table></figure>\n\n<p><strong>检查文件扩展名</strong>（可选）：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (System.IO.Path.GetExtension(newFilePath).ToLower() != <span class=\"string\">&quot;.wav&quot;</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MessageBox.Show(<span class=\"string\">&quot;只能选择 .wav 格式的文件！&quot;</span>, <span class=\"string\">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果用户选择的文件不是 <code>.wav</code> 格式，则弹出错误提示，并退出方法。</p>\n<p><strong>更新按钮文本</strong>：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.Text = System.IO.Path.GetFileNameWithoutExtension(newFilePath);</span><br></pre></td></tr></table></figure>\n\n<p>将按钮的文本设置为文件名，不包括扩展名。</p>\n<p>**加载音频文件为 <code>MemoryStream</code>**：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">byte</span>[] audioBytes = System.IO.File.ReadAllBytes(newFilePath);</span><br><span class=\"line\">System.IO.MemoryStream audioStream = <span class=\"keyword\">new</span> System.IO.MemoryStream(audioBytes);</span><br></pre></td></tr></table></figure>\n\n<p>读取选择的音频文件的所有字节，并将其存入一个 <code>MemoryStream</code> 中，以便后续播放。</p>\n<p><strong>更新 <code>buttonAudioMapping</code> 字典</strong>：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (buttonAudioMapping.ContainsKey(button))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    buttonAudioMapping[button].Dispose(); <span class=\"comment\">// 释放旧的 MemoryStream</span></span><br><span class=\"line\">    buttonAudioMapping[button] = audioStream;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    buttonAudioMapping.Add(button, audioStream);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>检查字典中是否已有该按钮的映射。如果有，先释放旧的 <code>MemoryStream</code>，然后更新为新的流；如果没有，直接添加新的映射。</p>\n<p><strong>更新设置中的音频文件路径</strong>：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appSettings.ButtonAudioFilePaths[button.Name] = newFilePath;</span><br></pre></td></tr></table></figure>\n\n<p><strong>自动保存设置</strong>：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">settingsManager.SaveSettings(appSettings);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"音量大小\"><a href=\"#音量大小\" class=\"headerlink\" title=\"音量大小\"></a>音量大小</h4><p>…略</p>\n<h4 id=\"进度条\"><a href=\"#进度条\" class=\"headerlink\" title=\"进度条\"></a>进度条</h4><ol>\n<li><code>Timer_Tick</code> 方法</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Timer_Tick</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveStream != <span class=\"literal\">null</span> &amp;&amp; !isTrackBarDragging)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        trackBarProgress.Maximum = (<span class=\"built_in\">int</span>)waveStream.TotalTime.TotalSeconds;</span><br><span class=\"line\">        trackBarProgress.Value = (<span class=\"built_in\">int</span>)waveStream.CurrentTime.TotalSeconds;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>作用</strong>：在定时器的每次触发时更新进度条的最大值和当前值。</p>\n</li>\n<li><p>逻辑</p>\n<p>：</p>\n<ul>\n<li>如果 <code>waveStream</code> 不为 <code>null</code> 且当前不在拖动进度条（<code>isTrackBarDragging</code> 为 <code>false</code>），则设置进度条的最大值为音频的总时间（秒），并将当前值更新为音频当前播放时间（秒）。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li><code>trackBarProgress_MouseDown</code> 方法</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">trackBarProgress_MouseDown</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    isTrackBarDragging = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>作用</strong>：当用户开始拖动进度条时设置标志。</li>\n<li><strong>逻辑</strong>：将 <code>isTrackBarDragging</code> 设置为 <code>true</code>，表示用户正在拖动进度条，此时不应更新音频的播放位置。</li>\n</ul>\n<ol start=\"3\">\n<li><code>trackBarProgress_MouseUp</code> 方法</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">trackBarProgress_MouseUp</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    isTrackBarDragging = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveStream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waveStream.CurrentTime = TimeSpan.FromSeconds(trackBarProgress.Value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>作用</strong>：当用户释放鼠标时停止拖动并更新音频播放位置。</p>\n</li>\n<li><p>逻辑</p>\n<p>：</p>\n<ul>\n<li>将 <code>isTrackBarDragging</code> 设置为 <code>false</code>，表示拖动结束。</li>\n<li>如果 <code>waveStream</code> 不为 <code>null</code>，则根据当前进度条的值更新音频的当前播放时间。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li><code>trackBarProgress_ValueChanged</code> 方法</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">trackBarProgress_ValueChanged</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (waveStream != <span class=\"literal\">null</span> &amp;&amp; !isTrackBarDragging)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        waveStream.CurrentTime = TimeSpan.FromSeconds(trackBarProgress.Value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>作用</strong>：当进度条的值发生变化时更新音频播放位置。</p>\n</li>\n<li><p>逻辑</p>\n<p>：</p>\n<ul>\n<li>如果 <code>waveStream</code> 不为 <code>null</code> 且不在拖动进度条，则根据新的进度条值更新音频的当前播放时间。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、快捷键\"><a href=\"#二、快捷键\" class=\"headerlink\" title=\"二、快捷键\"></a>二、快捷键</h2><h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><h5 id=\"1-右键菜单\"><a href=\"#1-右键菜单\" class=\"headerlink\" title=\"1.右键菜单\"></a>1.右键菜单</h5><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Button_MouseUp</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, MouseEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.Button == MouseButtons.Right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Button button = sender <span class=\"keyword\">as</span> Button;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (button == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        ContextMenuStrip contextMenu = <span class=\"keyword\">new</span> ContextMenuStrip();</span><br><span class=\"line\">        ToolStripMenuItem changeAudioFileMenuItem = <span class=\"keyword\">new</span> ToolStripMenuItem(<span class=\"string\">&quot;更改音频文件&quot;</span>);</span><br><span class=\"line\">        ToolStripMenuItem setShortcutKeyMenuItem = <span class=\"keyword\">new</span> ToolStripMenuItem(<span class=\"string\">&quot;设置快捷键&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        changeAudioFileMenuItem.Click += (s, <span class=\"keyword\">args</span>) =&gt; ChangeAudioFile(button);</span><br><span class=\"line\">        setShortcutKeyMenuItem.Click += SetShortcutKeyMenuItem_Click;</span><br><span class=\"line\"></span><br><span class=\"line\">        contextMenu.Items.Add(changeAudioFileMenuItem);</span><br><span class=\"line\">        contextMenu.Items.Add(setShortcutKeyMenuItem);</span><br><span class=\"line\">        contextMenu.Show(button, e.Location);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>MouseEventArgs</code> 是 .NET 中用于处理鼠标事件的数据类，继承自 <code>EventArgs</code>。它提供了关于鼠标操作的信息，例如鼠标按钮的状态和鼠标指针的位置。</p>\n<p>主要属性</p>\n<ul>\n<li><strong>Button</strong>:<ul>\n<li>类型: <code>MouseButtons</code></li>\n<li>描述: 指示哪个鼠标按钮被按下或释放（如左键、右键或中键）。</li>\n</ul>\n</li>\n<li><strong>Clicks</strong>:<ul>\n<li>类型: <code>int</code></li>\n<li>描述: 指示在事件发生时鼠标点击的次数。</li>\n</ul>\n</li>\n<li><strong>X</strong>:<ul>\n<li>类型: <code>int</code></li>\n<li>描述: 鼠标指针相对于控件左上角的 X 坐标。</li>\n</ul>\n</li>\n<li><strong>Y</strong>:<ul>\n<li>类型: <code>int</code></li>\n<li>描述: 鼠标指针相对于控件左上角的 Y 坐标。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-快捷键设置窗口的实现\"><a href=\"#2-快捷键设置窗口的实现\" class=\"headerlink\" title=\"2.快捷键设置窗口的实现\"></a>2.快捷键设置窗口的实现</h5><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">SetShortcutKeyMenuItem_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ToolStripMenuItem menuItem = sender <span class=\"keyword\">as</span> ToolStripMenuItem;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (menuItem != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ContextMenuStrip owner = menuItem.Owner <span class=\"keyword\">as</span> ContextMenuStrip;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (owner != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Button button = owner.SourceControl <span class=\"keyword\">as</span> Button;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (button != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> shortcutKeyForm = <span class=\"keyword\">new</span> ShortcutKeyForm())</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    isSettingShortcutKey = <span class=\"literal\">true</span>; <span class=\"comment\">// 设置状态为正在设置快捷键</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (shortcutKeyForm.ShowDialog() == DialogResult.OK)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Keys selectedKey = shortcutKeyForm.SelectedKey;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 检查快捷键是否已被其他按钮使用</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (shortcutKeyMapping.ContainsKey(selectedKey))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            MessageBox.Show(<span class=\"string\">&quot;此快捷键已被其他按钮使用，请选择其他快捷键。&quot;</span>);</span><br><span class=\"line\">                            isSettingShortcutKey = <span class=\"literal\">false</span>; <span class=\"comment\">// 重置状态</span></span><br><span class=\"line\">                            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 如果当前按钮已经设置了快捷键，将其从映射中移除</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> existingKey = shortcutKeyMapping.FirstOrDefault(x =&gt; x.Value == button).Key;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (existingKey != Keys.None)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            shortcutKeyMapping.Remove(existingKey);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 将新的快捷键映射到按钮</span></span><br><span class=\"line\">                        shortcutKeyMapping[selectedKey] = button;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 更新按钮对应的 Label 文本</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (buttonLabelMapping.TryGetValue(button, <span class=\"keyword\">out</span> Label label))</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            label.Text = <span class=\"string\">$&quot;快捷键: <span class=\"subst\">&#123;selectedKey&#125;</span>&quot;</span>;</span><br><span class=\"line\">                            label.Visible = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    isSettingShortcutKey = <span class=\"literal\">false</span>; <span class=\"comment\">// 重置状态</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">ShortcutKeyForm</span> : <span class=\"title\">Form</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Keys SelectedKey &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShortcutKeyForm</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        InitializeComponent();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.KeyPreview = <span class=\"literal\">true</span>; <span class=\"comment\">// 使 Form 可以接收按键事件</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Text = <span class=\"string\">&quot;快捷键绑定&quot;</span>; <span class=\"comment\">// 设置窗口标题</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置窗口启动位置为屏幕中心</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.StartPosition = FormStartPosition.CenterScreen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ShortcutKeyForm_KeyDown</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, KeyEventArgs e</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检查是否是 &lt;space&gt; 键</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.KeyCode == Keys.Space)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;不能将 &lt;space&gt; 键设置为快捷键。&quot;</span>);</span><br><span class=\"line\">            e.SuppressKeyPress = <span class=\"literal\">true</span>; <span class=\"comment\">// 防止默认行为</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SelectedKey = e.KeyCode;</span><br><span class=\"line\">        lblInstruction.Text = <span class=\"string\">$&quot;按下的键: <span class=\"subst\">&#123;SelectedKey&#125;</span>&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">btnConfirm_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.DialogResult = DialogResult.OK;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-快捷键设置的响应\"><a href=\"#3-快捷键设置的响应\" class=\"headerlink\" title=\"3.快捷键设置的响应\"></a>3.快捷键设置的响应</h5><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"built_in\">bool</span> <span class=\"title\">ProcessCmdKey</span>(<span class=\"params\"><span class=\"keyword\">ref</span> Message msg, Keys keyData</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果正在设置快捷键，并且尝试设置 &lt;space&gt; 键</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSettingShortcutKey)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 取消快捷键设置状态</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (keyData == Keys.Space)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;不能将 &lt;space&gt; 键设置为快捷键。&quot;</span>);</span><br><span class=\"line\">            isSettingShortcutKey = <span class=\"literal\">false</span>; <span class=\"comment\">// 取消设置状态</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 表示事件已处理</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置其他快捷键</span></span><br><span class=\"line\">        shortcutKey = keyData;</span><br><span class=\"line\">        MessageBox.Show(<span class=\"string\">$&quot;快捷键已设置为: <span class=\"subst\">&#123;shortcutKey&#125;</span>&quot;</span>);</span><br><span class=\"line\">        isSettingShortcutKey = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查快捷键是否已被使用</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shortcutKeyMapping.ContainsKey(shortcutKey))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;此快捷键已被其他按钮使用，请选择其他快捷键。&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将快捷键映射到按钮上</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buttonLabelMapping.TryGetValue(ButtonPlay, <span class=\"keyword\">out</span> Label label))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 移除旧的快捷键</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shortcutKeyMapping.ContainsKey(shortcutKey))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                shortcutKeyMapping.Remove(shortcutKey);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            label.Text = <span class=\"string\">$&quot;快捷键: <span class=\"subst\">&#123;shortcutKey&#125;</span>&quot;</span>;</span><br><span class=\"line\">            label.Visible = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            shortcutKeyMapping[shortcutKey] = ButtonPlay; <span class=\"comment\">// 为 ButtonPlay 设置快捷键映射</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 表示事件已处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理 &lt;space&gt; 键，调用 ButtonPlay_Click</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (keyData == Keys.Space)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ButtonPlay_Click(ButtonPlay, EventArgs.Empty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 表示事件已处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查是否启用了快捷键功能</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isShortcutKeyEnabled &amp;&amp; shortcutKeyMapping.TryGetValue(keyData, <span class=\"keyword\">out</span> Button button))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Button_Click(button); <span class=\"comment\">// 触发与快捷键关联的按钮点击事件</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 表示事件已处理</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 默认处理其他键</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.ProcessCmdKey(<span class=\"keyword\">ref</span> msg, keyData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"全局响应\"><a href=\"#全局响应\" class=\"headerlink\" title=\"全局响应\"></a>全局响应</h4><p>具体来说，代码的主要功能是监控按键按下事件，并在特定的快捷键被按下时触发相应按钮的点击事件。</p>\n<ol>\n<li>常量和委托定义</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"built_in\">int</span> WH_KEYBOARD_LL = <span class=\"number\">13</span>; <span class=\"comment\">// 钩子类型</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"built_in\">int</span> WM_KEYDOWN = <span class=\"number\">0x0100</span>; <span class=\"comment\">// 按键按下消息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">delegate</span> IntPtr <span class=\"title\">LowLevelKeyboardProc</span>(<span class=\"params\"><span class=\"built_in\">int</span> nCode, IntPtr wParam, IntPtr lParam</span>)</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> LowLevelKeyboardProc _proc;</span><br><span class=\"line\"><span class=\"keyword\">private</span> IntPtr _hookID = IntPtr.Zero;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>WH_KEYBOARD_LL</code></strong>: 定义了低级键盘钩子的类型。</li>\n<li><strong><code>WM_KEYDOWN</code></strong>: 定义了键按下的消息。</li>\n<li><strong><code>LowLevelKeyboardProc</code></strong>: 定义了一个委托，用于处理键盘事件的回调方法。</li>\n<li><strong><code>_proc</code> 和 <code>_hookID</code></strong>: 存储钩子回调函数和钩子 ID。</li>\n</ul>\n<ol start=\"2\">\n<li>设置钩子</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">SetHook</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _proc = HookCallback;</span><br><span class=\"line\">    _hookID = SetWindowsHookEx(WH_KEYBOARD_LL, _proc, IntPtr.Zero, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>SetHook</code></strong>: 用于设置全局键盘钩子。</li>\n<li><strong><code>SetWindowsHookEx</code></strong>: 调用 Windows API 设置钩子，传入钩子类型、回调方法和其他参数。</li>\n</ul>\n<ol start=\"3\">\n<li>钩子回调</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> IntPtr <span class=\"title\">HookCallback</span>(<span class=\"params\"><span class=\"built_in\">int</span> nCode, IntPtr wParam, IntPtr lParam</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nCode &gt;= <span class=\"number\">0</span> &amp;&amp; wParam == (IntPtr)WM_KEYDOWN)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Keys key = (Keys)Marshal.ReadInt32(lParam);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查快捷键映射字典</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shortcutKeyMapping.TryGetValue(key, <span class=\"keyword\">out</span> Button button))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 触发与快捷键关联的按钮点击事件</span></span><br><span class=\"line\">            Button_Click(button); <span class=\"comment\">// 替换为你的功能调用</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> CallNextHookEx(_hookID, nCode, wParam, lParam);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong><code>HookCallback</code></strong>: 钩子回调方法，在每次按键事件触发时被调用。</p>\n</li>\n<li><p>逻辑</p>\n<p>：</p>\n<ul>\n<li>检查 <code>nCode</code> 是否大于等于 0（表示有效的事件）。</li>\n<li>检查 <code>wParam</code> 是否为 <code>WM_KEYDOWN</code>（表示按键按下事件）。</li>\n<li>使用 <code>Marshal.ReadInt32</code> 从 <code>lParam</code> 中读取按键值，并检查是否在 <code>shortcutKeyMapping</code> 字典中存在该键。</li>\n<li>如果存在，则触发对应按钮的点击事件。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>卸载钩子</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">UnhookWindowsHookEx</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    UnhookWindowsHookEx(_hookID);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>UnhookWindowsHookEx</code></strong>: 卸载全局键盘钩子，释放资源。</li>\n</ul>\n<ol start=\"5\">\n<li>DLL 导入</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">csharp复制代码[DllImport(&quot;user32.dll&quot;)]</span><br><span class=\"line\">private static extern IntPtr SetWindowsHookEx(int idHook, LowLevelKeyboardProc lpfn, IntPtr hMod, uint dwThreadId);</span><br><span class=\"line\"></span><br><span class=\"line\">[DllImport(&quot;user32.dll&quot;)]</span><br><span class=\"line\">[return: MarshalAs(UnmanagedType.Bool)]</span><br><span class=\"line\">private static extern bool UnhookWindowsHookEx(IntPtr hhk);</span><br><span class=\"line\"></span><br><span class=\"line\">[DllImport(&quot;user32.dll&quot;)]</span><br><span class=\"line\">private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这些 <code>DllImport</code> 属性导入 Windows API 函数，允许 C# 代码调用低级别的钩子功能。</li>\n</ul>\n<ol start=\"6\">\n<li>窗体事件</li>\n</ol>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnLoad</span>(<span class=\"params\">EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">base</span>.OnLoad(e);</span><br><span class=\"line\">    SetHook();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnFormClosing</span>(<span class=\"params\">FormClosingEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    UnhookWindowsHookEx();</span><br><span class=\"line\">    <span class=\"keyword\">base</span>.OnFormClosing(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>OnLoad</code></strong>: 在窗体加载时设置钩子。</li>\n<li><strong><code>OnFormClosing</code></strong>: 在窗体关闭时卸载钩子，防止资源泄露。</li>\n</ul>\n<h2 id=\"三、操作存储\"><a href=\"#三、操作存储\" class=\"headerlink\" title=\"三、操作存储\"></a>三、操作存储</h2><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ApplySettings</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置快捷键</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> kvp <span class=\"keyword\">in</span> appSettings.ShortcutKeys)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> buttonName = kvp.Key;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> key = kvp.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查找与按钮名称对应的按钮控件</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> button = <span class=\"keyword\">this</span>.Controls.Find(buttonName, <span class=\"literal\">true</span>).FirstOrDefault() <span class=\"keyword\">as</span> Button;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (button != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shortcutKeyMapping.ContainsKey(key))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                shortcutKeyMapping.Remove(key); <span class=\"comment\">// 移除旧的键映射</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            shortcutKeyMapping[key] = button;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (buttonLabelMapping.TryGetValue(button, <span class=\"keyword\">out</span> Label label))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                label.Text = <span class=\"string\">$&quot;快捷键: <span class=\"subst\">&#123;key&#125;</span>&quot;</span>;</span><br><span class=\"line\">                label.Visible = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置音量</span></span><br><span class=\"line\">    volumeSlider.Volume = appSettings.Volume;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加载按钮和音频文件路径映射</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> kvp <span class=\"keyword\">in</span> appSettings.ButtonAudioFilePaths)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> buttonName = kvp.Key;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> filePath = kvp.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> button = <span class=\"keyword\">this</span>.Controls.Find(buttonName, <span class=\"literal\">true</span>).FirstOrDefault() <span class=\"keyword\">as</span> Button;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (button != <span class=\"literal\">null</span> &amp;&amp; File.Exists(filePath))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">byte</span>[] audioBytes = File.ReadAllBytes(filePath);</span><br><span class=\"line\">            MemoryStream audioStream = <span class=\"keyword\">new</span> MemoryStream(audioBytes);</span><br><span class=\"line\">            buttonAudioMapping[button] = audioStream;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 更新按钮文本为文件名（不包括扩展名）</span></span><br><span class=\"line\">            button.Text = Path.GetFileNameWithoutExtension(filePath);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Form1_FormClosing</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, FormClosingEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保存音量</span></span><br><span class=\"line\">    appSettings.Volume = volumeSlider.Volume;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存快捷键设置</span></span><br><span class=\"line\">    appSettings.ShortcutKeys.Clear();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> kvp <span class=\"keyword\">in</span> shortcutKeyMapping)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> key = kvp.Key;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> button = kvp.Value;</span><br><span class=\"line\">        appSettings.ShortcutKeys[button.Name] = key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存按钮和音频文件路径映射</span></span><br><span class=\"line\">    SaveButtonAudioPaths();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 更新 LastLoginTime</span></span><br><span class=\"line\">    appSettings.LastLoginTime = DateTime.Now;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存设置</span></span><br><span class=\"line\">    settingsManager.SaveSettings(appSettings);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">SaveButtonAudioPaths</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> kvp <span class=\"keyword\">in</span> buttonAudioMapping)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> button = kvp.Key;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (appSettings.ButtonAudioFilePaths.TryGetValue(button.Name, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> existingFilePath))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果已经有文件路径存在，使用现有路径</span></span><br><span class=\"line\">            appSettings.ButtonAudioFilePaths[button.Name] = existingFilePath;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ShowLoginForm</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DateTime lastLoginTime = DateTime.MinValue; <span class=\"comment\">// 初始化变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从 SettingsManager 加载设置</span></span><br><span class=\"line\">    AppSettings settings = settingsManager.LoadSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查 LastLoginTime 是否存在和非空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (settings.LastLoginTime.HasValue &amp;&amp; DateTime.Now - settings.LastLoginTime.Value &lt; TimeSpan.FromDays(<span class=\"number\">1</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>; <span class=\"comment\">// 如果上次登录时间在一天内，则不显示登录窗口</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建 LoginForm 实例并传递 SettingsManager</span></span><br><span class=\"line\">    LoginForm loginForm = <span class=\"keyword\">new</span> LoginForm(settingsManager);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loginForm.ShowDialog() != DialogResult.OK)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果登录不成功，关闭主窗口</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-ApplySettings-方法\"><a href=\"#1-ApplySettings-方法\" class=\"headerlink\" title=\"1. ApplySettings 方法\"></a>1. <code>ApplySettings</code> 方法</h3><p>该方法用于应用之前保存的设置，包括快捷键、音量和按钮与音频文件路径的映射。</p>\n<ul>\n<li><strong>快捷键设置</strong>：<ul>\n<li>遍历 <code>appSettings.ShortcutKeys</code> 字典，查找与按钮名称对应的按钮控件。</li>\n<li>如果按钮存在，移除旧的键映射，并将新映射添加到 <code>shortcutKeyMapping</code> 中。</li>\n<li>更新按钮对应的标签，显示当前快捷键。</li>\n</ul>\n</li>\n<li><strong>音量设置</strong>：<ul>\n<li>将音量滑块的值设置为保存的音量。</li>\n</ul>\n</li>\n<li><strong>音频文件路径加载</strong>：<ul>\n<li>遍历 <code>appSettings.ButtonAudioFilePaths</code> 字典，查找与按钮名称对应的音频文件路径。</li>\n<li>如果文件存在，则读取音频文件，存入 <code>buttonAudioMapping</code> 字典中，并更新按钮文本为文件名（不包括扩展名）。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-Form1-FormClosing-方法\"><a href=\"#2-Form1-FormClosing-方法\" class=\"headerlink\" title=\"2. Form1_FormClosing 方法\"></a>2. <code>Form1_FormClosing</code> 方法</h3><p>该方法在窗体关闭时调用，用于保存用户设置。</p>\n<ul>\n<li><strong>保存音量</strong>：将当前音量滑块的值保存到 <code>appSettings.Volume</code>。</li>\n<li><strong>保存快捷键设置</strong>：清空旧的快捷键设置，并遍历 <code>shortcutKeyMapping</code>，保存新的快捷键到 <code>appSettings.ShortcutKeys</code>。</li>\n<li><strong>保存按钮与音频文件路径映射</strong>：调用 <code>SaveButtonAudioPaths</code> 方法来保存音频文件路径的映射。</li>\n<li><strong>更新最后登录时间</strong>：将当前时间设置为 <code>appSettings.LastLoginTime</code>。</li>\n<li><strong>保存设置</strong>：调用 <code>settingsManager.SaveSettings(appSettings)</code> 将所有设置保存到文件或数据库中。</li>\n</ul>\n<h3 id=\"3-SaveButtonAudioPaths-方法\"><a href=\"#3-SaveButtonAudioPaths-方法\" class=\"headerlink\" title=\"3. SaveButtonAudioPaths 方法\"></a>3. <code>SaveButtonAudioPaths</code> 方法</h3><p>这个方法用于保存按钮与音频文件路径的映射。</p>\n<ul>\n<li>遍历 <code>buttonAudioMapping</code>，对于每个按钮，检查 <code>appSettings.ButtonAudioFilePaths</code> 中是否已经有对应的文件路径。如果有，则保留现有路径（逻辑可能需要补充具体路径更新的部分）。</li>\n</ul>\n<h3 id=\"4-ShowLoginForm-方法\"><a href=\"#4-ShowLoginForm-方法\" class=\"headerlink\" title=\"4. ShowLoginForm 方法\"></a>4. <code>ShowLoginForm</code> 方法</h3><p>该方法用于处理用户登录逻辑。</p>\n<ul>\n<li><strong>最后登录时间检查</strong>：从 <code>settingsManager</code> 中加载设置，检查 <code>LastLoginTime</code> 是否存在且在一天内。如果是，则直接返回，不显示登录窗口。</li>\n<li><strong>显示登录窗口</strong>：如果需要登录，创建 <code>LoginForm</code> 的实例并传递 <code>settingsManager</code>，显示登录对话框。如果用户未成功登录，则关闭主窗口。</li>\n</ul>\n<h2 id=\"四、软件的封装\"><a href=\"#四、软件的封装\" class=\"headerlink\" title=\"四、软件的封装\"></a>四、软件的封装</h2><p>略…</p>\n</div>"},{"title":"MIDAS M32 DN32-LIVE调音台直播链路","_content":"\n\n\n作者：段恺乐\n\n\n\n# 一、路由详解\n\n先对不同接口、通道的具体设置进行讲解。\n\n## Inputs\n\nInputs通道的routing思路是，选择inputs通道的sources，它们来自于local in以及其他通道接口的out。\n\n1-24：Card 1-24；\n\n也就是说，将机架的输出通道以及电脑音乐输入到了调音台的Inputs通道上，机架或CARD上的信号从哪儿来，稍后会进行解释。\n\nInputs通道的source主要分类为：麦克风（LEAD、HS）以及电脑音频（音乐、音效等）；\n\n## MIXBUS\n\nmixbus的功能分为：PA、OB、Back、FX、SUB；\n\n然后又会通过HS、LEAD两种不同的麦克风分别汇总到不同的总线上；\n\n## Matrix\n\n从母线的职能层级来说，matrix＞main L/R＞mixbus、group、aux等；\n\nmatrix输出，从功能上将，分为OB、Main L/R、S L/R；\n\n因此，matrix作为主要的输出通道。\n\n## OUTPUTS\n\nM32调音台上，[BLOCK]一栏中的路由，均是选择的in（输入）信号，不是out（输出）信号；\n\n而outputs，是M32调音台上虚拟的（virtual、digital）输出通道，每个可以选择自己通道的信号来源，也可以自由的assign给其他out通道使用。\n\n在大型直播商务中，outputs按功能分为主输出（main、side、sub）、BackUP、EF、OB等类型。\n\n信号来源根据功能需求，大多来自于mixbus或者matrix。\n\n为了方便处理，将OUTPUTS中1-8作为主输出，其他功能的放置在9-16通道中。具体原因会在稍后解释。\n\n## CARD\n\n在直播处理中，我将CARD out的routing理解为进入电脑机架的声音来源（source）。\n\n1-8：outputs 9-16；用于处理9-16中的effect bus，进行特殊化处理。（因此将EF等其他mixbus集中发送给OUTPUTS 9-16中才方便传输到电脑机架中。）\n\n9-16：local 9-16；麦克风接入。\n\n17-24：card 1-8；用于传输电脑的音乐。\n\n25-32：local 25-32；麦克风接入。\n\n（PS：local指的是本地XLR in）\n\n## XLR\n\n均选择outputs通道。\n\n## AUX in\n\n1-6：user in 1-6；\n\n其中，user in 1-6的信号来自于card in 25-32中的信号。\n\n最后，aux in被发送至了mixbus中。\n\n应该是将处理后的特殊效果或者音乐发送给了aux。\n\n\n\n# 实现功能\n\n## 1.监听\n\n有的岗位需要实时监听直播间的音频情况，因此需要将信号汇总到到一个监听母线并进行输出。\n\n## 2.输出\n\n直播现场、直播间的音频需要分开输出，并且直播现场要按照现场的声音制作规格进行分频段发送输出。因此需要2-3个输出母线用于信号的输出。\n\n## 3.通讯\n\n可以通过麦克风进行内部的交流，不过在后勤工作人员之间，用三方内通还是更为普遍的选择。\n\n\n\n> ![mix_console](image/Works/mix_console.jpg)\n>\n> ![a61e3fcf952de401320980c0e72288c](image/Works/mix_console2.jpg)","source":"_posts/调音台_MIDAS-M32-DN32-LIVE调音台直播链路.md","raw":"---\ntitle: MIDAS M32 DN32-LIVE调音台直播链路\n---\n\n\n\n作者：段恺乐\n\n\n\n# 一、路由详解\n\n先对不同接口、通道的具体设置进行讲解。\n\n## Inputs\n\nInputs通道的routing思路是，选择inputs通道的sources，它们来自于local in以及其他通道接口的out。\n\n1-24：Card 1-24；\n\n也就是说，将机架的输出通道以及电脑音乐输入到了调音台的Inputs通道上，机架或CARD上的信号从哪儿来，稍后会进行解释。\n\nInputs通道的source主要分类为：麦克风（LEAD、HS）以及电脑音频（音乐、音效等）；\n\n## MIXBUS\n\nmixbus的功能分为：PA、OB、Back、FX、SUB；\n\n然后又会通过HS、LEAD两种不同的麦克风分别汇总到不同的总线上；\n\n## Matrix\n\n从母线的职能层级来说，matrix＞main L/R＞mixbus、group、aux等；\n\nmatrix输出，从功能上将，分为OB、Main L/R、S L/R；\n\n因此，matrix作为主要的输出通道。\n\n## OUTPUTS\n\nM32调音台上，[BLOCK]一栏中的路由，均是选择的in（输入）信号，不是out（输出）信号；\n\n而outputs，是M32调音台上虚拟的（virtual、digital）输出通道，每个可以选择自己通道的信号来源，也可以自由的assign给其他out通道使用。\n\n在大型直播商务中，outputs按功能分为主输出（main、side、sub）、BackUP、EF、OB等类型。\n\n信号来源根据功能需求，大多来自于mixbus或者matrix。\n\n为了方便处理，将OUTPUTS中1-8作为主输出，其他功能的放置在9-16通道中。具体原因会在稍后解释。\n\n## CARD\n\n在直播处理中，我将CARD out的routing理解为进入电脑机架的声音来源（source）。\n\n1-8：outputs 9-16；用于处理9-16中的effect bus，进行特殊化处理。（因此将EF等其他mixbus集中发送给OUTPUTS 9-16中才方便传输到电脑机架中。）\n\n9-16：local 9-16；麦克风接入。\n\n17-24：card 1-8；用于传输电脑的音乐。\n\n25-32：local 25-32；麦克风接入。\n\n（PS：local指的是本地XLR in）\n\n## XLR\n\n均选择outputs通道。\n\n## AUX in\n\n1-6：user in 1-6；\n\n其中，user in 1-6的信号来自于card in 25-32中的信号。\n\n最后，aux in被发送至了mixbus中。\n\n应该是将处理后的特殊效果或者音乐发送给了aux。\n\n\n\n# 实现功能\n\n## 1.监听\n\n有的岗位需要实时监听直播间的音频情况，因此需要将信号汇总到到一个监听母线并进行输出。\n\n## 2.输出\n\n直播现场、直播间的音频需要分开输出，并且直播现场要按照现场的声音制作规格进行分频段发送输出。因此需要2-3个输出母线用于信号的输出。\n\n## 3.通讯\n\n可以通过麦克风进行内部的交流，不过在后勤工作人员之间，用三方内通还是更为普遍的选择。\n\n\n\n> ![mix_console](image/Works/mix_console.jpg)\n>\n> ![a61e3fcf952de401320980c0e72288c](image/Works/mix_console2.jpg)","slug":"调音台_MIDAS-M32-DN32-LIVE调音台直播链路","published":1,"date":"2025-04-13T10:39:03.420Z","updated":"2024-11-15T12:43:44.937Z","comments":1,"layout":"post","photos":[],"_id":"cm9h6j6xw0008sspygv9wbh04","content":"<div class=\".article-gallery\"><p>作者：段恺乐</p>\n<h1 id=\"一、路由详解\"><a href=\"#一、路由详解\" class=\"headerlink\" title=\"一、路由详解\"></a>一、路由详解</h1><p>先对不同接口、通道的具体设置进行讲解。</p>\n<h2 id=\"Inputs\"><a href=\"#Inputs\" class=\"headerlink\" title=\"Inputs\"></a>Inputs</h2><p>Inputs通道的routing思路是，选择inputs通道的sources，它们来自于local in以及其他通道接口的out。</p>\n<p>1-24：Card 1-24；</p>\n<p>也就是说，将机架的输出通道以及电脑音乐输入到了调音台的Inputs通道上，机架或CARD上的信号从哪儿来，稍后会进行解释。</p>\n<p>Inputs通道的source主要分类为：麦克风（LEAD、HS）以及电脑音频（音乐、音效等）；</p>\n<h2 id=\"MIXBUS\"><a href=\"#MIXBUS\" class=\"headerlink\" title=\"MIXBUS\"></a>MIXBUS</h2><p>mixbus的功能分为：PA、OB、Back、FX、SUB；</p>\n<p>然后又会通过HS、LEAD两种不同的麦克风分别汇总到不同的总线上；</p>\n<h2 id=\"Matrix\"><a href=\"#Matrix\" class=\"headerlink\" title=\"Matrix\"></a>Matrix</h2><p>从母线的职能层级来说，matrix＞main L&#x2F;R＞mixbus、group、aux等；</p>\n<p>matrix输出，从功能上将，分为OB、Main L&#x2F;R、S L&#x2F;R；</p>\n<p>因此，matrix作为主要的输出通道。</p>\n<h2 id=\"OUTPUTS\"><a href=\"#OUTPUTS\" class=\"headerlink\" title=\"OUTPUTS\"></a>OUTPUTS</h2><p>M32调音台上，[BLOCK]一栏中的路由，均是选择的in（输入）信号，不是out（输出）信号；</p>\n<p>而outputs，是M32调音台上虚拟的（virtual、digital）输出通道，每个可以选择自己通道的信号来源，也可以自由的assign给其他out通道使用。</p>\n<p>在大型直播商务中，outputs按功能分为主输出（main、side、sub）、BackUP、EF、OB等类型。</p>\n<p>信号来源根据功能需求，大多来自于mixbus或者matrix。</p>\n<p>为了方便处理，将OUTPUTS中1-8作为主输出，其他功能的放置在9-16通道中。具体原因会在稍后解释。</p>\n<h2 id=\"CARD\"><a href=\"#CARD\" class=\"headerlink\" title=\"CARD\"></a>CARD</h2><p>在直播处理中，我将CARD out的routing理解为进入电脑机架的声音来源（source）。</p>\n<p>1-8：outputs 9-16；用于处理9-16中的effect bus，进行特殊化处理。（因此将EF等其他mixbus集中发送给OUTPUTS 9-16中才方便传输到电脑机架中。）</p>\n<p>9-16：local 9-16；麦克风接入。</p>\n<p>17-24：card 1-8；用于传输电脑的音乐。</p>\n<p>25-32：local 25-32；麦克风接入。</p>\n<p>（PS：local指的是本地XLR in）</p>\n<h2 id=\"XLR\"><a href=\"#XLR\" class=\"headerlink\" title=\"XLR\"></a>XLR</h2><p>均选择outputs通道。</p>\n<h2 id=\"AUX-in\"><a href=\"#AUX-in\" class=\"headerlink\" title=\"AUX in\"></a>AUX in</h2><p>1-6：user in 1-6；</p>\n<p>其中，user in 1-6的信号来自于card in 25-32中的信号。</p>\n<p>最后，aux in被发送至了mixbus中。</p>\n<p>应该是将处理后的特殊效果或者音乐发送给了aux。</p>\n<h1 id=\"实现功能\"><a href=\"#实现功能\" class=\"headerlink\" title=\"实现功能\"></a>实现功能</h1><h2 id=\"1-监听\"><a href=\"#1-监听\" class=\"headerlink\" title=\"1.监听\"></a>1.监听</h2><p>有的岗位需要实时监听直播间的音频情况，因此需要将信号汇总到到一个监听母线并进行输出。</p>\n<h2 id=\"2-输出\"><a href=\"#2-输出\" class=\"headerlink\" title=\"2.输出\"></a>2.输出</h2><p>直播现场、直播间的音频需要分开输出，并且直播现场要按照现场的声音制作规格进行分频段发送输出。因此需要2-3个输出母线用于信号的输出。</p>\n<h2 id=\"3-通讯\"><a href=\"#3-通讯\" class=\"headerlink\" title=\"3.通讯\"></a>3.通讯</h2><p>可以通过麦克风进行内部的交流，不过在后勤工作人员之间，用三方内通还是更为普遍的选择。</p>\n<blockquote>\n<p><a href=\"/image/Works/mix_console.jpg\" title=\"mix_console\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/mix_console.jpg\" alt=\"mix_console\"></a></p>\n<p><a href=\"/image/Works/mix_console2.jpg\" title=\"a61e3fcf952de401320980c0e72288c\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/mix_console2.jpg\" alt=\"a61e3fcf952de401320980c0e72288c\"></a></p>\n</blockquote>\n</div>","excerpt":"","more":"<div class=\".article-gallery\"><p>作者：段恺乐</p>\n<h1 id=\"一、路由详解\"><a href=\"#一、路由详解\" class=\"headerlink\" title=\"一、路由详解\"></a>一、路由详解</h1><p>先对不同接口、通道的具体设置进行讲解。</p>\n<h2 id=\"Inputs\"><a href=\"#Inputs\" class=\"headerlink\" title=\"Inputs\"></a>Inputs</h2><p>Inputs通道的routing思路是，选择inputs通道的sources，它们来自于local in以及其他通道接口的out。</p>\n<p>1-24：Card 1-24；</p>\n<p>也就是说，将机架的输出通道以及电脑音乐输入到了调音台的Inputs通道上，机架或CARD上的信号从哪儿来，稍后会进行解释。</p>\n<p>Inputs通道的source主要分类为：麦克风（LEAD、HS）以及电脑音频（音乐、音效等）；</p>\n<h2 id=\"MIXBUS\"><a href=\"#MIXBUS\" class=\"headerlink\" title=\"MIXBUS\"></a>MIXBUS</h2><p>mixbus的功能分为：PA、OB、Back、FX、SUB；</p>\n<p>然后又会通过HS、LEAD两种不同的麦克风分别汇总到不同的总线上；</p>\n<h2 id=\"Matrix\"><a href=\"#Matrix\" class=\"headerlink\" title=\"Matrix\"></a>Matrix</h2><p>从母线的职能层级来说，matrix＞main L&#x2F;R＞mixbus、group、aux等；</p>\n<p>matrix输出，从功能上将，分为OB、Main L&#x2F;R、S L&#x2F;R；</p>\n<p>因此，matrix作为主要的输出通道。</p>\n<h2 id=\"OUTPUTS\"><a href=\"#OUTPUTS\" class=\"headerlink\" title=\"OUTPUTS\"></a>OUTPUTS</h2><p>M32调音台上，[BLOCK]一栏中的路由，均是选择的in（输入）信号，不是out（输出）信号；</p>\n<p>而outputs，是M32调音台上虚拟的（virtual、digital）输出通道，每个可以选择自己通道的信号来源，也可以自由的assign给其他out通道使用。</p>\n<p>在大型直播商务中，outputs按功能分为主输出（main、side、sub）、BackUP、EF、OB等类型。</p>\n<p>信号来源根据功能需求，大多来自于mixbus或者matrix。</p>\n<p>为了方便处理，将OUTPUTS中1-8作为主输出，其他功能的放置在9-16通道中。具体原因会在稍后解释。</p>\n<h2 id=\"CARD\"><a href=\"#CARD\" class=\"headerlink\" title=\"CARD\"></a>CARD</h2><p>在直播处理中，我将CARD out的routing理解为进入电脑机架的声音来源（source）。</p>\n<p>1-8：outputs 9-16；用于处理9-16中的effect bus，进行特殊化处理。（因此将EF等其他mixbus集中发送给OUTPUTS 9-16中才方便传输到电脑机架中。）</p>\n<p>9-16：local 9-16；麦克风接入。</p>\n<p>17-24：card 1-8；用于传输电脑的音乐。</p>\n<p>25-32：local 25-32；麦克风接入。</p>\n<p>（PS：local指的是本地XLR in）</p>\n<h2 id=\"XLR\"><a href=\"#XLR\" class=\"headerlink\" title=\"XLR\"></a>XLR</h2><p>均选择outputs通道。</p>\n<h2 id=\"AUX-in\"><a href=\"#AUX-in\" class=\"headerlink\" title=\"AUX in\"></a>AUX in</h2><p>1-6：user in 1-6；</p>\n<p>其中，user in 1-6的信号来自于card in 25-32中的信号。</p>\n<p>最后，aux in被发送至了mixbus中。</p>\n<p>应该是将处理后的特殊效果或者音乐发送给了aux。</p>\n<h1 id=\"实现功能\"><a href=\"#实现功能\" class=\"headerlink\" title=\"实现功能\"></a>实现功能</h1><h2 id=\"1-监听\"><a href=\"#1-监听\" class=\"headerlink\" title=\"1.监听\"></a>1.监听</h2><p>有的岗位需要实时监听直播间的音频情况，因此需要将信号汇总到到一个监听母线并进行输出。</p>\n<h2 id=\"2-输出\"><a href=\"#2-输出\" class=\"headerlink\" title=\"2.输出\"></a>2.输出</h2><p>直播现场、直播间的音频需要分开输出，并且直播现场要按照现场的声音制作规格进行分频段发送输出。因此需要2-3个输出母线用于信号的输出。</p>\n<h2 id=\"3-通讯\"><a href=\"#3-通讯\" class=\"headerlink\" title=\"3.通讯\"></a>3.通讯</h2><p>可以通过麦克风进行内部的交流，不过在后勤工作人员之间，用三方内通还是更为普遍的选择。</p>\n<blockquote>\n<p><a href=\"/image/Works/mix_console.jpg\" title=\"mix_console\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/mix_console.jpg\" alt=\"mix_console\"></a></p>\n<p><a href=\"/image/Works/mix_console2.jpg\" title=\"a61e3fcf952de401320980c0e72288c\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/Works/mix_console2.jpg\" alt=\"a61e3fcf952de401320980c0e72288c\"></a></p>\n</blockquote>\n</div>"},{"title":"An Audio Format Converter based on ffmpeg","_content":"\n\n\n# A small tool used for Audio Convertion\n## Background\nThe .wav format is widely used in daily work, especially when mixing audio. However, when communicating with others and clients, the .mp3 format is often preferred.\nAdditionally, there are many other audio formats available today, such as .aac. Therefore, I need a tool to help me convert these audio files into .wav or .mp3 formats.\n## Structure\n### IsAudioFile?\nif the files user drag in are not audio files,they are not allowed to effect.\n```C#\n// 处理拖拽事件\nprivate void FileDragBox_DragEnter(object sender, DragEventArgs e)\n{\n // 判断是否是文件类型的拖拽\n if (e.Data.GetDataPresent(DataFormats.FileDrop))\n {\n  string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);\n  // 只接受音频文件（例如：wav, mp3）\n  bool isAudioFile = files.All(file => IsAudioFile(file));\n  e.Effect = isAudioFile ? DragDropEffects.Copy : DragDropEffects.None;\n }\n else\n {\n  e.Effect = DragDropEffects.None;\n }\n}\nprivate void FileDragBox_DragDrop(object sender, DragEventArgs e)\n{\n    // 获取拖拽的文件路径\n    string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);\n    if (files.Length > 0)\n    {\n        // 过滤出音频文件\n        var audioFiles = files.Where(file => IsAudioFile(file)).ToArray();\n        if (audioFiles.Length > 0)\n        {\n            // 显示拖拽的文件路径\n            FileDragBox.Text = string.Join(Environment.NewLine, audioFiles);\n        }\n        else\n        {\n            MessageBox.Show(\"只支持音频文件！\");\n        }\n    }\n}\n\n// 判断文件是否是音频文件（支持 .wav 和 .mp3 格式）\nprivate bool IsAudioFile(string file)\n {\n  string[] supportedExtensions = { \".wav\", \".mp3\", \".flac\", \".aac\", \".ogg\" }; // 可以根据需要扩展\n  return supportedExtensions.Contains(Path.GetExtension(file).ToLower());\n }\n```\n### GetIntoConvertion\n```C#\n // 处理转换按钮点击事件\n private void convertButton_Click(object sender, EventArgs e)\n {\n     string[] files = FileDragBox.Text.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);\n\n     if (files.Length == 0)\n     {\n         MessageBox.Show(\"请先拖拽文件！\");\n         return;\n     }\n\n     // 获取用户选择的输出格式\n     string selectedFormat = formatComboBox.SelectedItem.ToString().ToLower();\n     string outputExtension = selectedFormat == \"wav\" ? \".wav\" : \".mp3\";\n\n     // 执行批量转换\n     foreach (var file in files)\n     {\n         string outputFilePath = Path.ChangeExtension(file, outputExtension);\n         ConvertAudioFile(file, outputFilePath);\n     }\n }\n```\nAccroding to the selection of  itemBox,generate a path that we need,which is the prepare for the convertion.\n\n```C#\n// 转换音频文件\npublic static void ConvertAudioFile(string inputFilePath, string outputFilePath)\n{\n    try\n    {\n        // 如果输入和输出格式相同，直接返回（不进行转换）\n        if (Path.GetExtension(inputFilePath).ToLower() == Path.GetExtension(outputFilePath).ToLower())\n        {\n            MessageBox.Show(\"输入和输出文件格式相同，跳过转换。\");\n            return;\n        }\n\n        // 检查目标文件是否存在\n        if (File.Exists(outputFilePath))\n        {\n            // 提示用户是否覆盖文件\n            var result = MessageBox.Show($\"文件 {outputFilePath} 已存在，是否覆盖?\", \"确认覆盖\", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);\n            if (result == DialogResult.Yes)\n            {\n                // 删除目标文件\n                File.Delete(outputFilePath);\n            }\n            else\n            {\n                return; // 用户选择不覆盖，跳过转换\n            }\n        }\n\n        // 确保 FFmpeg 可用\n        string ffmpegPath = \"ffmpeg\"; // 假设 FFmpeg 已经在系统环境变量中\n\n        // 设置命令行参数\n        string arguments = $\"-i \\\"{inputFilePath}\\\" \\\"{outputFilePath}\\\"\";\n\n        // 启动进程执行 FFmpeg 命令\n        ProcessStartInfo startInfo = new ProcessStartInfo\n        {\n            FileName = ffmpegPath,\n            Arguments = arguments,\n            CreateNoWindow = true,  // 不显示命令行窗口\n            UseShellExecute = false,\n            RedirectStandardOutput = true, // 重定向标准输出\n            RedirectStandardError = true   // 重定向标准错误\n        };\n\n        Process process = Process.Start(startInfo);\n\n        // 设置进程超时\n        bool exited = process.WaitForExit(30000);  // 30秒超时\n        if (!exited)\n        {\n            process.Kill();\n            MessageBox.Show(\"转换超时！\");\n            return;\n        }\n\n        // 获取 FFmpeg 的标准输出和错误信息\n        string output = process.StandardOutput.ReadToEnd();\n        string error = process.StandardError.ReadToEnd();\n\n        // 输出 FFmpeg 的日志信息（可用于调试）\n        Console.WriteLine(\"FFmpeg Output: \" + output);\n        Console.WriteLine(\"FFmpeg Error: \" + error);\n\n        // 检查 FFmpeg 进程的退出码，0 表示成功\n        if (process.ExitCode != 0)\n        {\n            // 只有当有错误信息时才弹出错误\n            if (!string.IsNullOrEmpty(error))\n            {\n                MessageBox.Show($\"转换失败: {error}\", \"错误\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n            else\n            {\n                // 如果没有错误输出，但退出码非零，可以显示一个通用错误提示\n                MessageBox.Show(\"转换失败，但没有提供错误信息。\", \"错误\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n        }\n        else\n        {\n            // 如果退出码为 0，表示转换成功\n            MessageBox.Show($\"转换完成: {outputFilePath}\", \"成功\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n        }\n\n    }\n    catch (Exception ex)\n    {\n        MessageBox.Show($\"错误: {ex.Message}\");\n    }\n}\n```\nBased on the selection of the itemBox, generate the necessary paths, which will prepare for the conversion. Using the input and output paths, FFmpeg will automatically generate the desired audio file by starting an external process.","source":"_posts/音频软件开发_基于ffmpeg的音频格式转换器.md","raw":"---\ntitle: An Audio Format Converter based on ffmpeg\n---\n\n\n\n# A small tool used for Audio Convertion\n## Background\nThe .wav format is widely used in daily work, especially when mixing audio. However, when communicating with others and clients, the .mp3 format is often preferred.\nAdditionally, there are many other audio formats available today, such as .aac. Therefore, I need a tool to help me convert these audio files into .wav or .mp3 formats.\n## Structure\n### IsAudioFile?\nif the files user drag in are not audio files,they are not allowed to effect.\n```C#\n// 处理拖拽事件\nprivate void FileDragBox_DragEnter(object sender, DragEventArgs e)\n{\n // 判断是否是文件类型的拖拽\n if (e.Data.GetDataPresent(DataFormats.FileDrop))\n {\n  string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);\n  // 只接受音频文件（例如：wav, mp3）\n  bool isAudioFile = files.All(file => IsAudioFile(file));\n  e.Effect = isAudioFile ? DragDropEffects.Copy : DragDropEffects.None;\n }\n else\n {\n  e.Effect = DragDropEffects.None;\n }\n}\nprivate void FileDragBox_DragDrop(object sender, DragEventArgs e)\n{\n    // 获取拖拽的文件路径\n    string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);\n    if (files.Length > 0)\n    {\n        // 过滤出音频文件\n        var audioFiles = files.Where(file => IsAudioFile(file)).ToArray();\n        if (audioFiles.Length > 0)\n        {\n            // 显示拖拽的文件路径\n            FileDragBox.Text = string.Join(Environment.NewLine, audioFiles);\n        }\n        else\n        {\n            MessageBox.Show(\"只支持音频文件！\");\n        }\n    }\n}\n\n// 判断文件是否是音频文件（支持 .wav 和 .mp3 格式）\nprivate bool IsAudioFile(string file)\n {\n  string[] supportedExtensions = { \".wav\", \".mp3\", \".flac\", \".aac\", \".ogg\" }; // 可以根据需要扩展\n  return supportedExtensions.Contains(Path.GetExtension(file).ToLower());\n }\n```\n### GetIntoConvertion\n```C#\n // 处理转换按钮点击事件\n private void convertButton_Click(object sender, EventArgs e)\n {\n     string[] files = FileDragBox.Text.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);\n\n     if (files.Length == 0)\n     {\n         MessageBox.Show(\"请先拖拽文件！\");\n         return;\n     }\n\n     // 获取用户选择的输出格式\n     string selectedFormat = formatComboBox.SelectedItem.ToString().ToLower();\n     string outputExtension = selectedFormat == \"wav\" ? \".wav\" : \".mp3\";\n\n     // 执行批量转换\n     foreach (var file in files)\n     {\n         string outputFilePath = Path.ChangeExtension(file, outputExtension);\n         ConvertAudioFile(file, outputFilePath);\n     }\n }\n```\nAccroding to the selection of  itemBox,generate a path that we need,which is the prepare for the convertion.\n\n```C#\n// 转换音频文件\npublic static void ConvertAudioFile(string inputFilePath, string outputFilePath)\n{\n    try\n    {\n        // 如果输入和输出格式相同，直接返回（不进行转换）\n        if (Path.GetExtension(inputFilePath).ToLower() == Path.GetExtension(outputFilePath).ToLower())\n        {\n            MessageBox.Show(\"输入和输出文件格式相同，跳过转换。\");\n            return;\n        }\n\n        // 检查目标文件是否存在\n        if (File.Exists(outputFilePath))\n        {\n            // 提示用户是否覆盖文件\n            var result = MessageBox.Show($\"文件 {outputFilePath} 已存在，是否覆盖?\", \"确认覆盖\", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);\n            if (result == DialogResult.Yes)\n            {\n                // 删除目标文件\n                File.Delete(outputFilePath);\n            }\n            else\n            {\n                return; // 用户选择不覆盖，跳过转换\n            }\n        }\n\n        // 确保 FFmpeg 可用\n        string ffmpegPath = \"ffmpeg\"; // 假设 FFmpeg 已经在系统环境变量中\n\n        // 设置命令行参数\n        string arguments = $\"-i \\\"{inputFilePath}\\\" \\\"{outputFilePath}\\\"\";\n\n        // 启动进程执行 FFmpeg 命令\n        ProcessStartInfo startInfo = new ProcessStartInfo\n        {\n            FileName = ffmpegPath,\n            Arguments = arguments,\n            CreateNoWindow = true,  // 不显示命令行窗口\n            UseShellExecute = false,\n            RedirectStandardOutput = true, // 重定向标准输出\n            RedirectStandardError = true   // 重定向标准错误\n        };\n\n        Process process = Process.Start(startInfo);\n\n        // 设置进程超时\n        bool exited = process.WaitForExit(30000);  // 30秒超时\n        if (!exited)\n        {\n            process.Kill();\n            MessageBox.Show(\"转换超时！\");\n            return;\n        }\n\n        // 获取 FFmpeg 的标准输出和错误信息\n        string output = process.StandardOutput.ReadToEnd();\n        string error = process.StandardError.ReadToEnd();\n\n        // 输出 FFmpeg 的日志信息（可用于调试）\n        Console.WriteLine(\"FFmpeg Output: \" + output);\n        Console.WriteLine(\"FFmpeg Error: \" + error);\n\n        // 检查 FFmpeg 进程的退出码，0 表示成功\n        if (process.ExitCode != 0)\n        {\n            // 只有当有错误信息时才弹出错误\n            if (!string.IsNullOrEmpty(error))\n            {\n                MessageBox.Show($\"转换失败: {error}\", \"错误\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n            else\n            {\n                // 如果没有错误输出，但退出码非零，可以显示一个通用错误提示\n                MessageBox.Show(\"转换失败，但没有提供错误信息。\", \"错误\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n        }\n        else\n        {\n            // 如果退出码为 0，表示转换成功\n            MessageBox.Show($\"转换完成: {outputFilePath}\", \"成功\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n        }\n\n    }\n    catch (Exception ex)\n    {\n        MessageBox.Show($\"错误: {ex.Message}\");\n    }\n}\n```\nBased on the selection of the itemBox, generate the necessary paths, which will prepare for the conversion. Using the input and output paths, FFmpeg will automatically generate the desired audio file by starting an external process.","slug":"音频软件开发_基于ffmpeg的音频格式转换器","published":1,"date":"2025-04-13T10:39:03.428Z","updated":"2024-12-14T08:01:12.328Z","comments":1,"layout":"post","photos":[],"_id":"cm9h6j6xx0009sspy799pdoii","content":"<div class=\".article-gallery\"><h1 id=\"A-small-tool-used-for-Audio-Convertion\"><a href=\"#A-small-tool-used-for-Audio-Convertion\" class=\"headerlink\" title=\"A small tool used for Audio Convertion\"></a>A small tool used for Audio Convertion</h1><h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>The .wav format is widely used in daily work, especially when mixing audio. However, when communicating with others and clients, the .mp3 format is often preferred.<br>Additionally, there are many other audio formats available today, such as .aac. Therefore, I need a tool to help me convert these audio files into .wav or .mp3 formats.</p>\n<h2 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h2><h3 id=\"IsAudioFile\"><a href=\"#IsAudioFile\" class=\"headerlink\" title=\"IsAudioFile?\"></a>IsAudioFile?</h3><p>if the files user drag in are not audio files,they are not allowed to effect.</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理拖拽事件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">FileDragBox_DragEnter</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, DragEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 判断是否是文件类型的拖拽</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (e.Data.GetDataPresent(DataFormats.FileDrop))</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span>[] files = (<span class=\"built_in\">string</span>[])e.Data.GetData(DataFormats.FileDrop);</span><br><span class=\"line\">  <span class=\"comment\">// 只接受音频文件（例如：wav, mp3）</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> isAudioFile = files.All(<span class=\"keyword\">file</span> =&gt; IsAudioFile(<span class=\"keyword\">file</span>));</span><br><span class=\"line\">  e.Effect = isAudioFile ? DragDropEffects.Copy : DragDropEffects.None;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  e.Effect = DragDropEffects.None;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">FileDragBox_DragDrop</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, DragEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取拖拽的文件路径</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span>[] files = (<span class=\"built_in\">string</span>[])e.Data.GetData(DataFormats.FileDrop);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (files.Length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 过滤出音频文件</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> audioFiles = files.Where(<span class=\"keyword\">file</span> =&gt; IsAudioFile(<span class=\"keyword\">file</span>)).ToArray();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (audioFiles.Length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 显示拖拽的文件路径</span></span><br><span class=\"line\">            FileDragBox.Text = <span class=\"built_in\">string</span>.Join(Environment.NewLine, audioFiles);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;只支持音频文件！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断文件是否是音频文件（支持 .wav 和 .mp3 格式）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsAudioFile</span>(<span class=\"params\"><span class=\"built_in\">string</span> <span class=\"keyword\">file</span></span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span>[] supportedExtensions = &#123; <span class=\"string\">&quot;.wav&quot;</span>, <span class=\"string\">&quot;.mp3&quot;</span>, <span class=\"string\">&quot;.flac&quot;</span>, <span class=\"string\">&quot;.aac&quot;</span>, <span class=\"string\">&quot;.ogg&quot;</span> &#125;; <span class=\"comment\">// 可以根据需要扩展</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> supportedExtensions.Contains(Path.GetExtension(<span class=\"keyword\">file</span>).ToLower());</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"GetIntoConvertion\"><a href=\"#GetIntoConvertion\" class=\"headerlink\" title=\"GetIntoConvertion\"></a>GetIntoConvertion</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理转换按钮点击事件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">convertButton_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span>[] files = FileDragBox.Text.Split(<span class=\"keyword\">new</span>[] &#123; Environment.NewLine &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (files.Length == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MessageBox.Show(<span class=\"string\">&quot;请先拖拽文件！&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取用户选择的输出格式</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> selectedFormat = formatComboBox.SelectedItem.ToString().ToLower();</span><br><span class=\"line\">    <span class=\"built_in\">string</span> outputExtension = selectedFormat == <span class=\"string\">&quot;wav&quot;</span> ? <span class=\"string\">&quot;.wav&quot;</span> : <span class=\"string\">&quot;.mp3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行批量转换</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> <span class=\"keyword\">file</span> <span class=\"keyword\">in</span> files)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> outputFilePath = Path.ChangeExtension(<span class=\"keyword\">file</span>, outputExtension);</span><br><span class=\"line\">        ConvertAudioFile(<span class=\"keyword\">file</span>, outputFilePath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Accroding to the selection of  itemBox,generate a path that we need,which is the prepare for the convertion.</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转换音频文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConvertAudioFile</span>(<span class=\"params\"><span class=\"built_in\">string</span> inputFilePath, <span class=\"built_in\">string</span> outputFilePath</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果输入和输出格式相同，直接返回（不进行转换）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Path.GetExtension(inputFilePath).ToLower() == Path.GetExtension(outputFilePath).ToLower())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;输入和输出文件格式相同，跳过转换。&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查目标文件是否存在</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (File.Exists(outputFilePath))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 提示用户是否覆盖文件</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = MessageBox.Show(<span class=\"string\">$&quot;文件 <span class=\"subst\">&#123;outputFilePath&#125;</span> 已存在，是否覆盖?&quot;</span>, <span class=\"string\">&quot;确认覆盖&quot;</span>, MessageBoxButtons.YesNo, MessageBoxIcon.Warning);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result == DialogResult.Yes)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 删除目标文件</span></span><br><span class=\"line\">                File.Delete(outputFilePath);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>; <span class=\"comment\">// 用户选择不覆盖，跳过转换</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 确保 FFmpeg 可用</span></span><br><span class=\"line\">        <span class=\"built_in\">string</span> ffmpegPath = <span class=\"string\">&quot;ffmpeg&quot;</span>; <span class=\"comment\">// 假设 FFmpeg 已经在系统环境变量中</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置命令行参数</span></span><br><span class=\"line\">        <span class=\"built_in\">string</span> arguments = <span class=\"string\">$&quot;-i \\&quot;<span class=\"subst\">&#123;inputFilePath&#125;</span>\\&quot; \\&quot;<span class=\"subst\">&#123;outputFilePath&#125;</span>\\&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动进程执行 FFmpeg 命令</span></span><br><span class=\"line\">        ProcessStartInfo startInfo = <span class=\"keyword\">new</span> ProcessStartInfo</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            FileName = ffmpegPath,</span><br><span class=\"line\">            Arguments = arguments,</span><br><span class=\"line\">            CreateNoWindow = <span class=\"literal\">true</span>,  <span class=\"comment\">// 不显示命令行窗口</span></span><br><span class=\"line\">            UseShellExecute = <span class=\"literal\">false</span>,</span><br><span class=\"line\">            RedirectStandardOutput = <span class=\"literal\">true</span>, <span class=\"comment\">// 重定向标准输出</span></span><br><span class=\"line\">            RedirectStandardError = <span class=\"literal\">true</span>   <span class=\"comment\">// 重定向标准错误</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Process process = Process.Start(startInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置进程超时</span></span><br><span class=\"line\">        <span class=\"built_in\">bool</span> exited = process.WaitForExit(<span class=\"number\">30000</span>);  <span class=\"comment\">// 30秒超时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!exited)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            process.Kill();</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;转换超时！&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取 FFmpeg 的标准输出和错误信息</span></span><br><span class=\"line\">        <span class=\"built_in\">string</span> output = process.StandardOutput.ReadToEnd();</span><br><span class=\"line\">        <span class=\"built_in\">string</span> error = process.StandardError.ReadToEnd();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 输出 FFmpeg 的日志信息（可用于调试）</span></span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;FFmpeg Output: &quot;</span> + output);</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;FFmpeg Error: &quot;</span> + error);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查 FFmpeg 进程的退出码，0 表示成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.ExitCode != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 只有当有错误信息时才弹出错误</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(error))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                MessageBox.Show(<span class=\"string\">$&quot;转换失败: <span class=\"subst\">&#123;error&#125;</span>&quot;</span>, <span class=\"string\">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果没有错误输出，但退出码非零，可以显示一个通用错误提示</span></span><br><span class=\"line\">                MessageBox.Show(<span class=\"string\">&quot;转换失败，但没有提供错误信息。&quot;</span>, <span class=\"string\">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果退出码为 0，表示转换成功</span></span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">$&quot;转换完成: <span class=\"subst\">&#123;outputFilePath&#125;</span>&quot;</span>, <span class=\"string\">&quot;成功&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MessageBox.Show(<span class=\"string\">$&quot;错误: <span class=\"subst\">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Based on the selection of the itemBox, generate the necessary paths, which will prepare for the conversion. Using the input and output paths, FFmpeg will automatically generate the desired audio file by starting an external process.</p>\n</div>","excerpt":"","more":"<div class=\".article-gallery\"><h1 id=\"A-small-tool-used-for-Audio-Convertion\"><a href=\"#A-small-tool-used-for-Audio-Convertion\" class=\"headerlink\" title=\"A small tool used for Audio Convertion\"></a>A small tool used for Audio Convertion</h1><h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>The .wav format is widely used in daily work, especially when mixing audio. However, when communicating with others and clients, the .mp3 format is often preferred.<br>Additionally, there are many other audio formats available today, such as .aac. Therefore, I need a tool to help me convert these audio files into .wav or .mp3 formats.</p>\n<h2 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h2><h3 id=\"IsAudioFile\"><a href=\"#IsAudioFile\" class=\"headerlink\" title=\"IsAudioFile?\"></a>IsAudioFile?</h3><p>if the files user drag in are not audio files,they are not allowed to effect.</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理拖拽事件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">FileDragBox_DragEnter</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, DragEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 判断是否是文件类型的拖拽</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (e.Data.GetDataPresent(DataFormats.FileDrop))</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span>[] files = (<span class=\"built_in\">string</span>[])e.Data.GetData(DataFormats.FileDrop);</span><br><span class=\"line\">  <span class=\"comment\">// 只接受音频文件（例如：wav, mp3）</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> isAudioFile = files.All(<span class=\"keyword\">file</span> =&gt; IsAudioFile(<span class=\"keyword\">file</span>));</span><br><span class=\"line\">  e.Effect = isAudioFile ? DragDropEffects.Copy : DragDropEffects.None;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  e.Effect = DragDropEffects.None;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">FileDragBox_DragDrop</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, DragEventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取拖拽的文件路径</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span>[] files = (<span class=\"built_in\">string</span>[])e.Data.GetData(DataFormats.FileDrop);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (files.Length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 过滤出音频文件</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> audioFiles = files.Where(<span class=\"keyword\">file</span> =&gt; IsAudioFile(<span class=\"keyword\">file</span>)).ToArray();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (audioFiles.Length &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 显示拖拽的文件路径</span></span><br><span class=\"line\">            FileDragBox.Text = <span class=\"built_in\">string</span>.Join(Environment.NewLine, audioFiles);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;只支持音频文件！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断文件是否是音频文件（支持 .wav 和 .mp3 格式）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsAudioFile</span>(<span class=\"params\"><span class=\"built_in\">string</span> <span class=\"keyword\">file</span></span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">string</span>[] supportedExtensions = &#123; <span class=\"string\">&quot;.wav&quot;</span>, <span class=\"string\">&quot;.mp3&quot;</span>, <span class=\"string\">&quot;.flac&quot;</span>, <span class=\"string\">&quot;.aac&quot;</span>, <span class=\"string\">&quot;.ogg&quot;</span> &#125;; <span class=\"comment\">// 可以根据需要扩展</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> supportedExtensions.Contains(Path.GetExtension(<span class=\"keyword\">file</span>).ToLower());</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"GetIntoConvertion\"><a href=\"#GetIntoConvertion\" class=\"headerlink\" title=\"GetIntoConvertion\"></a>GetIntoConvertion</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理转换按钮点击事件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">convertButton_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span>[] files = FileDragBox.Text.Split(<span class=\"keyword\">new</span>[] &#123; Environment.NewLine &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (files.Length == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MessageBox.Show(<span class=\"string\">&quot;请先拖拽文件！&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取用户选择的输出格式</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> selectedFormat = formatComboBox.SelectedItem.ToString().ToLower();</span><br><span class=\"line\">    <span class=\"built_in\">string</span> outputExtension = selectedFormat == <span class=\"string\">&quot;wav&quot;</span> ? <span class=\"string\">&quot;.wav&quot;</span> : <span class=\"string\">&quot;.mp3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行批量转换</span></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> <span class=\"keyword\">file</span> <span class=\"keyword\">in</span> files)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> outputFilePath = Path.ChangeExtension(<span class=\"keyword\">file</span>, outputExtension);</span><br><span class=\"line\">        ConvertAudioFile(<span class=\"keyword\">file</span>, outputFilePath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Accroding to the selection of  itemBox,generate a path that we need,which is the prepare for the convertion.</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 转换音频文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConvertAudioFile</span>(<span class=\"params\"><span class=\"built_in\">string</span> inputFilePath, <span class=\"built_in\">string</span> outputFilePath</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果输入和输出格式相同，直接返回（不进行转换）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Path.GetExtension(inputFilePath).ToLower() == Path.GetExtension(outputFilePath).ToLower())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;输入和输出文件格式相同，跳过转换。&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查目标文件是否存在</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (File.Exists(outputFilePath))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 提示用户是否覆盖文件</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = MessageBox.Show(<span class=\"string\">$&quot;文件 <span class=\"subst\">&#123;outputFilePath&#125;</span> 已存在，是否覆盖?&quot;</span>, <span class=\"string\">&quot;确认覆盖&quot;</span>, MessageBoxButtons.YesNo, MessageBoxIcon.Warning);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result == DialogResult.Yes)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 删除目标文件</span></span><br><span class=\"line\">                File.Delete(outputFilePath);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>; <span class=\"comment\">// 用户选择不覆盖，跳过转换</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 确保 FFmpeg 可用</span></span><br><span class=\"line\">        <span class=\"built_in\">string</span> ffmpegPath = <span class=\"string\">&quot;ffmpeg&quot;</span>; <span class=\"comment\">// 假设 FFmpeg 已经在系统环境变量中</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置命令行参数</span></span><br><span class=\"line\">        <span class=\"built_in\">string</span> arguments = <span class=\"string\">$&quot;-i \\&quot;<span class=\"subst\">&#123;inputFilePath&#125;</span>\\&quot; \\&quot;<span class=\"subst\">&#123;outputFilePath&#125;</span>\\&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动进程执行 FFmpeg 命令</span></span><br><span class=\"line\">        ProcessStartInfo startInfo = <span class=\"keyword\">new</span> ProcessStartInfo</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            FileName = ffmpegPath,</span><br><span class=\"line\">            Arguments = arguments,</span><br><span class=\"line\">            CreateNoWindow = <span class=\"literal\">true</span>,  <span class=\"comment\">// 不显示命令行窗口</span></span><br><span class=\"line\">            UseShellExecute = <span class=\"literal\">false</span>,</span><br><span class=\"line\">            RedirectStandardOutput = <span class=\"literal\">true</span>, <span class=\"comment\">// 重定向标准输出</span></span><br><span class=\"line\">            RedirectStandardError = <span class=\"literal\">true</span>   <span class=\"comment\">// 重定向标准错误</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Process process = Process.Start(startInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置进程超时</span></span><br><span class=\"line\">        <span class=\"built_in\">bool</span> exited = process.WaitForExit(<span class=\"number\">30000</span>);  <span class=\"comment\">// 30秒超时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!exited)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            process.Kill();</span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">&quot;转换超时！&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取 FFmpeg 的标准输出和错误信息</span></span><br><span class=\"line\">        <span class=\"built_in\">string</span> output = process.StandardOutput.ReadToEnd();</span><br><span class=\"line\">        <span class=\"built_in\">string</span> error = process.StandardError.ReadToEnd();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 输出 FFmpeg 的日志信息（可用于调试）</span></span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;FFmpeg Output: &quot;</span> + output);</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;FFmpeg Error: &quot;</span> + error);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查 FFmpeg 进程的退出码，0 表示成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.ExitCode != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 只有当有错误信息时才弹出错误</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrEmpty(error))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                MessageBox.Show(<span class=\"string\">$&quot;转换失败: <span class=\"subst\">&#123;error&#125;</span>&quot;</span>, <span class=\"string\">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果没有错误输出，但退出码非零，可以显示一个通用错误提示</span></span><br><span class=\"line\">                MessageBox.Show(<span class=\"string\">&quot;转换失败，但没有提供错误信息。&quot;</span>, <span class=\"string\">&quot;错误&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果退出码为 0，表示转换成功</span></span><br><span class=\"line\">            MessageBox.Show(<span class=\"string\">$&quot;转换完成: <span class=\"subst\">&#123;outputFilePath&#125;</span>&quot;</span>, <span class=\"string\">&quot;成功&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        MessageBox.Show(<span class=\"string\">$&quot;错误: <span class=\"subst\">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Based on the selection of the itemBox, generate the necessary paths, which will prepare for the conversion. Using the input and output paths, FFmpeg will automatically generate the desired audio file by starting an external process.</p>\n</div>"},{"_content":"---\ntitle= 游戏声音设计学习\n---\n\n## 地狱之刃2：塞娜的传说\n### Hybrid breathing混合呼吸设计\n在自由度高的地方，采用非线性的程序设计呼吸（设置state等进行切换）；\n在线性化的叙事流程中（例如实时渲染的动画），采用线性的录制的呼吸声，在演员录制动捕的时候进行同期录音。\n通过在SEQUENCE中添加marker点，marker触发后，会播放线性的声音，播放结束后会进入程序性的声音，直到触发下一个marker。\n\n### 可以通过RTPC来控制**线性流程**中，不同阶段的声音变化。\n\n### RMS Reading\n\n通过监测Ambience 的RMS值，来控制dialogue的值，然后再反过来控制对话对ambience 的duck值。\n\n### 为了带来更深、震撼的情感体验，将语音和音乐推到最前面是个可选项。\n\n### Trition Acoustics\n\nProject Acoustics基于Triton技术,这是一个先进的声学模拟引擎,能够处理复杂的三维空间中的声音传播和反射。\n支持Untiy\\Unreal以及wwise.\n\n## 汽车引擎声音设计\nhttps://www.audiokinetic.com/zh/blog/loop-based-car-engine-design-with-wwise-part-1/\n\n\n\n## 漫威蜘蛛侠2\n### Mixing\n#### 总线设计\n非必要情况下，不会添加新的总线，会让整体局面更复杂。\n以减法为主，极少做加法\n创建总线的一些情境：\n\n- state\\RTPC。控制一组声音的音量或者其他参数\n- 动态EQ\\混音。有时候为了针对不同的频段做动态均衡。\n- 压缩\\效果\n- 发声数限制。为了去限制一个组别的发声数量。\n- 电平检测。为了对一些内容进行检测。\n- 总线配置差异化。某一组的音频需要做特殊的效果。\n- 是否暂停。是否需要暂停某些音频。\n- 不用于静态音量差异。总线上的音量尽可能保持默认。\n#### 电平检测\n检测的电平值本身的意义不是特别大，主要是利用meter值去进行其他操作。\n例如对白，会分别检测总的，以及低中高三个频段的电平值。\n\n### 动态均衡\n通过电平检测值实现。\n主要应用场景：\n- 对白 优先于 音乐\n![image-20250215162814914](image/image-20250215162814914.png)![image-20250215162814960]\n- 对白 优先于 音效\n- 战斗音效和关键音效 优先于 环境音效和非关键音效\n- 战斗音效和关键音效 优先于 音乐\n- 音乐 优先于 环境音\n- 音乐 优先于 非关键音效\n\n#### 特殊的侧链压缩处理增强打击感\n通过减法增强效果。 \n通过战斗音效的电平检测，来降低对应混响的音量，以达到增强打击感的效果。\n\n### 城市声景\n城市声音景观组成：\n第一部分（可见的）：环境点声源、行人、载具、其他变量（天气或者犯罪事件）\n第二部分（不见的）：环境音基调，远距离区域声音，海岸线\\水面声音\n\n#### 环境音\n每个不同的区域有独特的环境音基调；\n需要大体积声源；\n内容随高度进行声响摆位。(在高处时，声音大部分在下面，通过RTPC控制。\n)\n\n#### 远距离区域系统\n中远距离环境音，中远两个距离分别有5个发声点环绕着玩家，与玩家保持固定的偏移，只检测了水平的距离。（无论你高度如何，中远距离环境音不会改变）\n具体的声音内容通过State和RTPC进行调整。例如，水上的监测点则不会发出声音。\nDDS屏蔽值（shelter value）\n点声源与听者的屏蔽程度，从听者向DDS点声源进行射线检测，仅作用于水平面。\n邻近区域\n海岸线周边样条曲线，在曲线上播放海水拍打音效\n\n\n#### 性能优化\n- 转码设置\nATRAC9解码：索尼的PS解码器，压缩比很不错，但是文件体积很大\n 硬件解码：所有声音\n 软件解码\\CPU：Wwise内容\nWEM Opus解码：压缩比更大，且文件质量也有保证，但会超出硬件解码预算，导致部分音频不会被播放。\n 硬件解码：所有声音\n 软件解码\\CPU：Wwise内容\nVobis解码：只用vorbis超出CPU预算。\n 硬件解码：无\n 软件解码\\CPU：Wwise内容、所有声音\n\n最终采用组合解码的方式，改善了内存与磁盘的使用空间，音频保真度没有妥协，根据声音类型进行解码方式选择sharesets：\nAmbience_Beds\nAmbience_Default\nAmbience_Rain\nCHR_Default\nCine_Atmos\nCine_Default\nCine_Dialogue\nCS_Default\nDefault\nDialog Default\nDialog Screen Reader\nFoley_Cloth_Footsteps\nFoley_Water\nHero_Abilities\nLFE_Discrete\nHaptics_Default\nMusic_Default\nNPC_Weapons&Attack\nObjects_General\nObjects_Physics\nUI_HUD\nVehicles\nVehicles Engines\nWalla Default\nWeapons\nWeapons_Tails\n\nATRAC9：短音效、数量少的声音 - UI、物品、打斗、技能等\nWEM Opus：长文件、数量多的 - 对白音乐、环境、CG贴片等\nVorbis：可能会同时大量播放的 - 载具，雨声等\n\n- 流播放\n音频的流播放（Streaming） 是一种动态加载和播放音频资源的技术。其核心思想是：不一次性将整个音频文件加载到内存中，而是在播放过程中按需从存储设备（如硬盘、SSD）逐块读取音频数据，边读取边播放。这一技术主要用于处理大型音频文件（如背景音乐、长对话、环境音效等），以优化内存使用和性能。\n\n> 流播放的工作原理\n**分段加载**：\n音频文件被分成多个小数据块（chunks），播放时仅加载当前需要播放的部分到内存缓冲区。\n**动态缓冲**：\n在播放过程中，后台持续从存储设备读取后续数据块，填充到内存缓冲区，确保播放的连续性。\n**内存释放**：\n已播放完的数据块会被及时释放，避免内存占用过高。\n>\n为什么需要流播放？\n**节省内存**：\n大型音频文件（如长达数分钟的背景音乐）直接加载到内存会占用大量空间，流播放仅保留当前播放的片段。\n**支持大文件**：\n适用于开放世界游戏、电影化叙事游戏中需要长时间播放的高质量音频。\n**动态内容切换**：\n支持无缝切换不同音频片段（如根据游戏场景动态调整环境音效）。\n**减少加载延迟**：\n无需等待整个文件加载完成即可开始播放。\n>\n流播放的典型应用场景\n**背景音乐（BGM）**：\n长时播放的高保真音乐，尤其适用于开放世界或剧情驱动的游戏。\n**语音对话**：\n角色长篇对话或剧情旁白，避免一次性加载数百MB的语音文件。\n**环境音效**：\n持续的风声、雨声、城市噪音等动态环境音效。\n**动态音乐系统**：\n根据玩家行为实时混合不同音轨（如战斗音乐过渡到探索音乐）。\n>\n流播放的优缺点\n**优点**：\n显著降低内存占用。\n支持超大音频文件（如数十分钟的音乐）。\n灵活应对动态内容需求（如随机事件触发的音效）。\n**缺点**：\n增加磁盘I/O压力，可能影响性能（需优化读取策略）。\n需要管理缓冲区，防止播放中断（如硬盘速度不足时）。\n对音频格式有要求（需支持分段解码，如.wav、.ogg等流式编码格式）。\n>\n实现流播放的关键技术\n**音频中间件支持**：\nWwise、FMOD等工具提供流播放接口，简化开发流程。\n例如在FMOD中使用 FMOD_CREATESTREAM 标志创建流式音频。\n**引擎集成**：\nUnity通过 AudioClip 的 LoadType 设置为 Streaming 实现。\nUnreal Engine 通过 Sound Wave 的 Streaming 选项启用。\n**数据预读取与缓冲**：\n设置合理的缓冲区大小，平衡内存占用和读取频率。\n使用多线程避免主线程卡顿。\n\nFile Packager 负责将启用了流播放（Streaming）的 音频文件 打包成外部文件（如 .pck 或 .bnk），这些文件独立于 SoundBank 存在。\n  实际音频数据（如 .wav、.ogg 文件）。\n  流播放所需的块（Chunk）索引信息。\n运行时功能：\n游戏通过 Wwise 引擎直接从这些外部包中按需加载音频数据块，实现流播放。\n\nSoundBank 主要存储的是 音频事件的逻辑定义 和 音频资源的元数据，例如：\n事件（Events）和动作（Actions）。\n  音频对象的结构（如容器、随机播放规则、混合总线参数）。\n  非流式音频数据（如果音频未启用流播放，则音频文件会被直接打包进 SoundBank）。\n对流式音频文件的引用（如果音频启用了流播放，SoundBank 仅存储其路径和元数据，而非实际音频数据）。\n\n#### 内存处理\n减少运行内存的占用\n- 从soundbank中移除未使用的音频内容\n很多结构化的数据并没有被实际运用。\n- 重构复杂的大型的switch容器，可以减少内存的占用\n\n#### 3D音频混音中的性能\nEQ并不适用于音频对象\n3D音频对象会大幅提升CPU的使用率\n将音频对象留给某些特定的声音，例如环境声或者敌人。\n3D Audio Bed Mixer plugin会节约大量内存。\n\n#### 总体CPU性能表现\n减少API调用。\n在不需要时动态bypass掉插件或者提前离线渲染好。\n先提前管理好声音的数目，再进入WWise，不要过度依赖于playback objects limits。\nWwise中设置目标平台的最大发声数。例如一百个。\n好好利用Wwise的profiler，来进行性能分析。\n\n## 永劫无间手游移植\n### 移动端移植\n#### Wwise内优化方案\n- 手机端采样率是36K以及24K。\n- 过长的音频文件采样streaming加载。需要结合限制同时播放音频数量以及设置加载优先级，以防止手机的I/O性能过载。\n- 资源合并删减，简化structure。、\n- Bank拆分。（将3p的资源进行了删减和优化）\n\n#### 内存优化\n- 用量与I\\O：用量过低会导致IO更为频繁，因此需要平衡\n- Soundbank：进行评估，是否继续引用或者进行卸载\n- 动静态分离：UI、脚步声等需要常驻的Bank,即使处于离线也不会被卸载\n- LRU：根据内存情况，动态的可以卸载掉被评估的，不被需要（不重要）的bank\n- 内存分配器：在RPmalloc上做分级机制，对老的手机进行更多优化等操作\n\n#### 性能优化\n- 复用对象池，减少不必要的重建\n- Tick rate策略：对object的更新是基于优先级，例如距离或者重要度等，有的是每帧更新，有的可能5帧才更新一次。\n- sample rate：采样率下采。部分机型对音频质量要求高，当发现你采样率下调之后，会自己上采样，增加功耗。\n- 梯度计算：评估某个声音是否需要继续计算，如果不需要则直接打回。某些游戏会继续渲染但保持音量为0.\n- 利用temporal，小核心，多线程。主核心留给大处理。\n\n\n### 移动端空间音频\n#### 混响\n实时混响：覆盖全地图建筑结构，Matrix Reverb + ReverbTime\\Reverb Energy RTPC\n卷积混响：表现特征空间，如落日寺，自研卷积混响插件、游戏场景的卷积采样、特定区域触发\n>卷积混响\n就是在真实场景采集到的脉冲信号（IR），能够更真实的还原场景空间特征。\n\n#### 反射\n- 通用反射：通过程序实时计算到的反射点、反射参数、播放生成的反射source并控制播放。\n- 室外尾音：在反射点播放尾音的样本，并通过RPTC控制尾音大小，可与通用反射叠加。\n- 特殊区域尾音：例如峡谷，需要在山谷两头播放尾音。\n\n#### 阻挡（obstacle）\n为了节省手机性能，只判断了敌我之间是否有障碍物。损失频段但不损失音量（与视觉提示相配合）。\n\n\n### 空间音频的实现\n不与基础音频管线耦合。手游音频开发首要目标是项目能运行跑起来，而音频效果的表现优化是在其后面的，因此不能与基础音频管线冲突或者有关联。\n开销小并且稳定。在不同机型上都能有稳定的表现。\n核心：生成一个与游戏内容实时匹配的AudioScene,在audioscene里面计算模拟最终描述空间音频渲染所需要的数据。\n\n#### 要素Feature\n早期反射、后期混响、尾音\n\n现成技术方案：\n- 离线\n体素：离线写死的方案不适合会实时变动的场景。会过度运算（overdraw）\nProbe与体素类似，但优化会好一些。\ntrigger：场景过大，挂接过于繁杂。\n- 实时\n几何、波动\n\n早期反射参数需求：反射距离、反射强度、瞬态性\n后期混响参数需求：RT60、空间复杂度\n尾音参数需求：空间开放度\n\n最终采用方案：\n基于icosphere体投影构建一阶声学空间\n相较于体素，不会overdraw，计算更为高效。\n\n体投影优势：\n每个面彼此独立，可以利用多线程\n根据算力的优先级程度可以分配不同朝向的算力分配，也就是面可以细分或者退化。\n\nicosphere优势：\n可以分割出top、bottom、middle三个部分。\n\n#### 系统设计\n系统优化：\n所有计算job化：对于多线程计算任务的抽象。会给每个job分配最低权重，强制让其到小核心运行。\n利用temporal；\n无效的job剔除；\n算法优化：\nhalton-sequence替代random。\n三角形索引。\n不规则体积估算。\n\n运行框架：\n\n![屏幕截图 2025-02-17 181103](images/屏幕截图 2025-02-17 181103.png)\n\n#### 实现优化\n简化曲线\n使用ringbuffer实现早期反射：\n 内存可控：按照最远反射距离30m，48KHZ算≈0.017MB\n 开销：取决于最大echo数量，手游是三个。\nRingbuffer按需激活：\n最多用三个反射的Emitter 表现全部早反：左右中\n\n复杂场景：采用trigger\n\n### dobly atmos接入\n按照wwise官方说明书进行。\n设计考量，将战斗音效接入atmos，其他音乐环境音效走passthrough，避免影响战斗中的声音。\n\n\n\n## 地狱潜兵2游戏混音\n### 声音的优先级设定by HDR（High Dynamic Range）\n- 需要解决的问题-掩蔽\n很多声音同时播放，重要的声音听不清楚（掩蔽效应） \n解决办法：闪避系统ducking\n地狱潜兵中，采用HDR，设置优先级：确定哪种声音更重要？\n爆炸声可能比较大，但是附近敌人的声音更重要。——响度≠重要性。\n\n- 优先级设定\n首先，将声音进行分类，详细程度可以视情况而定。\n优先级映射：什么声音对玩家比较重要，由低到高进行排序。并且，排序低并不代表不重要，而是相对不重要而已。\n根据游戏声音分类和优先级排序，进行声音闪避系统设计。\n\n### HDR的基础知识\n详情参见wwise手册。\n- 逻辑音量值-total volume=voice volume +output bus volume +bus volume\n- 对于HDR来说， total volume越高，优先级就越高。\n- 两个及以上的声音在播放时，优先级高的会对低的进行压低。\n- 闪避幅度：等于两个声音total volume 差值。\n- 包络：每种声音都指定了HDR包络。利用高优先级的声音对低优先级的声音做闪避处理（就像独立的sidechain）。\n\n\n\n## 哈利波特·魔法觉醒\n- 抽卡音效设计\n在抽卡中，根据抽卡出的物品材质不同，也会进行细分，而不仅仅只根据卡牌的稀有度。\n在抽卡过程中，根据卡片出现的摆放的位置，也会做pan的变化。\n- 魔杖/物品展示音效设计\n层级：写实层/材质层 + 乐音层 + 特征层\n- 节日音频设计\n强化节日的音频特色元素。\n- 魔法地图声音景观设计\n为2D的地图，设计3D的景观。\n- puredata+heavy开发的音频混响插件，可以节省音频package的大小。\n- IP价值的利用最大化。语音设计中，贴近原著影片声线。\n- 创意设计，丰富玩家个性化。兴奋性需求奖励的道具（一开始不抱有期待，但一旦满足则会充满惊喜.）节假日，融入音频设计。中国传统节日，根据现实时间，实现不同声音效果。细节设计上满足玩家的收集欲。时装设定。\n- **音频开发从玩家的需求产生**，去开发对应的技术。例如，自定义咒语系统；wWISE AUDIO INPUT可以使用外部音频/话筒；从其他音乐平台获取音频串流-音乐电台。\n- 音乐电台流程：流媒体平台API - 给出请求清单 - 返回清单获取地址 - ...\n\n## 星球：重启\n表现力与性能的均衡与取舍：最大限度地提升单位资源的音频表现力。\n环境声交互性：全景声的下混，俯仰角的环境声发生变化。仰角-天空；俯角-地。\n- 载具声音的实现\n- 动态混音：精细化音频-与玩法是否有关等\n需要提前同意音频的标准，优先级，音频播放数量等。\n响度设置-不仅仅是音频样本，还包括Wwise中的音频响度。\n动态混音可以较早的介入整体音频开发，早期可以粗糙一些，这样可以暴露很多问题\n- 分机型测试-安卓与苹果的区别。\n\n-音频程序部分\n\n\n## 巅峰极速\n- 车辆运动的声音构成：先进行细分，再部分进行整合。\n- 车辆录制流程：发起录音-预约车辆（私人车主/汽车厂商...）-预约场地-进行录制（赛场跑道录制或者室内马力机录制）。麦克风可承受声压级要大。\n- 轮胎声音的录制。轮胎声音的分类。录制中，赛道漂移音色区别大，定圆漂移稳定的LOOP声。录制过久，轮胎会被磨平，音色会有差异。选择电车（避免排气、引擎等声音的干扰），选择后驱，更好漂移。\n- 轮胎声音后期处理问题：一个样本还是多个样本（性能与表现的取舍）；随机样本还是粒子合成（sound seed grain）。轮胎与地面材质。\n- 录音方案的选择：\nXY立体声、double MS多通道：近咪芯收音，无相位问题，便于后期处理。\nORTF立体声：接近人耳的听觉感受，用于CG制作。\n枪麦录制：补充点声源。\n\n- 音乐与交互音乐\n文化与节奏感。","source":"_posts/Wwise Tour声音设计分享.md","raw":"---\ntitle= 游戏声音设计学习\n---\n\n## 地狱之刃2：塞娜的传说\n### Hybrid breathing混合呼吸设计\n在自由度高的地方，采用非线性的程序设计呼吸（设置state等进行切换）；\n在线性化的叙事流程中（例如实时渲染的动画），采用线性的录制的呼吸声，在演员录制动捕的时候进行同期录音。\n通过在SEQUENCE中添加marker点，marker触发后，会播放线性的声音，播放结束后会进入程序性的声音，直到触发下一个marker。\n\n### 可以通过RTPC来控制**线性流程**中，不同阶段的声音变化。\n\n### RMS Reading\n\n通过监测Ambience 的RMS值，来控制dialogue的值，然后再反过来控制对话对ambience 的duck值。\n\n### 为了带来更深、震撼的情感体验，将语音和音乐推到最前面是个可选项。\n\n### Trition Acoustics\n\nProject Acoustics基于Triton技术,这是一个先进的声学模拟引擎,能够处理复杂的三维空间中的声音传播和反射。\n支持Untiy\\Unreal以及wwise.\n\n## 汽车引擎声音设计\nhttps://www.audiokinetic.com/zh/blog/loop-based-car-engine-design-with-wwise-part-1/\n\n\n\n## 漫威蜘蛛侠2\n### Mixing\n#### 总线设计\n非必要情况下，不会添加新的总线，会让整体局面更复杂。\n以减法为主，极少做加法\n创建总线的一些情境：\n\n- state\\RTPC。控制一组声音的音量或者其他参数\n- 动态EQ\\混音。有时候为了针对不同的频段做动态均衡。\n- 压缩\\效果\n- 发声数限制。为了去限制一个组别的发声数量。\n- 电平检测。为了对一些内容进行检测。\n- 总线配置差异化。某一组的音频需要做特殊的效果。\n- 是否暂停。是否需要暂停某些音频。\n- 不用于静态音量差异。总线上的音量尽可能保持默认。\n#### 电平检测\n检测的电平值本身的意义不是特别大，主要是利用meter值去进行其他操作。\n例如对白，会分别检测总的，以及低中高三个频段的电平值。\n\n### 动态均衡\n通过电平检测值实现。\n主要应用场景：\n- 对白 优先于 音乐\n![image-20250215162814914](image/image-20250215162814914.png)![image-20250215162814960]\n- 对白 优先于 音效\n- 战斗音效和关键音效 优先于 环境音效和非关键音效\n- 战斗音效和关键音效 优先于 音乐\n- 音乐 优先于 环境音\n- 音乐 优先于 非关键音效\n\n#### 特殊的侧链压缩处理增强打击感\n通过减法增强效果。 \n通过战斗音效的电平检测，来降低对应混响的音量，以达到增强打击感的效果。\n\n### 城市声景\n城市声音景观组成：\n第一部分（可见的）：环境点声源、行人、载具、其他变量（天气或者犯罪事件）\n第二部分（不见的）：环境音基调，远距离区域声音，海岸线\\水面声音\n\n#### 环境音\n每个不同的区域有独特的环境音基调；\n需要大体积声源；\n内容随高度进行声响摆位。(在高处时，声音大部分在下面，通过RTPC控制。\n)\n\n#### 远距离区域系统\n中远距离环境音，中远两个距离分别有5个发声点环绕着玩家，与玩家保持固定的偏移，只检测了水平的距离。（无论你高度如何，中远距离环境音不会改变）\n具体的声音内容通过State和RTPC进行调整。例如，水上的监测点则不会发出声音。\nDDS屏蔽值（shelter value）\n点声源与听者的屏蔽程度，从听者向DDS点声源进行射线检测，仅作用于水平面。\n邻近区域\n海岸线周边样条曲线，在曲线上播放海水拍打音效\n\n\n#### 性能优化\n- 转码设置\nATRAC9解码：索尼的PS解码器，压缩比很不错，但是文件体积很大\n 硬件解码：所有声音\n 软件解码\\CPU：Wwise内容\nWEM Opus解码：压缩比更大，且文件质量也有保证，但会超出硬件解码预算，导致部分音频不会被播放。\n 硬件解码：所有声音\n 软件解码\\CPU：Wwise内容\nVobis解码：只用vorbis超出CPU预算。\n 硬件解码：无\n 软件解码\\CPU：Wwise内容、所有声音\n\n最终采用组合解码的方式，改善了内存与磁盘的使用空间，音频保真度没有妥协，根据声音类型进行解码方式选择sharesets：\nAmbience_Beds\nAmbience_Default\nAmbience_Rain\nCHR_Default\nCine_Atmos\nCine_Default\nCine_Dialogue\nCS_Default\nDefault\nDialog Default\nDialog Screen Reader\nFoley_Cloth_Footsteps\nFoley_Water\nHero_Abilities\nLFE_Discrete\nHaptics_Default\nMusic_Default\nNPC_Weapons&Attack\nObjects_General\nObjects_Physics\nUI_HUD\nVehicles\nVehicles Engines\nWalla Default\nWeapons\nWeapons_Tails\n\nATRAC9：短音效、数量少的声音 - UI、物品、打斗、技能等\nWEM Opus：长文件、数量多的 - 对白音乐、环境、CG贴片等\nVorbis：可能会同时大量播放的 - 载具，雨声等\n\n- 流播放\n音频的流播放（Streaming） 是一种动态加载和播放音频资源的技术。其核心思想是：不一次性将整个音频文件加载到内存中，而是在播放过程中按需从存储设备（如硬盘、SSD）逐块读取音频数据，边读取边播放。这一技术主要用于处理大型音频文件（如背景音乐、长对话、环境音效等），以优化内存使用和性能。\n\n> 流播放的工作原理\n**分段加载**：\n音频文件被分成多个小数据块（chunks），播放时仅加载当前需要播放的部分到内存缓冲区。\n**动态缓冲**：\n在播放过程中，后台持续从存储设备读取后续数据块，填充到内存缓冲区，确保播放的连续性。\n**内存释放**：\n已播放完的数据块会被及时释放，避免内存占用过高。\n>\n为什么需要流播放？\n**节省内存**：\n大型音频文件（如长达数分钟的背景音乐）直接加载到内存会占用大量空间，流播放仅保留当前播放的片段。\n**支持大文件**：\n适用于开放世界游戏、电影化叙事游戏中需要长时间播放的高质量音频。\n**动态内容切换**：\n支持无缝切换不同音频片段（如根据游戏场景动态调整环境音效）。\n**减少加载延迟**：\n无需等待整个文件加载完成即可开始播放。\n>\n流播放的典型应用场景\n**背景音乐（BGM）**：\n长时播放的高保真音乐，尤其适用于开放世界或剧情驱动的游戏。\n**语音对话**：\n角色长篇对话或剧情旁白，避免一次性加载数百MB的语音文件。\n**环境音效**：\n持续的风声、雨声、城市噪音等动态环境音效。\n**动态音乐系统**：\n根据玩家行为实时混合不同音轨（如战斗音乐过渡到探索音乐）。\n>\n流播放的优缺点\n**优点**：\n显著降低内存占用。\n支持超大音频文件（如数十分钟的音乐）。\n灵活应对动态内容需求（如随机事件触发的音效）。\n**缺点**：\n增加磁盘I/O压力，可能影响性能（需优化读取策略）。\n需要管理缓冲区，防止播放中断（如硬盘速度不足时）。\n对音频格式有要求（需支持分段解码，如.wav、.ogg等流式编码格式）。\n>\n实现流播放的关键技术\n**音频中间件支持**：\nWwise、FMOD等工具提供流播放接口，简化开发流程。\n例如在FMOD中使用 FMOD_CREATESTREAM 标志创建流式音频。\n**引擎集成**：\nUnity通过 AudioClip 的 LoadType 设置为 Streaming 实现。\nUnreal Engine 通过 Sound Wave 的 Streaming 选项启用。\n**数据预读取与缓冲**：\n设置合理的缓冲区大小，平衡内存占用和读取频率。\n使用多线程避免主线程卡顿。\n\nFile Packager 负责将启用了流播放（Streaming）的 音频文件 打包成外部文件（如 .pck 或 .bnk），这些文件独立于 SoundBank 存在。\n  实际音频数据（如 .wav、.ogg 文件）。\n  流播放所需的块（Chunk）索引信息。\n运行时功能：\n游戏通过 Wwise 引擎直接从这些外部包中按需加载音频数据块，实现流播放。\n\nSoundBank 主要存储的是 音频事件的逻辑定义 和 音频资源的元数据，例如：\n事件（Events）和动作（Actions）。\n  音频对象的结构（如容器、随机播放规则、混合总线参数）。\n  非流式音频数据（如果音频未启用流播放，则音频文件会被直接打包进 SoundBank）。\n对流式音频文件的引用（如果音频启用了流播放，SoundBank 仅存储其路径和元数据，而非实际音频数据）。\n\n#### 内存处理\n减少运行内存的占用\n- 从soundbank中移除未使用的音频内容\n很多结构化的数据并没有被实际运用。\n- 重构复杂的大型的switch容器，可以减少内存的占用\n\n#### 3D音频混音中的性能\nEQ并不适用于音频对象\n3D音频对象会大幅提升CPU的使用率\n将音频对象留给某些特定的声音，例如环境声或者敌人。\n3D Audio Bed Mixer plugin会节约大量内存。\n\n#### 总体CPU性能表现\n减少API调用。\n在不需要时动态bypass掉插件或者提前离线渲染好。\n先提前管理好声音的数目，再进入WWise，不要过度依赖于playback objects limits。\nWwise中设置目标平台的最大发声数。例如一百个。\n好好利用Wwise的profiler，来进行性能分析。\n\n## 永劫无间手游移植\n### 移动端移植\n#### Wwise内优化方案\n- 手机端采样率是36K以及24K。\n- 过长的音频文件采样streaming加载。需要结合限制同时播放音频数量以及设置加载优先级，以防止手机的I/O性能过载。\n- 资源合并删减，简化structure。、\n- Bank拆分。（将3p的资源进行了删减和优化）\n\n#### 内存优化\n- 用量与I\\O：用量过低会导致IO更为频繁，因此需要平衡\n- Soundbank：进行评估，是否继续引用或者进行卸载\n- 动静态分离：UI、脚步声等需要常驻的Bank,即使处于离线也不会被卸载\n- LRU：根据内存情况，动态的可以卸载掉被评估的，不被需要（不重要）的bank\n- 内存分配器：在RPmalloc上做分级机制，对老的手机进行更多优化等操作\n\n#### 性能优化\n- 复用对象池，减少不必要的重建\n- Tick rate策略：对object的更新是基于优先级，例如距离或者重要度等，有的是每帧更新，有的可能5帧才更新一次。\n- sample rate：采样率下采。部分机型对音频质量要求高，当发现你采样率下调之后，会自己上采样，增加功耗。\n- 梯度计算：评估某个声音是否需要继续计算，如果不需要则直接打回。某些游戏会继续渲染但保持音量为0.\n- 利用temporal，小核心，多线程。主核心留给大处理。\n\n\n### 移动端空间音频\n#### 混响\n实时混响：覆盖全地图建筑结构，Matrix Reverb + ReverbTime\\Reverb Energy RTPC\n卷积混响：表现特征空间，如落日寺，自研卷积混响插件、游戏场景的卷积采样、特定区域触发\n>卷积混响\n就是在真实场景采集到的脉冲信号（IR），能够更真实的还原场景空间特征。\n\n#### 反射\n- 通用反射：通过程序实时计算到的反射点、反射参数、播放生成的反射source并控制播放。\n- 室外尾音：在反射点播放尾音的样本，并通过RPTC控制尾音大小，可与通用反射叠加。\n- 特殊区域尾音：例如峡谷，需要在山谷两头播放尾音。\n\n#### 阻挡（obstacle）\n为了节省手机性能，只判断了敌我之间是否有障碍物。损失频段但不损失音量（与视觉提示相配合）。\n\n\n### 空间音频的实现\n不与基础音频管线耦合。手游音频开发首要目标是项目能运行跑起来，而音频效果的表现优化是在其后面的，因此不能与基础音频管线冲突或者有关联。\n开销小并且稳定。在不同机型上都能有稳定的表现。\n核心：生成一个与游戏内容实时匹配的AudioScene,在audioscene里面计算模拟最终描述空间音频渲染所需要的数据。\n\n#### 要素Feature\n早期反射、后期混响、尾音\n\n现成技术方案：\n- 离线\n体素：离线写死的方案不适合会实时变动的场景。会过度运算（overdraw）\nProbe与体素类似，但优化会好一些。\ntrigger：场景过大，挂接过于繁杂。\n- 实时\n几何、波动\n\n早期反射参数需求：反射距离、反射强度、瞬态性\n后期混响参数需求：RT60、空间复杂度\n尾音参数需求：空间开放度\n\n最终采用方案：\n基于icosphere体投影构建一阶声学空间\n相较于体素，不会overdraw，计算更为高效。\n\n体投影优势：\n每个面彼此独立，可以利用多线程\n根据算力的优先级程度可以分配不同朝向的算力分配，也就是面可以细分或者退化。\n\nicosphere优势：\n可以分割出top、bottom、middle三个部分。\n\n#### 系统设计\n系统优化：\n所有计算job化：对于多线程计算任务的抽象。会给每个job分配最低权重，强制让其到小核心运行。\n利用temporal；\n无效的job剔除；\n算法优化：\nhalton-sequence替代random。\n三角形索引。\n不规则体积估算。\n\n运行框架：\n\n![屏幕截图 2025-02-17 181103](images/屏幕截图 2025-02-17 181103.png)\n\n#### 实现优化\n简化曲线\n使用ringbuffer实现早期反射：\n 内存可控：按照最远反射距离30m，48KHZ算≈0.017MB\n 开销：取决于最大echo数量，手游是三个。\nRingbuffer按需激活：\n最多用三个反射的Emitter 表现全部早反：左右中\n\n复杂场景：采用trigger\n\n### dobly atmos接入\n按照wwise官方说明书进行。\n设计考量，将战斗音效接入atmos，其他音乐环境音效走passthrough，避免影响战斗中的声音。\n\n\n\n## 地狱潜兵2游戏混音\n### 声音的优先级设定by HDR（High Dynamic Range）\n- 需要解决的问题-掩蔽\n很多声音同时播放，重要的声音听不清楚（掩蔽效应） \n解决办法：闪避系统ducking\n地狱潜兵中，采用HDR，设置优先级：确定哪种声音更重要？\n爆炸声可能比较大，但是附近敌人的声音更重要。——响度≠重要性。\n\n- 优先级设定\n首先，将声音进行分类，详细程度可以视情况而定。\n优先级映射：什么声音对玩家比较重要，由低到高进行排序。并且，排序低并不代表不重要，而是相对不重要而已。\n根据游戏声音分类和优先级排序，进行声音闪避系统设计。\n\n### HDR的基础知识\n详情参见wwise手册。\n- 逻辑音量值-total volume=voice volume +output bus volume +bus volume\n- 对于HDR来说， total volume越高，优先级就越高。\n- 两个及以上的声音在播放时，优先级高的会对低的进行压低。\n- 闪避幅度：等于两个声音total volume 差值。\n- 包络：每种声音都指定了HDR包络。利用高优先级的声音对低优先级的声音做闪避处理（就像独立的sidechain）。\n\n\n\n## 哈利波特·魔法觉醒\n- 抽卡音效设计\n在抽卡中，根据抽卡出的物品材质不同，也会进行细分，而不仅仅只根据卡牌的稀有度。\n在抽卡过程中，根据卡片出现的摆放的位置，也会做pan的变化。\n- 魔杖/物品展示音效设计\n层级：写实层/材质层 + 乐音层 + 特征层\n- 节日音频设计\n强化节日的音频特色元素。\n- 魔法地图声音景观设计\n为2D的地图，设计3D的景观。\n- puredata+heavy开发的音频混响插件，可以节省音频package的大小。\n- IP价值的利用最大化。语音设计中，贴近原著影片声线。\n- 创意设计，丰富玩家个性化。兴奋性需求奖励的道具（一开始不抱有期待，但一旦满足则会充满惊喜.）节假日，融入音频设计。中国传统节日，根据现实时间，实现不同声音效果。细节设计上满足玩家的收集欲。时装设定。\n- **音频开发从玩家的需求产生**，去开发对应的技术。例如，自定义咒语系统；wWISE AUDIO INPUT可以使用外部音频/话筒；从其他音乐平台获取音频串流-音乐电台。\n- 音乐电台流程：流媒体平台API - 给出请求清单 - 返回清单获取地址 - ...\n\n## 星球：重启\n表现力与性能的均衡与取舍：最大限度地提升单位资源的音频表现力。\n环境声交互性：全景声的下混，俯仰角的环境声发生变化。仰角-天空；俯角-地。\n- 载具声音的实现\n- 动态混音：精细化音频-与玩法是否有关等\n需要提前同意音频的标准，优先级，音频播放数量等。\n响度设置-不仅仅是音频样本，还包括Wwise中的音频响度。\n动态混音可以较早的介入整体音频开发，早期可以粗糙一些，这样可以暴露很多问题\n- 分机型测试-安卓与苹果的区别。\n\n-音频程序部分\n\n\n## 巅峰极速\n- 车辆运动的声音构成：先进行细分，再部分进行整合。\n- 车辆录制流程：发起录音-预约车辆（私人车主/汽车厂商...）-预约场地-进行录制（赛场跑道录制或者室内马力机录制）。麦克风可承受声压级要大。\n- 轮胎声音的录制。轮胎声音的分类。录制中，赛道漂移音色区别大，定圆漂移稳定的LOOP声。录制过久，轮胎会被磨平，音色会有差异。选择电车（避免排气、引擎等声音的干扰），选择后驱，更好漂移。\n- 轮胎声音后期处理问题：一个样本还是多个样本（性能与表现的取舍）；随机样本还是粒子合成（sound seed grain）。轮胎与地面材质。\n- 录音方案的选择：\nXY立体声、double MS多通道：近咪芯收音，无相位问题，便于后期处理。\nORTF立体声：接近人耳的听觉感受，用于CG制作。\n枪麦录制：补充点声源。\n\n- 音乐与交互音乐\n文化与节奏感。","slug":"Wwise Tour声音设计分享","published":1,"date":"2025-04-21T06:51:05.865Z","updated":"2025-04-21T06:52:50.491Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm9w9inhc0001ncpyhp1abky1","content":"<div class=\".article-gallery\"><hr>\n<h2 id=\"title-游戏声音设计学习\"><a href=\"#title-游戏声音设计学习\" class=\"headerlink\" title=\"title&#x3D; 游戏声音设计学习\"></a>title&#x3D; 游戏声音设计学习</h2><h2 id=\"地狱之刃2：塞娜的传说\"><a href=\"#地狱之刃2：塞娜的传说\" class=\"headerlink\" title=\"地狱之刃2：塞娜的传说\"></a>地狱之刃2：塞娜的传说</h2><h3 id=\"Hybrid-breathing混合呼吸设计\"><a href=\"#Hybrid-breathing混合呼吸设计\" class=\"headerlink\" title=\"Hybrid breathing混合呼吸设计\"></a>Hybrid breathing混合呼吸设计</h3><p>在自由度高的地方，采用非线性的程序设计呼吸（设置state等进行切换）；<br>在线性化的叙事流程中（例如实时渲染的动画），采用线性的录制的呼吸声，在演员录制动捕的时候进行同期录音。<br>通过在SEQUENCE中添加marker点，marker触发后，会播放线性的声音，播放结束后会进入程序性的声音，直到触发下一个marker。</p>\n<h3 id=\"可以通过RTPC来控制线性流程中，不同阶段的声音变化。\"><a href=\"#可以通过RTPC来控制线性流程中，不同阶段的声音变化。\" class=\"headerlink\" title=\"可以通过RTPC来控制线性流程中，不同阶段的声音变化。\"></a>可以通过RTPC来控制<strong>线性流程</strong>中，不同阶段的声音变化。</h3><h3 id=\"RMS-Reading\"><a href=\"#RMS-Reading\" class=\"headerlink\" title=\"RMS Reading\"></a>RMS Reading</h3><p>通过监测Ambience 的RMS值，来控制dialogue的值，然后再反过来控制对话对ambience 的duck值。</p>\n<h3 id=\"为了带来更深、震撼的情感体验，将语音和音乐推到最前面是个可选项。\"><a href=\"#为了带来更深、震撼的情感体验，将语音和音乐推到最前面是个可选项。\" class=\"headerlink\" title=\"为了带来更深、震撼的情感体验，将语音和音乐推到最前面是个可选项。\"></a>为了带来更深、震撼的情感体验，将语音和音乐推到最前面是个可选项。</h3><h3 id=\"Trition-Acoustics\"><a href=\"#Trition-Acoustics\" class=\"headerlink\" title=\"Trition Acoustics\"></a>Trition Acoustics</h3><p>Project Acoustics基于Triton技术,这是一个先进的声学模拟引擎,能够处理复杂的三维空间中的声音传播和反射。<br>支持Untiy\\Unreal以及wwise.</p>\n<h2 id=\"汽车引擎声音设计\"><a href=\"#汽车引擎声音设计\" class=\"headerlink\" title=\"汽车引擎声音设计\"></a>汽车引擎声音设计</h2><p><a href=\"https://www.audiokinetic.com/zh/blog/loop-based-car-engine-design-with-wwise-part-1/\">https://www.audiokinetic.com/zh/blog/loop-based-car-engine-design-with-wwise-part-1/</a></p>\n<h2 id=\"漫威蜘蛛侠2\"><a href=\"#漫威蜘蛛侠2\" class=\"headerlink\" title=\"漫威蜘蛛侠2\"></a>漫威蜘蛛侠2</h2><h3 id=\"Mixing\"><a href=\"#Mixing\" class=\"headerlink\" title=\"Mixing\"></a>Mixing</h3><h4 id=\"总线设计\"><a href=\"#总线设计\" class=\"headerlink\" title=\"总线设计\"></a>总线设计</h4><p>非必要情况下，不会添加新的总线，会让整体局面更复杂。<br>以减法为主，极少做加法<br>创建总线的一些情境：</p>\n<ul>\n<li>state\\RTPC。控制一组声音的音量或者其他参数</li>\n<li>动态EQ\\混音。有时候为了针对不同的频段做动态均衡。</li>\n<li>压缩\\效果</li>\n<li>发声数限制。为了去限制一个组别的发声数量。</li>\n<li>电平检测。为了对一些内容进行检测。</li>\n<li>总线配置差异化。某一组的音频需要做特殊的效果。</li>\n<li>是否暂停。是否需要暂停某些音频。</li>\n<li>不用于静态音量差异。总线上的音量尽可能保持默认。</li>\n</ul>\n<h4 id=\"电平检测\"><a href=\"#电平检测\" class=\"headerlink\" title=\"电平检测\"></a>电平检测</h4><p>检测的电平值本身的意义不是特别大，主要是利用meter值去进行其他操作。<br>例如对白，会分别检测总的，以及低中高三个频段的电平值。</p>\n<h3 id=\"动态均衡\"><a href=\"#动态均衡\" class=\"headerlink\" title=\"动态均衡\"></a>动态均衡</h3><p>通过电平检测值实现。<br>主要应用场景：</p>\n<ul>\n<li>对白 优先于 音乐<br><a href=\"/image/image-20250215162814914.png\" title=\"image-20250215162814914\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/image-20250215162814914.png\" alt=\"image-20250215162814914\"></a>![image-20250215162814960]</li>\n<li>对白 优先于 音效</li>\n<li>战斗音效和关键音效 优先于 环境音效和非关键音效</li>\n<li>战斗音效和关键音效 优先于 音乐</li>\n<li>音乐 优先于 环境音</li>\n<li>音乐 优先于 非关键音效</li>\n</ul>\n<h4 id=\"特殊的侧链压缩处理增强打击感\"><a href=\"#特殊的侧链压缩处理增强打击感\" class=\"headerlink\" title=\"特殊的侧链压缩处理增强打击感\"></a>特殊的侧链压缩处理增强打击感</h4><p>通过减法增强效果。<br>通过战斗音效的电平检测，来降低对应混响的音量，以达到增强打击感的效果。</p>\n<h3 id=\"城市声景\"><a href=\"#城市声景\" class=\"headerlink\" title=\"城市声景\"></a>城市声景</h3><p>城市声音景观组成：<br>第一部分（可见的）：环境点声源、行人、载具、其他变量（天气或者犯罪事件）<br>第二部分（不见的）：环境音基调，远距离区域声音，海岸线\\水面声音</p>\n<h4 id=\"环境音\"><a href=\"#环境音\" class=\"headerlink\" title=\"环境音\"></a>环境音</h4><p>每个不同的区域有独特的环境音基调；<br>需要大体积声源；<br>内容随高度进行声响摆位。(在高处时，声音大部分在下面，通过RTPC控制。<br>)</p>\n<h4 id=\"远距离区域系统\"><a href=\"#远距离区域系统\" class=\"headerlink\" title=\"远距离区域系统\"></a>远距离区域系统</h4><p>中远距离环境音，中远两个距离分别有5个发声点环绕着玩家，与玩家保持固定的偏移，只检测了水平的距离。（无论你高度如何，中远距离环境音不会改变）<br>具体的声音内容通过State和RTPC进行调整。例如，水上的监测点则不会发出声音。<br>DDS屏蔽值（shelter value）<br>点声源与听者的屏蔽程度，从听者向DDS点声源进行射线检测，仅作用于水平面。<br>邻近区域<br>海岸线周边样条曲线，在曲线上播放海水拍打音效</p>\n<h4 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h4><ul>\n<li>转码设置<br>ATRAC9解码：索尼的PS解码器，压缩比很不错，但是文件体积很大<br> 硬件解码：所有声音<br> 软件解码\\CPU：Wwise内容<br>WEM Opus解码：压缩比更大，且文件质量也有保证，但会超出硬件解码预算，导致部分音频不会被播放。<br> 硬件解码：所有声音<br> 软件解码\\CPU：Wwise内容<br>Vobis解码：只用vorbis超出CPU预算。<br> 硬件解码：无<br> 软件解码\\CPU：Wwise内容、所有声音</li>\n</ul>\n<p>最终采用组合解码的方式，改善了内存与磁盘的使用空间，音频保真度没有妥协，根据声音类型进行解码方式选择sharesets：<br>Ambience_Beds<br>Ambience_Default<br>Ambience_Rain<br>CHR_Default<br>Cine_Atmos<br>Cine_Default<br>Cine_Dialogue<br>CS_Default<br>Default<br>Dialog Default<br>Dialog Screen Reader<br>Foley_Cloth_Footsteps<br>Foley_Water<br>Hero_Abilities<br>LFE_Discrete<br>Haptics_Default<br>Music_Default<br>NPC_Weapons&amp;Attack<br>Objects_General<br>Objects_Physics<br>UI_HUD<br>Vehicles<br>Vehicles Engines<br>Walla Default<br>Weapons<br>Weapons_Tails</p>\n<p>ATRAC9：短音效、数量少的声音 - UI、物品、打斗、技能等<br>WEM Opus：长文件、数量多的 - 对白音乐、环境、CG贴片等<br>Vorbis：可能会同时大量播放的 - 载具，雨声等</p>\n<ul>\n<li>流播放<br>音频的流播放（Streaming） 是一种动态加载和播放音频资源的技术。其核心思想是：不一次性将整个音频文件加载到内存中，而是在播放过程中按需从存储设备（如硬盘、SSD）逐块读取音频数据，边读取边播放。这一技术主要用于处理大型音频文件（如背景音乐、长对话、环境音效等），以优化内存使用和性能。</li>\n</ul>\n<blockquote>\n<p>流播放的工作原理<br><strong>分段加载</strong>：<br>音频文件被分成多个小数据块（chunks），播放时仅加载当前需要播放的部分到内存缓冲区。<br><strong>动态缓冲</strong>：<br>在播放过程中，后台持续从存储设备读取后续数据块，填充到内存缓冲区，确保播放的连续性。<br><strong>内存释放</strong>：<br>已播放完的数据块会被及时释放，避免内存占用过高。</p>\n</blockquote>\n<p>为什么需要流播放？<br><strong>节省内存</strong>：<br>大型音频文件（如长达数分钟的背景音乐）直接加载到内存会占用大量空间，流播放仅保留当前播放的片段。<br><strong>支持大文件</strong>：<br>适用于开放世界游戏、电影化叙事游戏中需要长时间播放的高质量音频。<br><strong>动态内容切换</strong>：<br>支持无缝切换不同音频片段（如根据游戏场景动态调整环境音效）。<br><strong>减少加载延迟</strong>：<br>无需等待整个文件加载完成即可开始播放。</p>\n<blockquote>\n</blockquote>\n<p>流播放的典型应用场景<br><strong>背景音乐（BGM）</strong>：<br>长时播放的高保真音乐，尤其适用于开放世界或剧情驱动的游戏。<br><strong>语音对话</strong>：<br>角色长篇对话或剧情旁白，避免一次性加载数百MB的语音文件。<br><strong>环境音效</strong>：<br>持续的风声、雨声、城市噪音等动态环境音效。<br><strong>动态音乐系统</strong>：<br>根据玩家行为实时混合不同音轨（如战斗音乐过渡到探索音乐）。</p>\n<blockquote>\n</blockquote>\n<p>流播放的优缺点<br><strong>优点</strong>：<br>显著降低内存占用。<br>支持超大音频文件（如数十分钟的音乐）。<br>灵活应对动态内容需求（如随机事件触发的音效）。<br><strong>缺点</strong>：<br>增加磁盘I&#x2F;O压力，可能影响性能（需优化读取策略）。<br>需要管理缓冲区，防止播放中断（如硬盘速度不足时）。<br>对音频格式有要求（需支持分段解码，如.wav、.ogg等流式编码格式）。</p>\n<blockquote>\n</blockquote>\n<p>实现流播放的关键技术<br><strong>音频中间件支持</strong>：<br>Wwise、FMOD等工具提供流播放接口，简化开发流程。<br>例如在FMOD中使用 FMOD_CREATESTREAM 标志创建流式音频。<br><strong>引擎集成</strong>：<br>Unity通过 AudioClip 的 LoadType 设置为 Streaming 实现。<br>Unreal Engine 通过 Sound Wave 的 Streaming 选项启用。<br><strong>数据预读取与缓冲</strong>：<br>设置合理的缓冲区大小，平衡内存占用和读取频率。<br>使用多线程避免主线程卡顿。</p>\n<p>File Packager 负责将启用了流播放（Streaming）的 音频文件 打包成外部文件（如 .pck 或 .bnk），这些文件独立于 SoundBank 存在。<br>  实际音频数据（如 .wav、.ogg 文件）。<br>  流播放所需的块（Chunk）索引信息。<br>运行时功能：<br>游戏通过 Wwise 引擎直接从这些外部包中按需加载音频数据块，实现流播放。</p>\n<p>SoundBank 主要存储的是 音频事件的逻辑定义 和 音频资源的元数据，例如：<br>事件（Events）和动作（Actions）。<br>  音频对象的结构（如容器、随机播放规则、混合总线参数）。<br>  非流式音频数据（如果音频未启用流播放，则音频文件会被直接打包进 SoundBank）。<br>对流式音频文件的引用（如果音频启用了流播放，SoundBank 仅存储其路径和元数据，而非实际音频数据）。</p>\n<h4 id=\"内存处理\"><a href=\"#内存处理\" class=\"headerlink\" title=\"内存处理\"></a>内存处理</h4><p>减少运行内存的占用</p>\n<ul>\n<li>从soundbank中移除未使用的音频内容<br>很多结构化的数据并没有被实际运用。</li>\n<li>重构复杂的大型的switch容器，可以减少内存的占用</li>\n</ul>\n<h4 id=\"3D音频混音中的性能\"><a href=\"#3D音频混音中的性能\" class=\"headerlink\" title=\"3D音频混音中的性能\"></a>3D音频混音中的性能</h4><p>EQ并不适用于音频对象<br>3D音频对象会大幅提升CPU的使用率<br>将音频对象留给某些特定的声音，例如环境声或者敌人。<br>3D Audio Bed Mixer plugin会节约大量内存。</p>\n<h4 id=\"总体CPU性能表现\"><a href=\"#总体CPU性能表现\" class=\"headerlink\" title=\"总体CPU性能表现\"></a>总体CPU性能表现</h4><p>减少API调用。<br>在不需要时动态bypass掉插件或者提前离线渲染好。<br>先提前管理好声音的数目，再进入WWise，不要过度依赖于playback objects limits。<br>Wwise中设置目标平台的最大发声数。例如一百个。<br>好好利用Wwise的profiler，来进行性能分析。</p>\n<h2 id=\"永劫无间手游移植\"><a href=\"#永劫无间手游移植\" class=\"headerlink\" title=\"永劫无间手游移植\"></a>永劫无间手游移植</h2><h3 id=\"移动端移植\"><a href=\"#移动端移植\" class=\"headerlink\" title=\"移动端移植\"></a>移动端移植</h3><h4 id=\"Wwise内优化方案\"><a href=\"#Wwise内优化方案\" class=\"headerlink\" title=\"Wwise内优化方案\"></a>Wwise内优化方案</h4><ul>\n<li>手机端采样率是36K以及24K。</li>\n<li>过长的音频文件采样streaming加载。需要结合限制同时播放音频数量以及设置加载优先级，以防止手机的I&#x2F;O性能过载。</li>\n<li>资源合并删减，简化structure。、</li>\n<li>Bank拆分。（将3p的资源进行了删减和优化）</li>\n</ul>\n<h4 id=\"内存优化\"><a href=\"#内存优化\" class=\"headerlink\" title=\"内存优化\"></a>内存优化</h4><ul>\n<li>用量与I\\O：用量过低会导致IO更为频繁，因此需要平衡</li>\n<li>Soundbank：进行评估，是否继续引用或者进行卸载</li>\n<li>动静态分离：UI、脚步声等需要常驻的Bank,即使处于离线也不会被卸载</li>\n<li>LRU：根据内存情况，动态的可以卸载掉被评估的，不被需要（不重要）的bank</li>\n<li>内存分配器：在RPmalloc上做分级机制，对老的手机进行更多优化等操作</li>\n</ul>\n<h4 id=\"性能优化-1\"><a href=\"#性能优化-1\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h4><ul>\n<li>复用对象池，减少不必要的重建</li>\n<li>Tick rate策略：对object的更新是基于优先级，例如距离或者重要度等，有的是每帧更新，有的可能5帧才更新一次。</li>\n<li>sample rate：采样率下采。部分机型对音频质量要求高，当发现你采样率下调之后，会自己上采样，增加功耗。</li>\n<li>梯度计算：评估某个声音是否需要继续计算，如果不需要则直接打回。某些游戏会继续渲染但保持音量为0.</li>\n<li>利用temporal，小核心，多线程。主核心留给大处理。</li>\n</ul>\n<h3 id=\"移动端空间音频\"><a href=\"#移动端空间音频\" class=\"headerlink\" title=\"移动端空间音频\"></a>移动端空间音频</h3><h4 id=\"混响\"><a href=\"#混响\" class=\"headerlink\" title=\"混响\"></a>混响</h4><p>实时混响：覆盖全地图建筑结构，Matrix Reverb + ReverbTime\\Reverb Energy RTPC<br>卷积混响：表现特征空间，如落日寺，自研卷积混响插件、游戏场景的卷积采样、特定区域触发</p>\n<blockquote>\n<p>卷积混响<br>就是在真实场景采集到的脉冲信号（IR），能够更真实的还原场景空间特征。</p>\n</blockquote>\n<h4 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h4><ul>\n<li>通用反射：通过程序实时计算到的反射点、反射参数、播放生成的反射source并控制播放。</li>\n<li>室外尾音：在反射点播放尾音的样本，并通过RPTC控制尾音大小，可与通用反射叠加。</li>\n<li>特殊区域尾音：例如峡谷，需要在山谷两头播放尾音。</li>\n</ul>\n<h4 id=\"阻挡（obstacle）\"><a href=\"#阻挡（obstacle）\" class=\"headerlink\" title=\"阻挡（obstacle）\"></a>阻挡（obstacle）</h4><p>为了节省手机性能，只判断了敌我之间是否有障碍物。损失频段但不损失音量（与视觉提示相配合）。</p>\n<h3 id=\"空间音频的实现\"><a href=\"#空间音频的实现\" class=\"headerlink\" title=\"空间音频的实现\"></a>空间音频的实现</h3><p>不与基础音频管线耦合。手游音频开发首要目标是项目能运行跑起来，而音频效果的表现优化是在其后面的，因此不能与基础音频管线冲突或者有关联。<br>开销小并且稳定。在不同机型上都能有稳定的表现。<br>核心：生成一个与游戏内容实时匹配的AudioScene,在audioscene里面计算模拟最终描述空间音频渲染所需要的数据。</p>\n<h4 id=\"要素Feature\"><a href=\"#要素Feature\" class=\"headerlink\" title=\"要素Feature\"></a>要素Feature</h4><p>早期反射、后期混响、尾音</p>\n<p>现成技术方案：</p>\n<ul>\n<li>离线<br>体素：离线写死的方案不适合会实时变动的场景。会过度运算（overdraw）<br>Probe与体素类似，但优化会好一些。<br>trigger：场景过大，挂接过于繁杂。</li>\n<li>实时<br>几何、波动</li>\n</ul>\n<p>早期反射参数需求：反射距离、反射强度、瞬态性<br>后期混响参数需求：RT60、空间复杂度<br>尾音参数需求：空间开放度</p>\n<p>最终采用方案：<br>基于icosphere体投影构建一阶声学空间<br>相较于体素，不会overdraw，计算更为高效。</p>\n<p>体投影优势：<br>每个面彼此独立，可以利用多线程<br>根据算力的优先级程度可以分配不同朝向的算力分配，也就是面可以细分或者退化。</p>\n<p>icosphere优势：<br>可以分割出top、bottom、middle三个部分。</p>\n<h4 id=\"系统设计\"><a href=\"#系统设计\" class=\"headerlink\" title=\"系统设计\"></a>系统设计</h4><p>系统优化：<br>所有计算job化：对于多线程计算任务的抽象。会给每个job分配最低权重，强制让其到小核心运行。<br>利用temporal；<br>无效的job剔除；<br>算法优化：<br>halton-sequence替代random。<br>三角形索引。<br>不规则体积估算。</p>\n<p>运行框架：</p>\n<p>![屏幕截图 2025-02-17 181103](images&#x2F;屏幕截图 2025-02-17 181103.png)</p>\n<h4 id=\"实现优化\"><a href=\"#实现优化\" class=\"headerlink\" title=\"实现优化\"></a>实现优化</h4><p>简化曲线<br>使用ringbuffer实现早期反射：<br> 内存可控：按照最远反射距离30m，48KHZ算≈0.017MB<br> 开销：取决于最大echo数量，手游是三个。<br>Ringbuffer按需激活：<br>最多用三个反射的Emitter 表现全部早反：左右中</p>\n<p>复杂场景：采用trigger</p>\n<h3 id=\"dobly-atmos接入\"><a href=\"#dobly-atmos接入\" class=\"headerlink\" title=\"dobly atmos接入\"></a>dobly atmos接入</h3><p>按照wwise官方说明书进行。<br>设计考量，将战斗音效接入atmos，其他音乐环境音效走passthrough，避免影响战斗中的声音。</p>\n<h2 id=\"地狱潜兵2游戏混音\"><a href=\"#地狱潜兵2游戏混音\" class=\"headerlink\" title=\"地狱潜兵2游戏混音\"></a>地狱潜兵2游戏混音</h2><h3 id=\"声音的优先级设定by-HDR（High-Dynamic-Range）\"><a href=\"#声音的优先级设定by-HDR（High-Dynamic-Range）\" class=\"headerlink\" title=\"声音的优先级设定by HDR（High Dynamic Range）\"></a>声音的优先级设定by HDR（High Dynamic Range）</h3><ul>\n<li><p>需要解决的问题-掩蔽<br>很多声音同时播放，重要的声音听不清楚（掩蔽效应）<br>解决办法：闪避系统ducking<br>地狱潜兵中，采用HDR，设置优先级：确定哪种声音更重要？<br>爆炸声可能比较大，但是附近敌人的声音更重要。——响度≠重要性。</p>\n</li>\n<li><p>优先级设定<br>首先，将声音进行分类，详细程度可以视情况而定。<br>优先级映射：什么声音对玩家比较重要，由低到高进行排序。并且，排序低并不代表不重要，而是相对不重要而已。<br>根据游戏声音分类和优先级排序，进行声音闪避系统设计。</p>\n</li>\n</ul>\n<h3 id=\"HDR的基础知识\"><a href=\"#HDR的基础知识\" class=\"headerlink\" title=\"HDR的基础知识\"></a>HDR的基础知识</h3><p>详情参见wwise手册。</p>\n<ul>\n<li>逻辑音量值-total volume&#x3D;voice volume +output bus volume +bus volume</li>\n<li>对于HDR来说， total volume越高，优先级就越高。</li>\n<li>两个及以上的声音在播放时，优先级高的会对低的进行压低。</li>\n<li>闪避幅度：等于两个声音total volume 差值。</li>\n<li>包络：每种声音都指定了HDR包络。利用高优先级的声音对低优先级的声音做闪避处理（就像独立的sidechain）。</li>\n</ul>\n<h2 id=\"哈利波特·魔法觉醒\"><a href=\"#哈利波特·魔法觉醒\" class=\"headerlink\" title=\"哈利波特·魔法觉醒\"></a>哈利波特·魔法觉醒</h2><ul>\n<li>抽卡音效设计<br>在抽卡中，根据抽卡出的物品材质不同，也会进行细分，而不仅仅只根据卡牌的稀有度。<br>在抽卡过程中，根据卡片出现的摆放的位置，也会做pan的变化。</li>\n<li>魔杖&#x2F;物品展示音效设计<br>层级：写实层&#x2F;材质层 + 乐音层 + 特征层</li>\n<li>节日音频设计<br>强化节日的音频特色元素。</li>\n<li>魔法地图声音景观设计<br>为2D的地图，设计3D的景观。</li>\n<li>puredata+heavy开发的音频混响插件，可以节省音频package的大小。</li>\n<li>IP价值的利用最大化。语音设计中，贴近原著影片声线。</li>\n<li>创意设计，丰富玩家个性化。兴奋性需求奖励的道具（一开始不抱有期待，但一旦满足则会充满惊喜.）节假日，融入音频设计。中国传统节日，根据现实时间，实现不同声音效果。细节设计上满足玩家的收集欲。时装设定。</li>\n<li><strong>音频开发从玩家的需求产生</strong>，去开发对应的技术。例如，自定义咒语系统；wWISE AUDIO INPUT可以使用外部音频&#x2F;话筒；从其他音乐平台获取音频串流-音乐电台。</li>\n<li>音乐电台流程：流媒体平台API - 给出请求清单 - 返回清单获取地址 - …</li>\n</ul>\n<h2 id=\"星球：重启\"><a href=\"#星球：重启\" class=\"headerlink\" title=\"星球：重启\"></a>星球：重启</h2><p>表现力与性能的均衡与取舍：最大限度地提升单位资源的音频表现力。<br>环境声交互性：全景声的下混，俯仰角的环境声发生变化。仰角-天空；俯角-地。</p>\n<ul>\n<li>载具声音的实现</li>\n<li>动态混音：精细化音频-与玩法是否有关等<br>需要提前同意音频的标准，优先级，音频播放数量等。<br>响度设置-不仅仅是音频样本，还包括Wwise中的音频响度。<br>动态混音可以较早的介入整体音频开发，早期可以粗糙一些，这样可以暴露很多问题</li>\n<li>分机型测试-安卓与苹果的区别。</li>\n</ul>\n<p>-音频程序部分</p>\n<h2 id=\"巅峰极速\"><a href=\"#巅峰极速\" class=\"headerlink\" title=\"巅峰极速\"></a>巅峰极速</h2><ul>\n<li><p>车辆运动的声音构成：先进行细分，再部分进行整合。</p>\n</li>\n<li><p>车辆录制流程：发起录音-预约车辆（私人车主&#x2F;汽车厂商…）-预约场地-进行录制（赛场跑道录制或者室内马力机录制）。麦克风可承受声压级要大。</p>\n</li>\n<li><p>轮胎声音的录制。轮胎声音的分类。录制中，赛道漂移音色区别大，定圆漂移稳定的LOOP声。录制过久，轮胎会被磨平，音色会有差异。选择电车（避免排气、引擎等声音的干扰），选择后驱，更好漂移。</p>\n</li>\n<li><p>轮胎声音后期处理问题：一个样本还是多个样本（性能与表现的取舍）；随机样本还是粒子合成（sound seed grain）。轮胎与地面材质。</p>\n</li>\n<li><p>录音方案的选择：<br>XY立体声、double MS多通道：近咪芯收音，无相位问题，便于后期处理。<br>ORTF立体声：接近人耳的听觉感受，用于CG制作。<br>枪麦录制：补充点声源。</p>\n</li>\n<li><p>音乐与交互音乐<br>文化与节奏感。</p>\n</li>\n</ul>\n</div>","excerpt":"","more":"<div class=\".article-gallery\"><hr>\n<h2 id=\"title-游戏声音设计学习\"><a href=\"#title-游戏声音设计学习\" class=\"headerlink\" title=\"title&#x3D; 游戏声音设计学习\"></a>title&#x3D; 游戏声音设计学习</h2><h2 id=\"地狱之刃2：塞娜的传说\"><a href=\"#地狱之刃2：塞娜的传说\" class=\"headerlink\" title=\"地狱之刃2：塞娜的传说\"></a>地狱之刃2：塞娜的传说</h2><h3 id=\"Hybrid-breathing混合呼吸设计\"><a href=\"#Hybrid-breathing混合呼吸设计\" class=\"headerlink\" title=\"Hybrid breathing混合呼吸设计\"></a>Hybrid breathing混合呼吸设计</h3><p>在自由度高的地方，采用非线性的程序设计呼吸（设置state等进行切换）；<br>在线性化的叙事流程中（例如实时渲染的动画），采用线性的录制的呼吸声，在演员录制动捕的时候进行同期录音。<br>通过在SEQUENCE中添加marker点，marker触发后，会播放线性的声音，播放结束后会进入程序性的声音，直到触发下一个marker。</p>\n<h3 id=\"可以通过RTPC来控制线性流程中，不同阶段的声音变化。\"><a href=\"#可以通过RTPC来控制线性流程中，不同阶段的声音变化。\" class=\"headerlink\" title=\"可以通过RTPC来控制线性流程中，不同阶段的声音变化。\"></a>可以通过RTPC来控制<strong>线性流程</strong>中，不同阶段的声音变化。</h3><h3 id=\"RMS-Reading\"><a href=\"#RMS-Reading\" class=\"headerlink\" title=\"RMS Reading\"></a>RMS Reading</h3><p>通过监测Ambience 的RMS值，来控制dialogue的值，然后再反过来控制对话对ambience 的duck值。</p>\n<h3 id=\"为了带来更深、震撼的情感体验，将语音和音乐推到最前面是个可选项。\"><a href=\"#为了带来更深、震撼的情感体验，将语音和音乐推到最前面是个可选项。\" class=\"headerlink\" title=\"为了带来更深、震撼的情感体验，将语音和音乐推到最前面是个可选项。\"></a>为了带来更深、震撼的情感体验，将语音和音乐推到最前面是个可选项。</h3><h3 id=\"Trition-Acoustics\"><a href=\"#Trition-Acoustics\" class=\"headerlink\" title=\"Trition Acoustics\"></a>Trition Acoustics</h3><p>Project Acoustics基于Triton技术,这是一个先进的声学模拟引擎,能够处理复杂的三维空间中的声音传播和反射。<br>支持Untiy\\Unreal以及wwise.</p>\n<h2 id=\"汽车引擎声音设计\"><a href=\"#汽车引擎声音设计\" class=\"headerlink\" title=\"汽车引擎声音设计\"></a>汽车引擎声音设计</h2><p><a href=\"https://www.audiokinetic.com/zh/blog/loop-based-car-engine-design-with-wwise-part-1/\">https://www.audiokinetic.com/zh/blog/loop-based-car-engine-design-with-wwise-part-1/</a></p>\n<h2 id=\"漫威蜘蛛侠2\"><a href=\"#漫威蜘蛛侠2\" class=\"headerlink\" title=\"漫威蜘蛛侠2\"></a>漫威蜘蛛侠2</h2><h3 id=\"Mixing\"><a href=\"#Mixing\" class=\"headerlink\" title=\"Mixing\"></a>Mixing</h3><h4 id=\"总线设计\"><a href=\"#总线设计\" class=\"headerlink\" title=\"总线设计\"></a>总线设计</h4><p>非必要情况下，不会添加新的总线，会让整体局面更复杂。<br>以减法为主，极少做加法<br>创建总线的一些情境：</p>\n<ul>\n<li>state\\RTPC。控制一组声音的音量或者其他参数</li>\n<li>动态EQ\\混音。有时候为了针对不同的频段做动态均衡。</li>\n<li>压缩\\效果</li>\n<li>发声数限制。为了去限制一个组别的发声数量。</li>\n<li>电平检测。为了对一些内容进行检测。</li>\n<li>总线配置差异化。某一组的音频需要做特殊的效果。</li>\n<li>是否暂停。是否需要暂停某些音频。</li>\n<li>不用于静态音量差异。总线上的音量尽可能保持默认。</li>\n</ul>\n<h4 id=\"电平检测\"><a href=\"#电平检测\" class=\"headerlink\" title=\"电平检测\"></a>电平检测</h4><p>检测的电平值本身的意义不是特别大，主要是利用meter值去进行其他操作。<br>例如对白，会分别检测总的，以及低中高三个频段的电平值。</p>\n<h3 id=\"动态均衡\"><a href=\"#动态均衡\" class=\"headerlink\" title=\"动态均衡\"></a>动态均衡</h3><p>通过电平检测值实现。<br>主要应用场景：</p>\n<ul>\n<li>对白 优先于 音乐<br><a href=\"/image/image-20250215162814914.png\" title=\"image-20250215162814914\" class=\"gallery-item\" style=\"box-shadow: none;\"> <img src=\"/image/image-20250215162814914.png\" alt=\"image-20250215162814914\"></a>![image-20250215162814960]</li>\n<li>对白 优先于 音效</li>\n<li>战斗音效和关键音效 优先于 环境音效和非关键音效</li>\n<li>战斗音效和关键音效 优先于 音乐</li>\n<li>音乐 优先于 环境音</li>\n<li>音乐 优先于 非关键音效</li>\n</ul>\n<h4 id=\"特殊的侧链压缩处理增强打击感\"><a href=\"#特殊的侧链压缩处理增强打击感\" class=\"headerlink\" title=\"特殊的侧链压缩处理增强打击感\"></a>特殊的侧链压缩处理增强打击感</h4><p>通过减法增强效果。<br>通过战斗音效的电平检测，来降低对应混响的音量，以达到增强打击感的效果。</p>\n<h3 id=\"城市声景\"><a href=\"#城市声景\" class=\"headerlink\" title=\"城市声景\"></a>城市声景</h3><p>城市声音景观组成：<br>第一部分（可见的）：环境点声源、行人、载具、其他变量（天气或者犯罪事件）<br>第二部分（不见的）：环境音基调，远距离区域声音，海岸线\\水面声音</p>\n<h4 id=\"环境音\"><a href=\"#环境音\" class=\"headerlink\" title=\"环境音\"></a>环境音</h4><p>每个不同的区域有独特的环境音基调；<br>需要大体积声源；<br>内容随高度进行声响摆位。(在高处时，声音大部分在下面，通过RTPC控制。<br>)</p>\n<h4 id=\"远距离区域系统\"><a href=\"#远距离区域系统\" class=\"headerlink\" title=\"远距离区域系统\"></a>远距离区域系统</h4><p>中远距离环境音，中远两个距离分别有5个发声点环绕着玩家，与玩家保持固定的偏移，只检测了水平的距离。（无论你高度如何，中远距离环境音不会改变）<br>具体的声音内容通过State和RTPC进行调整。例如，水上的监测点则不会发出声音。<br>DDS屏蔽值（shelter value）<br>点声源与听者的屏蔽程度，从听者向DDS点声源进行射线检测，仅作用于水平面。<br>邻近区域<br>海岸线周边样条曲线，在曲线上播放海水拍打音效</p>\n<h4 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h4><ul>\n<li>转码设置<br>ATRAC9解码：索尼的PS解码器，压缩比很不错，但是文件体积很大<br> 硬件解码：所有声音<br> 软件解码\\CPU：Wwise内容<br>WEM Opus解码：压缩比更大，且文件质量也有保证，但会超出硬件解码预算，导致部分音频不会被播放。<br> 硬件解码：所有声音<br> 软件解码\\CPU：Wwise内容<br>Vobis解码：只用vorbis超出CPU预算。<br> 硬件解码：无<br> 软件解码\\CPU：Wwise内容、所有声音</li>\n</ul>\n<p>最终采用组合解码的方式，改善了内存与磁盘的使用空间，音频保真度没有妥协，根据声音类型进行解码方式选择sharesets：<br>Ambience_Beds<br>Ambience_Default<br>Ambience_Rain<br>CHR_Default<br>Cine_Atmos<br>Cine_Default<br>Cine_Dialogue<br>CS_Default<br>Default<br>Dialog Default<br>Dialog Screen Reader<br>Foley_Cloth_Footsteps<br>Foley_Water<br>Hero_Abilities<br>LFE_Discrete<br>Haptics_Default<br>Music_Default<br>NPC_Weapons&amp;Attack<br>Objects_General<br>Objects_Physics<br>UI_HUD<br>Vehicles<br>Vehicles Engines<br>Walla Default<br>Weapons<br>Weapons_Tails</p>\n<p>ATRAC9：短音效、数量少的声音 - UI、物品、打斗、技能等<br>WEM Opus：长文件、数量多的 - 对白音乐、环境、CG贴片等<br>Vorbis：可能会同时大量播放的 - 载具，雨声等</p>\n<ul>\n<li>流播放<br>音频的流播放（Streaming） 是一种动态加载和播放音频资源的技术。其核心思想是：不一次性将整个音频文件加载到内存中，而是在播放过程中按需从存储设备（如硬盘、SSD）逐块读取音频数据，边读取边播放。这一技术主要用于处理大型音频文件（如背景音乐、长对话、环境音效等），以优化内存使用和性能。</li>\n</ul>\n<blockquote>\n<p>流播放的工作原理<br><strong>分段加载</strong>：<br>音频文件被分成多个小数据块（chunks），播放时仅加载当前需要播放的部分到内存缓冲区。<br><strong>动态缓冲</strong>：<br>在播放过程中，后台持续从存储设备读取后续数据块，填充到内存缓冲区，确保播放的连续性。<br><strong>内存释放</strong>：<br>已播放完的数据块会被及时释放，避免内存占用过高。</p>\n</blockquote>\n<p>为什么需要流播放？<br><strong>节省内存</strong>：<br>大型音频文件（如长达数分钟的背景音乐）直接加载到内存会占用大量空间，流播放仅保留当前播放的片段。<br><strong>支持大文件</strong>：<br>适用于开放世界游戏、电影化叙事游戏中需要长时间播放的高质量音频。<br><strong>动态内容切换</strong>：<br>支持无缝切换不同音频片段（如根据游戏场景动态调整环境音效）。<br><strong>减少加载延迟</strong>：<br>无需等待整个文件加载完成即可开始播放。</p>\n<blockquote>\n</blockquote>\n<p>流播放的典型应用场景<br><strong>背景音乐（BGM）</strong>：<br>长时播放的高保真音乐，尤其适用于开放世界或剧情驱动的游戏。<br><strong>语音对话</strong>：<br>角色长篇对话或剧情旁白，避免一次性加载数百MB的语音文件。<br><strong>环境音效</strong>：<br>持续的风声、雨声、城市噪音等动态环境音效。<br><strong>动态音乐系统</strong>：<br>根据玩家行为实时混合不同音轨（如战斗音乐过渡到探索音乐）。</p>\n<blockquote>\n</blockquote>\n<p>流播放的优缺点<br><strong>优点</strong>：<br>显著降低内存占用。<br>支持超大音频文件（如数十分钟的音乐）。<br>灵活应对动态内容需求（如随机事件触发的音效）。<br><strong>缺点</strong>：<br>增加磁盘I&#x2F;O压力，可能影响性能（需优化读取策略）。<br>需要管理缓冲区，防止播放中断（如硬盘速度不足时）。<br>对音频格式有要求（需支持分段解码，如.wav、.ogg等流式编码格式）。</p>\n<blockquote>\n</blockquote>\n<p>实现流播放的关键技术<br><strong>音频中间件支持</strong>：<br>Wwise、FMOD等工具提供流播放接口，简化开发流程。<br>例如在FMOD中使用 FMOD_CREATESTREAM 标志创建流式音频。<br><strong>引擎集成</strong>：<br>Unity通过 AudioClip 的 LoadType 设置为 Streaming 实现。<br>Unreal Engine 通过 Sound Wave 的 Streaming 选项启用。<br><strong>数据预读取与缓冲</strong>：<br>设置合理的缓冲区大小，平衡内存占用和读取频率。<br>使用多线程避免主线程卡顿。</p>\n<p>File Packager 负责将启用了流播放（Streaming）的 音频文件 打包成外部文件（如 .pck 或 .bnk），这些文件独立于 SoundBank 存在。<br>  实际音频数据（如 .wav、.ogg 文件）。<br>  流播放所需的块（Chunk）索引信息。<br>运行时功能：<br>游戏通过 Wwise 引擎直接从这些外部包中按需加载音频数据块，实现流播放。</p>\n<p>SoundBank 主要存储的是 音频事件的逻辑定义 和 音频资源的元数据，例如：<br>事件（Events）和动作（Actions）。<br>  音频对象的结构（如容器、随机播放规则、混合总线参数）。<br>  非流式音频数据（如果音频未启用流播放，则音频文件会被直接打包进 SoundBank）。<br>对流式音频文件的引用（如果音频启用了流播放，SoundBank 仅存储其路径和元数据，而非实际音频数据）。</p>\n<h4 id=\"内存处理\"><a href=\"#内存处理\" class=\"headerlink\" title=\"内存处理\"></a>内存处理</h4><p>减少运行内存的占用</p>\n<ul>\n<li>从soundbank中移除未使用的音频内容<br>很多结构化的数据并没有被实际运用。</li>\n<li>重构复杂的大型的switch容器，可以减少内存的占用</li>\n</ul>\n<h4 id=\"3D音频混音中的性能\"><a href=\"#3D音频混音中的性能\" class=\"headerlink\" title=\"3D音频混音中的性能\"></a>3D音频混音中的性能</h4><p>EQ并不适用于音频对象<br>3D音频对象会大幅提升CPU的使用率<br>将音频对象留给某些特定的声音，例如环境声或者敌人。<br>3D Audio Bed Mixer plugin会节约大量内存。</p>\n<h4 id=\"总体CPU性能表现\"><a href=\"#总体CPU性能表现\" class=\"headerlink\" title=\"总体CPU性能表现\"></a>总体CPU性能表现</h4><p>减少API调用。<br>在不需要时动态bypass掉插件或者提前离线渲染好。<br>先提前管理好声音的数目，再进入WWise，不要过度依赖于playback objects limits。<br>Wwise中设置目标平台的最大发声数。例如一百个。<br>好好利用Wwise的profiler，来进行性能分析。</p>\n<h2 id=\"永劫无间手游移植\"><a href=\"#永劫无间手游移植\" class=\"headerlink\" title=\"永劫无间手游移植\"></a>永劫无间手游移植</h2><h3 id=\"移动端移植\"><a href=\"#移动端移植\" class=\"headerlink\" title=\"移动端移植\"></a>移动端移植</h3><h4 id=\"Wwise内优化方案\"><a href=\"#Wwise内优化方案\" class=\"headerlink\" title=\"Wwise内优化方案\"></a>Wwise内优化方案</h4><ul>\n<li>手机端采样率是36K以及24K。</li>\n<li>过长的音频文件采样streaming加载。需要结合限制同时播放音频数量以及设置加载优先级，以防止手机的I&#x2F;O性能过载。</li>\n<li>资源合并删减，简化structure。、</li>\n<li>Bank拆分。（将3p的资源进行了删减和优化）</li>\n</ul>\n<h4 id=\"内存优化\"><a href=\"#内存优化\" class=\"headerlink\" title=\"内存优化\"></a>内存优化</h4><ul>\n<li>用量与I\\O：用量过低会导致IO更为频繁，因此需要平衡</li>\n<li>Soundbank：进行评估，是否继续引用或者进行卸载</li>\n<li>动静态分离：UI、脚步声等需要常驻的Bank,即使处于离线也不会被卸载</li>\n<li>LRU：根据内存情况，动态的可以卸载掉被评估的，不被需要（不重要）的bank</li>\n<li>内存分配器：在RPmalloc上做分级机制，对老的手机进行更多优化等操作</li>\n</ul>\n<h4 id=\"性能优化-1\"><a href=\"#性能优化-1\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h4><ul>\n<li>复用对象池，减少不必要的重建</li>\n<li>Tick rate策略：对object的更新是基于优先级，例如距离或者重要度等，有的是每帧更新，有的可能5帧才更新一次。</li>\n<li>sample rate：采样率下采。部分机型对音频质量要求高，当发现你采样率下调之后，会自己上采样，增加功耗。</li>\n<li>梯度计算：评估某个声音是否需要继续计算，如果不需要则直接打回。某些游戏会继续渲染但保持音量为0.</li>\n<li>利用temporal，小核心，多线程。主核心留给大处理。</li>\n</ul>\n<h3 id=\"移动端空间音频\"><a href=\"#移动端空间音频\" class=\"headerlink\" title=\"移动端空间音频\"></a>移动端空间音频</h3><h4 id=\"混响\"><a href=\"#混响\" class=\"headerlink\" title=\"混响\"></a>混响</h4><p>实时混响：覆盖全地图建筑结构，Matrix Reverb + ReverbTime\\Reverb Energy RTPC<br>卷积混响：表现特征空间，如落日寺，自研卷积混响插件、游戏场景的卷积采样、特定区域触发</p>\n<blockquote>\n<p>卷积混响<br>就是在真实场景采集到的脉冲信号（IR），能够更真实的还原场景空间特征。</p>\n</blockquote>\n<h4 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h4><ul>\n<li>通用反射：通过程序实时计算到的反射点、反射参数、播放生成的反射source并控制播放。</li>\n<li>室外尾音：在反射点播放尾音的样本，并通过RPTC控制尾音大小，可与通用反射叠加。</li>\n<li>特殊区域尾音：例如峡谷，需要在山谷两头播放尾音。</li>\n</ul>\n<h4 id=\"阻挡（obstacle）\"><a href=\"#阻挡（obstacle）\" class=\"headerlink\" title=\"阻挡（obstacle）\"></a>阻挡（obstacle）</h4><p>为了节省手机性能，只判断了敌我之间是否有障碍物。损失频段但不损失音量（与视觉提示相配合）。</p>\n<h3 id=\"空间音频的实现\"><a href=\"#空间音频的实现\" class=\"headerlink\" title=\"空间音频的实现\"></a>空间音频的实现</h3><p>不与基础音频管线耦合。手游音频开发首要目标是项目能运行跑起来，而音频效果的表现优化是在其后面的，因此不能与基础音频管线冲突或者有关联。<br>开销小并且稳定。在不同机型上都能有稳定的表现。<br>核心：生成一个与游戏内容实时匹配的AudioScene,在audioscene里面计算模拟最终描述空间音频渲染所需要的数据。</p>\n<h4 id=\"要素Feature\"><a href=\"#要素Feature\" class=\"headerlink\" title=\"要素Feature\"></a>要素Feature</h4><p>早期反射、后期混响、尾音</p>\n<p>现成技术方案：</p>\n<ul>\n<li>离线<br>体素：离线写死的方案不适合会实时变动的场景。会过度运算（overdraw）<br>Probe与体素类似，但优化会好一些。<br>trigger：场景过大，挂接过于繁杂。</li>\n<li>实时<br>几何、波动</li>\n</ul>\n<p>早期反射参数需求：反射距离、反射强度、瞬态性<br>后期混响参数需求：RT60、空间复杂度<br>尾音参数需求：空间开放度</p>\n<p>最终采用方案：<br>基于icosphere体投影构建一阶声学空间<br>相较于体素，不会overdraw，计算更为高效。</p>\n<p>体投影优势：<br>每个面彼此独立，可以利用多线程<br>根据算力的优先级程度可以分配不同朝向的算力分配，也就是面可以细分或者退化。</p>\n<p>icosphere优势：<br>可以分割出top、bottom、middle三个部分。</p>\n<h4 id=\"系统设计\"><a href=\"#系统设计\" class=\"headerlink\" title=\"系统设计\"></a>系统设计</h4><p>系统优化：<br>所有计算job化：对于多线程计算任务的抽象。会给每个job分配最低权重，强制让其到小核心运行。<br>利用temporal；<br>无效的job剔除；<br>算法优化：<br>halton-sequence替代random。<br>三角形索引。<br>不规则体积估算。</p>\n<p>运行框架：</p>\n<p>![屏幕截图 2025-02-17 181103](images&#x2F;屏幕截图 2025-02-17 181103.png)</p>\n<h4 id=\"实现优化\"><a href=\"#实现优化\" class=\"headerlink\" title=\"实现优化\"></a>实现优化</h4><p>简化曲线<br>使用ringbuffer实现早期反射：<br> 内存可控：按照最远反射距离30m，48KHZ算≈0.017MB<br> 开销：取决于最大echo数量，手游是三个。<br>Ringbuffer按需激活：<br>最多用三个反射的Emitter 表现全部早反：左右中</p>\n<p>复杂场景：采用trigger</p>\n<h3 id=\"dobly-atmos接入\"><a href=\"#dobly-atmos接入\" class=\"headerlink\" title=\"dobly atmos接入\"></a>dobly atmos接入</h3><p>按照wwise官方说明书进行。<br>设计考量，将战斗音效接入atmos，其他音乐环境音效走passthrough，避免影响战斗中的声音。</p>\n<h2 id=\"地狱潜兵2游戏混音\"><a href=\"#地狱潜兵2游戏混音\" class=\"headerlink\" title=\"地狱潜兵2游戏混音\"></a>地狱潜兵2游戏混音</h2><h3 id=\"声音的优先级设定by-HDR（High-Dynamic-Range）\"><a href=\"#声音的优先级设定by-HDR（High-Dynamic-Range）\" class=\"headerlink\" title=\"声音的优先级设定by HDR（High Dynamic Range）\"></a>声音的优先级设定by HDR（High Dynamic Range）</h3><ul>\n<li><p>需要解决的问题-掩蔽<br>很多声音同时播放，重要的声音听不清楚（掩蔽效应）<br>解决办法：闪避系统ducking<br>地狱潜兵中，采用HDR，设置优先级：确定哪种声音更重要？<br>爆炸声可能比较大，但是附近敌人的声音更重要。——响度≠重要性。</p>\n</li>\n<li><p>优先级设定<br>首先，将声音进行分类，详细程度可以视情况而定。<br>优先级映射：什么声音对玩家比较重要，由低到高进行排序。并且，排序低并不代表不重要，而是相对不重要而已。<br>根据游戏声音分类和优先级排序，进行声音闪避系统设计。</p>\n</li>\n</ul>\n<h3 id=\"HDR的基础知识\"><a href=\"#HDR的基础知识\" class=\"headerlink\" title=\"HDR的基础知识\"></a>HDR的基础知识</h3><p>详情参见wwise手册。</p>\n<ul>\n<li>逻辑音量值-total volume&#x3D;voice volume +output bus volume +bus volume</li>\n<li>对于HDR来说， total volume越高，优先级就越高。</li>\n<li>两个及以上的声音在播放时，优先级高的会对低的进行压低。</li>\n<li>闪避幅度：等于两个声音total volume 差值。</li>\n<li>包络：每种声音都指定了HDR包络。利用高优先级的声音对低优先级的声音做闪避处理（就像独立的sidechain）。</li>\n</ul>\n<h2 id=\"哈利波特·魔法觉醒\"><a href=\"#哈利波特·魔法觉醒\" class=\"headerlink\" title=\"哈利波特·魔法觉醒\"></a>哈利波特·魔法觉醒</h2><ul>\n<li>抽卡音效设计<br>在抽卡中，根据抽卡出的物品材质不同，也会进行细分，而不仅仅只根据卡牌的稀有度。<br>在抽卡过程中，根据卡片出现的摆放的位置，也会做pan的变化。</li>\n<li>魔杖&#x2F;物品展示音效设计<br>层级：写实层&#x2F;材质层 + 乐音层 + 特征层</li>\n<li>节日音频设计<br>强化节日的音频特色元素。</li>\n<li>魔法地图声音景观设计<br>为2D的地图，设计3D的景观。</li>\n<li>puredata+heavy开发的音频混响插件，可以节省音频package的大小。</li>\n<li>IP价值的利用最大化。语音设计中，贴近原著影片声线。</li>\n<li>创意设计，丰富玩家个性化。兴奋性需求奖励的道具（一开始不抱有期待，但一旦满足则会充满惊喜.）节假日，融入音频设计。中国传统节日，根据现实时间，实现不同声音效果。细节设计上满足玩家的收集欲。时装设定。</li>\n<li><strong>音频开发从玩家的需求产生</strong>，去开发对应的技术。例如，自定义咒语系统；wWISE AUDIO INPUT可以使用外部音频&#x2F;话筒；从其他音乐平台获取音频串流-音乐电台。</li>\n<li>音乐电台流程：流媒体平台API - 给出请求清单 - 返回清单获取地址 - …</li>\n</ul>\n<h2 id=\"星球：重启\"><a href=\"#星球：重启\" class=\"headerlink\" title=\"星球：重启\"></a>星球：重启</h2><p>表现力与性能的均衡与取舍：最大限度地提升单位资源的音频表现力。<br>环境声交互性：全景声的下混，俯仰角的环境声发生变化。仰角-天空；俯角-地。</p>\n<ul>\n<li>载具声音的实现</li>\n<li>动态混音：精细化音频-与玩法是否有关等<br>需要提前同意音频的标准，优先级，音频播放数量等。<br>响度设置-不仅仅是音频样本，还包括Wwise中的音频响度。<br>动态混音可以较早的介入整体音频开发，早期可以粗糙一些，这样可以暴露很多问题</li>\n<li>分机型测试-安卓与苹果的区别。</li>\n</ul>\n<p>-音频程序部分</p>\n<h2 id=\"巅峰极速\"><a href=\"#巅峰极速\" class=\"headerlink\" title=\"巅峰极速\"></a>巅峰极速</h2><ul>\n<li><p>车辆运动的声音构成：先进行细分，再部分进行整合。</p>\n</li>\n<li><p>车辆录制流程：发起录音-预约车辆（私人车主&#x2F;汽车厂商…）-预约场地-进行录制（赛场跑道录制或者室内马力机录制）。麦克风可承受声压级要大。</p>\n</li>\n<li><p>轮胎声音的录制。轮胎声音的分类。录制中，赛道漂移音色区别大，定圆漂移稳定的LOOP声。录制过久，轮胎会被磨平，音色会有差异。选择电车（避免排气、引擎等声音的干扰），选择后驱，更好漂移。</p>\n</li>\n<li><p>轮胎声音后期处理问题：一个样本还是多个样本（性能与表现的取舍）；随机样本还是粒子合成（sound seed grain）。轮胎与地面材质。</p>\n</li>\n<li><p>录音方案的选择：<br>XY立体声、double MS多通道：近咪芯收音，无相位问题，便于后期处理。<br>ORTF立体声：接近人耳的听觉感受，用于CG制作。<br>枪麦录制：补充点声源。</p>\n</li>\n<li><p>音乐与交互音乐<br>文化与节奏感。</p>\n</li>\n</ul>\n</div>"},{"_content":"---\ntitle= C#学习笔记\n---\n\n# Type（类型）\n## 类型的简介\n小内存容纳大尺寸数据会丢失数据和精度...\n大内存...小尺寸数据浪费内存\n整数类型：int 4字节；long 8字节。\n强类型语言：数据类型不能轻易转变；弱类型语言...\n程序静止时，放在硬盘（外村）内，运行时，装载到内存。\n类型中的信息：\n\t内存空间大小，\n\t储存值的大小范围，\n\t基类（父类），\n\t成员（事件，属性，方法）\n\t类型的变量分配在内存的位置\n\t\tStack(栈，比较小)/Heap(堆，更大)\n\t\tStack overflow栈溢出，堆不会溢出。\n\t\t堆上的内存如果忘记回收，会造成内存泄漏。\n\t\tcmd中调用performance monitor可以监测进程的内存。\n\t\t实例，分配到堆（heap）中去。\n## 类型系统\n### 五大数据类型 \n类（class）：Window,Form,Console\n结构体（structure）:Int,double\n枚举（enumeration）\n接口（interface）\n委托（delegate） \n\n## 变量、对象与内存\n### 变量\n变量（名）表示了变量的值存储位置（从这个位置往后数多少节，用以保存这个变量，以其数据类型的要求），并且每个变量都有一个类型，决定什么样的值，能存入变量。\n例如，int x =100;\n类型：静态变量，实例变量（字段，成员变量），数组元素，值参数，引用参数(ref)，输出形参(out) ，局部变量。\n狭义的变量，指局部变量（其他种类变量都有自己的约定名称，例如，静态变量称为静态字段）\n局部变量：方法体，函数体内声明的变量。\n\n### 值类型的变量\nbyte/short/ushort等\n值类型的储存：在内存中分配空间存储值。\n值类型没有实例，实例与变量合而为一了。\n\n### 引用类型的变量\n引用类型的储存：储存的是对象的地址。\n例如：\nStudent stu;(分配四个字节的内存，用来指向实例化对象的地址)\nstu =new Student();（开辟一段内存空间，用于储存Student类中的成员）\n\nClass Student()\n{\n  unit ID;\n  string name;\n}\n\n### 装箱/拆箱\n装箱（Boxing）\nint x=100;\nObject obj =x;\n将栈上的数据搬到堆上，然后将堆上存储这段数据的地址储存到栈上的obj上。\n拆箱（Unboxing）\n相反的操作。\nint y =(int)obj;\n\n# Method(方法)\n## 由来\n由C++和C语言中的function（函数）演变而来。\n当函数成为类的成员之后，便变为了方法（或成员函数）。方法永远是类（class）的成员。 \n## 声明与调用\nC#声明与定义不分家。\n声明结构：\n函数头   函数体\n函数头：特性  修饰符  （partial）  返回值   函数名  （）\n\t修饰符：有的可以组合\n静态方法，隶属于类，而非声明的对象。不用实例化即可以调用。\n例如：\nCalculator c = new Calculator();\nc.method1();\nCalculator.method_2();\n\nClass Calculator\n{\n public int method()\n {\n return 0;\n }\n public static method_2()\n {\n return;\n } \n}\n\nparameter：形参\nargument：实参 \n\n## 构造函数（构造器/constructor）\n## 方法的重载（Overload）\n## 方法的debug\n设置断点（breakpoint）\n观察方法调用时的call stack\nStep in/over/out：\nstep in步进。\nstep over直接略过跳过断点的细节操作，执行下一语句。\nstep out跳到断点的上一层级。\n\n## 方法的调用与栈\nstack frame:方法被调用的时候，在栈当中的布局。\n\n# 操作符（Operator）\n## 概述\n操作符有先后顺序，层级高的先运算，相同层级的从左往右依次运算。\n赋值和lambda表达式，是从右向左运算（赋值），例如x = y;\n操作符本质是函数的简记，例如3x5可以写为：Mul(3,5);\ndefault操作符：获取当前类型的默认值。\nnew操作符：创造实例。 以及创造匿名类型的实例，然后用隐式类型变量引用这个实例。\nnew修饰符：在重写父类方法的时候，可以隐藏父类方法。\ncheck操作符：检测程序是否溢出，若溢出则抛出异常。\nunchecked 操作符：用于禁止溢出检查。它告诉编译器在执行某些可能导致溢出的数学运算时，不要抛出 OverflowException 异常，而是允许溢出发生，并对溢出的结果进行截断或回绕。\ntry-catch:当程序执行到 try 块中的代码时，如果发生了异常（错误），程序会立即跳转到 catch 块，而不会继续执行后续的代码。\nsizeof操作符：获取结构体数据类型实例，在内存当中的字节数。\n~操作符：在二进制上进行按位取反。对最小值用负号（-）来取反，得不到最大值，二进制编码取反原理造成的原因。\n\n# 字段、属性、常量、索引器\n## 字段（field）\n表示与对象（类型）关联的变量，是类型的成员，旧称成员变量 。\n实例字段：与对象相关联。在对象创建时才被初始化。\n静态字段：与类型相关联，用static修饰。在类型被加载时才被初始化。\n## 属性（property）\n是用于访问对象或者类型的特征的成员，特征反映了状态。\n属性是由字段发展而来，是字段的一种拓展。\n字段：\n```C#\n//旧的写法\npublic int Age;\n//get/set的写法\nprivate int age;\npublic int GetAge()//获取字段的值\n{\n return this.age;\n}\npublic int SetAge(int value)//设置字段的值\n{\n if(value>=0&&value<=120)\n {\n  this.age=value;\n }\n ...\n} \n```\n属性现在的声明方法：\n```C#\nprivate int age;\nprivate int Age\n{\n get\n {\n return this.age;}\n }\n set\n {\n  if(value>=0&&value<=120)\n  {\n   this.age=value;\n  }\n }\n}\n```\nvalue在get/set的语法中，是专属的关键字（上下文关键字），表示传进来的数值。\n属性，也是一种语法糖，是编译器简化了编译过程。\nprop/propfull：属性声明的简写\n## 索引器\n...\n\n## 常量（constant）\n关键字：const;\n隶属于，类型而非对象。 \n局部常量，成员常量\n\n## 各种“只读”\n常量，只读字段，只读属性，静态只读字段。\n\n# 参数\n## 值参数\n不带任何修饰符的参数。\n## 引用参数\n用ref修饰符声明的形参。不创建新的储存位置，引用参数所表示的储存位置是调用中作为实参给出变量所表示的储存位置。\n变量在座位引用参数之前，必须明确赋值。\n引用修饰符作用，强调该方法会改变传入的变量的值。\n（难理解，比较绕）\n## 输出形参\n用out修饰符声明的形参，输出形参不创建新的储存位置，表示的储存位置恰是该方法调用中作为实参给出的那个变量所表示的储存位置。\n会产生除return之外的额外返回值。\nPS：params关键字\nint res = Cal(1,2,3);\nstatic int Cal(params int[] intArray)\n{\n ...\n}\nparams会自动声明，只需要输入数值即可。\n\n## 具名调用\nPrintinfo(age:34,name:\"Tim\");\nStatic void Printinfo(string name,int age)\n{\n ...\n}\n## 可选参数\nPrintinfo();\nStatic void Printinfo(string name=\"Tim\",int age=34)\n\n## 扩展方法（This)\n扩展方法必须是public static\n方法中的第一个参数必须被this修饰\n必须由静态类（static）进行收纳\n\nx作为Round方法的第一个参数（double intput），因此仅需要输入第二个参数即可。\n在double intput前加上this之后，所有double类型的值均可以使用这个方法。\n`double x =3.14159;\ndouble y =x.Round(4);\nstatic class DoubleExtension\n{\n public static double Round(this double input,int digits)\n{\n ...\n}\n}`\n\nLINQ方法：\n\n## 委托（delegate）\n是（C/C++）函数指针的“升级版”、\n变量（数据）是以某个地址为起点的一段内存中所存储的值；\n变量，是寻找数据的地址。\n函数（算法）是以某个地址为起点的一段内存中所存储的一组机器语言指令；\n函数，是寻找算法的地址。\n直接调用与间接调用：\n直接调用：通过函数名来调用函数，CPU通过函数名获取函数所在地址。\n间接调用：通过函数指针调用函数，CPU通过读取函数指针存储的值，获取函数所在地址。\n### Action委托实例\nAction委托：无返回值的委托类型。\n\n```c#\nstatic void Main(string[] args]\n{\n Calculator calculator = new Calculator();\n Action action = new Action(calculator.Report);\n //calculator.Report不需要加()，因为只是需要方法名的地址，而不是需要调用它。\n calculator.Report();\n action.Invoke();\n action();\n}\nclass Calculator\n{\n public void Report()\n {\n  Console. WriteLine(\"I have 3 methods.\");\n }\n}\n```\n\n\n### Func委托实例\n有返回值的委托\n\n\n### 委托的声明\n委托是一种类（Class），但是声明方式和一般的类不同。\n注意声明委托的位置：命名空间下，类/主函数之外，避免写错地方形成嵌套类型\n\n```C#\nnamespace DelegateExample\n{\n public delegate double Calc(double x, double y);\n class Program\n {\n  static void Main(string[] args)\n {\n   Calculator calculator = new Calculator();\n   Calc calc1 = new Calc(calculator.Add); \n   Calc calc2 = new Calc(calculator.Sub);\n   Calc calc3 = new Calc(calculator. Mul);\n   Calc calc4 = new Calc(calculator.Div);\n   double a = 100;\n   double b = 200;\n   double c = 0;\n   c = calc1.Invokola, b);\n   Console. WriteLine[c];\n   c = calc2.Invoke(a, b);\n   Console. WriteLine(c);\n   c = calc3.Invoke(a, b);\n   Console. WriteLine(c);\n   c = calc4.Invoke(a, b);\n   Console. WriteLine(c);\n }\n\n }\n class Calculator\n {\n  ...\n }\n}\n```\n\n\n\n### 委托的使用\n1.把方法当作参数传给另外一个方法。\n模板方法，“借用”指定的外部方法，来产生结果\n相当于“填空题”，委托也有返回值，除了委托部分不确定，其他部分都是确定的。\n2.回调（callback）方法，调用指定的外部方法\n相当于“流水线”，委托不需要有返回值。你可以从许多方法中选择自己需要的委托方法。\n\n### 委托使用的案例\n```C#\nnamespace DelegateExample\n{\n class Program\n static void Main(string[] args]\n {\n   ProductFactory productFactory = new ProductFactory[);\n   WrapFactory wrapFactory = new WrapFactory[];\n   Func<Product> func1 = new Func<Product>(productFactory.MakePizza);\n   Func<Product> func2 = new Func<Product>(productFactory.MakeToyCar);\n   Logger logger =new Logger();\n   Action<Product> log = new Action<Product>(logger.Log);\n   Box box1 = wrapFactory.WrapProduct(func1,log);\n   Box box2 = wrapFactory.WrapProduct(func2,log);\n   Console. WriteLine(box1.Product.Name];\n   Console. WriteLine(box2.Product.Name];\n }\n class Product\n {\n  public string Name{get; set;}\n }\n class Box\n {\n  public Product Product{get;set;}\n }\n class WrapFactory\n {\n  public Box WrapProduct(Func<Product> getProduct)\n  {\n   Box box=new Box():\n   Product product=getProduct.Invoke();\n   box.Product=product;\n   return box;\n  }\n }\n \nclass ProductFactory\n{\n public Product MakePizza()\n {\n  Product product=new Product[];\n  product.Name= \"Pizza\":\n  return product;\n }\n public Product MakeToyCar()\n {\n  Product product=new Product[];\n  product.Name = \"Toy Car\";\n  return product;\n }\n} \n}\n```\n\n\n\n### 回调Callback方法案例\n```c#\nnamespace DelegateExample\n{\n class Program\n static void Main(string[] args]\n {\n  ProductFactory productFactory = new ProductFactory[);\n  WrapFactory wrapFactory = new WrapFactory[];\n  Func<Product> func1 = new Func<Product>(productFactory.MalkePizza)\n  Func<Product> func2 = new Func<Product>(productFactory.MaakeToyCar)\n  Box box1 = wrapFactory.WrapProduct(func1);\n  Box box2 = wrapFactory.WrapProduct(func2);\n  Console. WriteLine(box1.Product.Name];\n  Console. WriteLine(box2.Product.Name];\n }\n\n class Logger\n {\n  public void Log(Product product)\n  {\n   Console.WriteLine(\"Product{0}...\")\n  }\n }\n class Product\n {\n  public string Name{get; set;}\n  public string Price{get;set;}\n }\n class Box\n {\n  public Product Product{get;set;}\n }\n class WrapFactory\n {\n \n }\n public Box WrapProduct(Func<Product>getProduct,Action<Product>logCallback)\n {\n  Box box=newBox():\n  Product product=getProduct.Invoke();\n  if(product.Price>=50)\n  {\n   logCallback(product);\n  }\n  box.Product=product;\n  return box;\n }\nclass ProductFactory\n public Product MakePizza()\n {\n  Product product=new Product[];\n  product.Name= \"Pizza\";\n  product.Price=12;\n  return product;\n }\n public Product MakeToyCar()\n {\n  Product product=new Product[];\n  product.Name = \"Toy Car\";\n  product.Price=100; \n  return product;\n }\n}\n```\n\n\n\n### 委托使用的注意点\n委托是一种方法级别的耦合，现实工作中要慎之又慎；\n委托使用不当，会使可读性下降、debug难度增加；\n把委托回调、异步调用、多线程纠缠在一起，会将代码变得难以阅读和维护；\n委托使用不当可能造成内存泄漏和程序性能下降。（被占用的内存无法被释放）\n\n### 多播委托（multicast）\n一个委托内部，封装了不止一个方法。 \n\n```C#\nclass Program\n{\n static void Main(string[] args]\n {\n  Student stu1 = new Student() {ID = 1, PenColor = ConsoleColorYellow}\n  Student stu2 = new Student() {ID = 2, PenColor = ConsoleColorGreen}\n  Student stu3 = new Student() {ID = 3, PenColor = ConsoleColor.Red } \n  Action action1 = new Action(stu1.DoHomework);\n  Action action2 = new Action(stu2.DoHomework);\n  Action action3 = new Action(stu3.DoHomework];\n  action1 += action2;\n  action1 += action3;\n  action1.Invoke();\n  }\n}\n```\n\n### 隐式异步调用\n- 同步与异步\n同步：你做完了，我在你做的基础之上接着做。\n异步：我们俩同时做。（同步进行）\n- 同步调用与异步调用\n每个程序都是一个进程（process）\n每个进程可以有多个线程（Thread）\n同步调用是在同一线程内，异步调用底层机理是多线程\n- 隐式多线程与显示多线程\n直接同步调用：直接通过方法名调用；\n间接同步调用：使用委托进行；\n隐式异步调用：使用委托的异步调用方法；\n例子：\n```C#\nclass Program\nstatic void Main[string[] args]\nStudent stu1 = new Student() {ID = 1, PenColor = ConsoleCColor. Yellow\nStudent stu2 = new Student() {ID = 2, PenColor = ConsoleCColor.Green\nStudent stu3 = new Student() {ID = 3, PenColor = ConsoleCColor.Red\nAction action1 = new Action(stu1.DoHomework];\nAction action2=new Action(stu2.DoHomework);\nAction action3 = new Action[stu3.DoHomework];\naction1.BeginInvoke(null,null)\n//生成一个分支线程。在分支线程里面调用方法。参数1：调用完之后的后续操作。\n//.NET库不支持begininvoke，改用await Task.Run(Action1);\nfor (int i = 0; i < 10; i++)\nConsole.Foreground Color = ConsoleColor.Cyan;\nConsole.WriteLine[\"Main thread {0}.\". i];\nThread.Sleep(1000);\nclass Student\n{\n //...\n}\n```\n\n显式异步调用：使用Thread或者Task；\n\n```c#\nStudent stu1 = new Student() {ID = 1, PenColor = ConsoleCColor. Yellow\n\nStudent stu2 = new Student() {ID = 2, PenColor = ConsoleCColor.Green\n\nStudent stu3 = new Student() {ID = 3, PenColor = ConsoleColor.Red\n\nThread thread1 = new Thread[new ThreadStart(stu1.DoHomework)];\n\nThread thread2 = new Thread[new ThreadStart(stu2.DoHomework)]\n\nThread thread3 = new Thread[new ThreadStart(stu3.DoHomework)]\n\nthread1.Start();\n\nthread2.Start();\n\nthread3.Start();\n\nclass Student\n\n{\n\n //...\n\n}\n```\n\n\n\n```c#\nStudent stu1 = new Student() {ID = 1, PenColor = ConsoleColor. Yellow\n\nStudent stu2 = new Student() {ID = 2, PenColor = ConsoleColorGreen}\n\nStudent stu3 = new Student() {ID = 3, PenColor = ConsoleColor.FRed\n\nTask task1 = new Task[new Action[stu1.DoHomework]];\n\nTask task2 = new Task[new Action[stu2.DoHomework]];\n\nTask task3 = new Task(new Action(stu3.DoHomework));\n\ntask1.Start();\n\ntask2.Start():\n\ntask3.Start[]:\n```\n\n- 适当的使用接口（interface）取代对委托的使用\n- 接口可以取代委托的作用。\n\n\n\n# 事件（Event）\n事件是，使对象或类具备通知能力的成员（to provide notification）。\n事件主要用于，对象或类之间的动作协调与信息传递（消息推送）。\n\n事件参数（Event Args）\n响应事件 \n\n## 事件模型的五个组成部分\n- 事件拥有者（event source ， 对象）\n- 事件成员（event ，成员）\n- 时间的响应者（event subscriber ， 对象）\n- 事件处理器（event handler ， 成员）\n- 事件订阅——把事件处理器与事件进行关联，本质是一种以委托类型为基础的“约定”。\n\n```C#\nusing System;\nusing System.Timers;\n\nnamespace EventStudy\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Timer timer = new Timer();\n            timer.Interval = 1000;\n            Boy boy = new Boy();\n            timer.Elapsed += boy.Action;\n            timer.Start();\n            Console.ReadLine();\n        }\n    }\n    class Boy\n    {\n        internal void Action(object sender, ElapsedEventArgs e)\n        {\n            Console.WriteLine(\"Jump!\");\n        }\n    }\n}\n\n```\n\n```C#\nusing System;\nusing System.Timers;\nusing System.Windows.Forms;\n\nnamespace EventStudy\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Form form =new Form();\n            Controller controller=new Controller(form);\n            form.ShowDialog();\n        }\n    }\n    class Controller\n    {\n        private Form form;\n        public Controller(Form form)\n        {\n            this.form = form;\n            this.form.Click += this.FormClick;\n        }\n\n        private void FormClick(object sender, EventArgs e)\n        {\n            this.form.Text = DateTime.Now.ToString();\n        }\n    }\n}\n```\n\n```C#\nusing System;\nusing System.Timers;\nusing System.Windows.Forms;\n\nnamespace EventStudy\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            MyForm form = new MyForm();\n            form.Click += form.FormClick;\n            form.ShowDialog();\n        }\n    }\n    class MyForm : Form\n    {\n        internal void FormClick(object sender, EventArgs e)\n        {\n            this.Text = DateTime.Now.ToString();\n        }\n    }\n}\n```\n最常用用法：\n```C#\nusing System;\nusing System.Timers;\nusing System.Windows.Forms;\n\nnamespace EventStudy\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            MyForm form = new MyForm();\n            form.ShowDialog();\n        }\n    }\n    class MyForm : Form\n    {\n        private TextBox textBox;\n        private Button button;\n        public MyForm()\n        {\n            this.textBox = new TextBox();\n            this.button = new Button();\n            this.Controls.Add(textBox);\n            this.Controls.Add(button);\n            this.button.Click += this.ButtonClicked;\n        }\n\n        private void ButtonClicked(object sender, EventArgs e)\n        {\n            this.textBox.Text = \"Hello ,World!!!!!!!!\";\n        }\n    }\n}\n```\n\n## 事件的声明\n完整声明\n```C#\nusing System;\nusing System.Timers;\nusing System.Windows.Forms;\n\nnamespace EventStudy\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Customer customer = new Customer();\n            Waiter waiter = new Waiter();\n            customer.Order += waiter.Action;\n            Console.ReadLine();\n            customer.Think();\n            customer.Paythebill();\n        }\n    }\n\n    public class OrderEventArgs : EventArgs\n    {\n        public string DishName { get; set; }\n        public string Size { get; set; }\n    }\n\n    public delegate void OrderEventHandler(Customer customer, OrderEventArgs e);\n\n    public class Customer\n    {\n        private OrderEventHandler orderEventHandler;\n\n        public event OrderEventHandler Order\n        {\n            add\n            {\n                this.orderEventHandler += value;\n            }\n            remove\n            {\n                this.orderEventHandler -= value;\n            }\n        }\n\n        public double Bill { get; set; }\n        public void Paythebill()\n        {\n            Console.WriteLine(\"I will pay ${0}\", this.Bill);\n        }\n\n        public void Think()\n        {\n            OrderEventArgs e = new OrderEventArgs();\n            e.DishName = \"baga\";\n            e.Size = \"large\";\n            this.orderEventHandler.Invoke(this, e);\n        }\n    }\n\n    public class Waiter\n    {\n        public void Action(Customer customer, OrderEventArgs e)\n        {\n            Console.WriteLine(\"I will serve you the dish : {0}\", e.DishName);\n            double price = 10;\n            switch (e.Size)\n            {\n                case \"small\":\n                    price = price * 0.5;\n                    break;\n                case \"large\":\n                    price = price * 1.5;\n                    break;\n                default:\n                    break;\n            }\n            customer.Bill = price;\n        }\n    }\n}\n\n```\n简略声明（Field-like）\n语法糖。\n```C#\n        public event OrderEventHandler Order;\n        public void Think()\n        {\n            OrderEventArgs e = new OrderEventArgs();\n            e.DishName = \"baga\";\n            e.Size = \"large\";\n            this.Order.Invoke(this, e);\n            //简略后，用事件代替为之前的字段。\n            //而在完整版的代码中，事件只能用来+=（订阅）运算。\n        }\n```\n事件，让程序更加有逻辑，对象之间的关系更清晰。 \n委托是方法与方法之间的强关联，事件是对象与对象之间。而委托可能造成，不同对象，对同一个方法进行滥用。\n事件，只能访问事件的订阅操作，而想访问事件的其他层面则不允许。而委托，可以设定传入委托的具体参数和返回值。\n事件的本质，是委托字段的包装器，对其进行封装（encapsulation），事件对外界隐藏了委托实例的大部分功能，而只能对其进行订阅。\nprotected,dynamic,partial，virtual\n\n# 类（class）\n构造函数与析构函数\n析构函数：`~Student(){...}`\n## 类的访问级别修饰符\n也就是，当其他项目（Aseembly）想要访问当前项目时，该类是否能被引用。\npublic：外部可以引用。\ninternal：仅在该项目内部有效。\n\n## 类的继承\nbase class （基类）与derived class（派生类）\n父类与子类\n一个子类的实例，也是父类的一个实例。（例如，一个类的实例，是这个类的实例，也是object类的实例）\nsealed：将该类进行封闭，不能再进行继承。\nC#中一个类只支持一个基类，但是可以支持多个基接口。\npublic与internal修饰的类，需要注意访问级别的层级问题，子类访问级别不能高于父类。\n在构造基类与派生类时，派生类会对基类的方法等进行改写和重构，如果再想通过该派生类去访问该派生类改写过的基类的方法等，是不行的（已被改写）。\n父类的实例构造器，不能被子类继承。\n\n\n## 类成员的访问\nprotected：将类成员的访问级别，限制在继承链上，protected 的类/方法，其子类可以对其进行访问。并且是跨程序集的。可以跟internal修饰符进行组合。\n\n## 重写与多态（polymorphism）\n```C#\nclass Vehicle \n{\n public virtual void Run()\n Console.WriteLine(\"I'm running!\");\n}\nclass Car: Vehicle \n{\n public override void Run() \n {\n  Console.WriteLine(\"Car is running!\");\n }\n}\n```\n如果不加virtual与override，则是子类对父类方法的隐藏。\n在C#编程中，可以通过父类来声明一个子类的实例，这样做的用意是实现多态，也就是，在父类的引用中存储任何一个子类的对象，从而可以调用不同子类的实现。**（父类的方法或者属性，引用继承链上实例化的子类所带有的最新重写版本）**\n通过父类声明子类实例可以让代码更加通用，尤其是在处理大量继承体系时。\n在使用父类声明子类的实例时，最终得到的是 子类的实例，尽管变量的类型是父类。\n\n```C#\npublic void MakeAnimalSound(Animal animal)\n{\n    animal.MakeSound();  // 不管是 Dog 还是 Cat，都会调用各自的 MakeSound 方法\n}\n\npublic static void Main()\n{\n    Animal dog = new Dog();\n    Animal cat = new Cat();\n\n    MakeAnimalSound(dog);  // 输出: Bark\n    MakeAnimalSound(cat);  // 输出: Meow\n}\n```\n\n```C#\npublic class Animal\n{\n    public string Name { get; set; }\n\n    public virtual void Speak()\n    {\n        Console.WriteLine(\"Animal speaks\");\n    }\n}\n\npublic class Dog : Animal\n{\n    public void WagTail()\n    {\n        Console.WriteLine(\"Dog is wagging its tail\");\n    }\n\n    public override void Speak()\n    {\n        Console.WriteLine(\"Dog barks\");\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        Animal animal = new Dog(); // 父类类型的变量指向子类实例\n        animal.Name = \"Buddy\";\n        \n        animal.Speak();  // 输出: Dog barks\n\n        // animal.WagTail();  // 错误，Animal 类中没有 WagTail 方法\n    }\n}\n```\n\n属性也可以被重写。\n# 接口、抽象类、SOLID、单元测试和反射\n\n## 接口与抽象类\n算法\\设计原则\n具体类 → 抽象类 → 接口：越来越抽象，内部实现的东西越来越少。\n抽象类是未完全实现逻辑的类,（有被实现的部分也就是非abstract部分，也有部分abstract的）\n### 抽象类与开放关闭（开闭）原则\n**抽象类**不允许被实例化，但是可以作为基类。可以通过子类实例引用具体的方法。\n**开闭原则**：没有特别情况（修BUG和增添新功能），尽可能不去修改已经写好的代码。也就是：我们应该封装那些不变的、稳定的、固定的和确定的成员，把那些不确定的、有可能改变的成员声明为抽象成员，并且留给子类去实现。\n\n### 接口（Interface）与单元测试\n- 接口是完全未实现逻辑的“类”，成员全部为public.\n- 接口为解耦而生，方便单元测试，高内聚，低耦合。\n- 接口是一个协约（contract）（有分工必有协作，有协作必有协约）\n- 接口不能被实例化，只能用来声明变量、引用具体类（concrete class）的实例。\n举例：\n```C#\n//接口-最抽象的类（所有方法等都是abstract）\ninterface IVehicle \n{\n void Stop();\n void Fill();\n void Run()\n}\n//基类\nabstract class Vehicle : IVehicle \n{\n public void Stop()\n {\n  Console.WriteLine('Stopped!');\n }\n public void Fill() \n {\n  Console.WriteLine(\"Pay and fill...\");\n }\n abstract public void Run();\n}\n//实现类-两个\nclass Car : IVehicle \n{\n public override void Run() \n {\n  Console.WriteLine(\"Car is running...\");\n }\n}\nclass Truck : IVehicle \n{\n public override void Run() \n {\n  Console.WriteLine(\"Truck is running\");\n }\n}\n```\n接口在工作中的一般使用方法\n\n\n\n方法\\类之间的依赖或耦合\n```C#\nclass Program\n{\n static void Main(string[args] \n {\n  var engine = new Engine();\n  var car = new Car(engine);\n  car.Run(3);\n  Console.WriteLine(car.Speed);\n }\n}\n//Engine与Car类有紧耦合，Car类对Engine类有强依赖\nclass Engine \n{\n public int RPM {get; private set;}\n public void Work[int gas] {\n this.RPM = 1000 * gas;\n //this.RPM = 0;\n}\nclass Car \n{\n private Engine engine;\n public Car(Engine engine) {\n  _engine = engine;\n }\n public int Speed {get; private set;}\n public void Run[int gas] {\n  _engine.Work(gas);\n }\n this.Speed = engine.RPM / 100;\n}\n```\n接口可以降低耦合度（保证给你提供的功能准确无误，可靠的）：\n```C#\nclass Program {\n static void Main(stringħ args) {\n  var user = new PhoneUser(new EricssonPhone)//只需要更改这一个地方，其他地方均不需要改动，因此耦合度低。\n  user.UsePhone();\n }\n}\nclass PhoneUser{\n private string _phone\n public PhoneUser(IPhone phone){\n  _phone = phone;\n }\n public void UsePhone(){\n  ...\n }\n}\ninterface IPhone{...}\nclass NokiaPhone : IPhone{...}\nclass EricssonPhone : IPhone{...}\n```\n\n#### 依赖反转/倒置原则（Dependecy Inversion）：\n之前是一个类依赖于另一个类，可以通过设计，改造为，一个类依赖于一个接口，而接口被依赖于其他类。\n例如，司机依赖于交通工具接口，而不同种类的运输工具也依赖于交通工具接口。\n#### 接口隔离原则（Interface Seperation）\n接口和类的大小也不能太小，要把握好度。\n接口提供的功能多于功能调用者\n调用者不能多要功能，也就是调用最小的接口即可。\n```C#\nclass Program \n{\n static void Main〔string[] args) {\n var driver = new Driver(new Car()//new Tank())};\n driver.Drive();\n }\n}\nclass Driver \n{\n private IVehicle _vehicle;\n public Driver(IVehicle vehicle) \n {\n  _vehicle=vehicle;\n }\n public void Drive() \n {\n  _vehicle.Run();\n }\n}\n interface IVehicle\n {\n  void Run();\n }\n  interface IWeapon\n {\n  void Fire();\n }\n class Car : IVhicle{...}\n class Truck : IVhicle{...}\n\n interface ITank:IVehicle, IWeapon\n {\n  //\n }\n class LightTank : ITank{...}\n class Medium Tank : ITank{...}\n class HeavyTank : ITank{...}\n```\n\n#### 单元测试：\n在同一个solution下添加新的test project,命名为:**默认名称空间.test**;\n...\n\n## 反射、特性和依赖注入（Dependency Injection）\n\n### 反射（Reflection）\n是一种设计模式，通过依赖注入实现\n### 依赖注入\n将`Itank tank = new HeavyTank();`操作进行区分。\n因为，当给程序进行升级的时候，很多时候接口后面所引用的实例具体类型需要大量更改，但是有的又不需要，因此，我们通过依赖注入，只需要将注册时候的引用实例类型更改一次即可，并且也可以和仍然需要`Itank tank = new HeavyTank();`的代码进行区分。\n\n```C#\n interface ITank:IVehicle, IWeapon\n {\n  //\n }\n interface IVehicle\n {\n  void Run();\n }\n interface IWeapon\n {\n  void Fire();\n }\nclass LightTank : ITank{...}\nclass Medium Tank : ITank{...}\nclass HeavyTank : ITank{...}\n \nclass Program \n{\n static void Main〔string[] args] \n {\n  //注册。\n  var sc = new ServiceCollection();\n  sc.AddScoped(typeof(ITank), typeof(Medium Tank)};\n  //使用依赖注入后，只需要在这里更改ITank类引用的具体实例\n  var sp = sc.BuildService Provider();\n  //以下，是进行前台运行操作。\n  ITank tank=sp.GetService<lTank>();\n  tank.Fire();\n  tank.Run();\n }\n}\n\n//-----------------------------------------\nclass Program \n{\n static void Main〔string[] args] \n {\n  //注册。\n  var sc = new ServiceCollection();\n  sc.AddScoped(typeof(IVehicle), typeof(Medium Tank)};\n  sc.AddScoped<Driver>();\n  var sp = sc.BuildService Provider();\n  //以下，是进行前台运行操作。\n  var driver=sp.GetService<Driver>();\n  //当我们创建driver实例的时候，不再需要在构造函数里面去引用具体的类实例。\n  //因为Driver类的构造函数中有传入参数的声明（IVehicle），因此DI会在注册列表中去找你的IVihecle，以及与之对应的类。\n  driver.Drive();\n }\n} \n```\n\n### 通过反射实现更松的耦合\n```C#\n\nusing System;\nusing System.Runtime.Loader;\n\nnamespace ReflectionStudy\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine();\n            //在程序路径下创建Animals文件夹\n            var folder = Path.Combine(Environment.CurrentDirectory, \"Animals\");\n            //获取Animals文件夹里面的文件\n            var files = Directory.GetFiles(folder);\n            //创建动物的集合\n            var animalTypes = new List<Type>();\n            foreach (var file in files)\n            {\n                //将文件夹内的文件整合成一个assembly类型的实例\n                var assembly = AssemblyLoadContext.Default.LoadFromAssemblyPath(file);\n                //获得assembly里面，每个元素的所有信息（属性和方法等）\n                var types = assembly.GetTypes();\n                //将每个符合要求的type类型加到我们需要的type集合当中去。\n                foreach (var t in types)\n                {\n                    if (t.GetMethod(\"Voice\") != null)\n                    {\n                        animalTypes.Add(t);\n                    }\n                }\n            }\n\n            while (true)\n            {\n                //将animalsType中的动物逐一打印出名字\n                for (int i = 0; i < animalTypes.Count; i++)\n                {\n                    Console.WriteLine($\"{i + 1}。{animalTypes[i].Name}\");\n                }\n                Console.WriteLine(\"=========================\");\n                //选择动物，然后判断是否超出范围，没有则为其选择对应的动物\n                Console.WriteLine(\"Please choose animal:\");\n                int index = int.Parse(Console.ReadLine());\n                if (index > animalTypes.Count || index < 1)\n                {\n                    Console.WriteLine(\"No such an animal. Try again!\");\n                    continue;                    \n                };\n                int Clicktimes = int.Parse(Console.ReadLine());\n                //获取对应动物类型的typeinfo信息，然后创建反射。\n                var t = animalTypes[index - 1];\n                //获取t中，我们需要的方法。\n                var m = t.GetMethod(\"Voice\");\n                //创建object实例o，并通过它来调用t实例的方法或者属性\n                var o = Activator.CreateInstance(t);\n                //将o传给新创建的object，然后触发m所反射的方法\n                m.Invoke(o, new object[] { Clicktimes });\n            }\n        }\n    }\n}\n```\n**Assembly** 类可以加载以下类型的文件：\n.exe 文件（可执行文件）\n.dll 文件（动态链接库）\n.winmd 文件（Windows Metadata 文件）\n特定平台的程序集（如 .a、.so、.dylib）\n加载这些文件时，Assembly 类会解析文件中的元数据，并允许你通过反射访问其中的类型、方法等信息。\n\n- **.dll文件制作**\n需要另起一个工程，选择class lib。\n- ** SDK制作**\n在总解决方案中，添加Interface工程\n- **制作SDK插件**\n在项目中添加依赖（dependence）中，选择browse，引用即可。\n\n```C#\nnamespace Animals.Lib2 {\n [Unfinished]\n public class Cow : IAnimal \n {\n  public void Voice(int times) \n  {\n   for (inti=0; i < times; i++)\n   {\n    Console.WriteLine(\"Moo!\");\n   }\n  }\n }\n}\n```\n- **Attribute**\n在制作插件的过程中，未完成的部分，用[Unfinished]标注，最后在主程序这边会过滤掉。\n前提是，在SDK接口开发中，声明一个Unfinished的特性，声明如下：\n```C#\nnamespace BabyStroller.SDK {\n public class UnfinishedAttribute : Attribute {\n }\n}\n```\n\nif continue\n\n当我们采用接口和SDK了之后，代码会发生改动\n比如过滤无效类型：\n```C#\nforeach (var t in types) \n{\n if (t.GetInterfaces().Contains(typeof(IAnimal))) \n {\n  var isUnfinished = t.GetCustomAttributes(false).Any(a   => a.GetType() == typeof(UnfinishedAttribute)};\n  if (isUnfinished) continue;\n  animalTypes.Add(t);\n }\n}\n```\n\n以及最调用时：\n```C#\nint times = int.Parse(Console.ReadLine()};\nvar t = animalTypes[index - 1];\nvar m = t.GetMethod(\"Voice\");\nvar o = Activator.Createlnstance(t);\nvar a = o as IAnimal;\na.Voice(times);\n```\n\n>接口`IAnimal` 定义了 `Voice `方法签名，例如：\n```C#\npublic interface IAnimal\n{\n    void Voice(int times);\n}\n```\n类实现接口：\n假设有一个类`Dog`实现了 IAnimal 接口，并提供了 Voice 方法的实现：\n```C#\npublic class Dog : IAnimal\n{\n    public void Voice(int times)\n    {\n        Console.WriteLine($\"The dog barks {times} times.\");\n    }\n}\n```\n这个类实现了 IAnimal 接口，提供了 Voice 方法的具体实现。\n`var o = Activator.CreateInstance(t);`\no 是 Dog 类型的实例（如果 t 是 Dog）。此时，o 既是 Dog 类型的对象，也是 IAnimal 类型的对象，因为 Dog 实现了 IAnimal 接口。\n接口转换和方法调用：你将 o 强制转换为 IAnimal 类型：\n`var a = o as IAnimal;`\n如果 o 实现了 IAnimal 接口，转换会成功，a 就变成了一个 IAnimal 类型的引用，指向 o。然后你可以调用 a.Voice(times)，实际上是在调用 Dog 类中实现的 Voice 方法。\n\n# 泛型、partial类、枚举、结构体\n## 泛型（generic）\n为什么需要泛型：避免成员膨胀或者类型膨胀\n正交性：泛型类型（类/接口/委托/...）、泛型成员（属性/方法/字段/...） \n### 泛型类型\n```C#\ninternal class Program{\n public static void Main(string[] args) args) {\n  Apple apple=new AppleO{Color= \"Red\"};\n  Book book = new BookO {Name = \"New Book\"};\n  Box<Apple> box1 = new Box<Apple>(){Cargo = apple};\n  Box<Book> box2=new Box<Book>Q{Cargo = book};\n }\n}\n\nclass Apple {\npublic string Color {get; set;}\n}\n\nclass Book {\n public string Name { get; set;}\n}\nclass Box<TCargo>{\n public TCargo Cargo {get; set;}\n}\n```\n\n\n### 泛型接口\n```c#\ninternal class Program{\n public static void Main(string[] args) args) {\n  Student<int> stu = new Student<int>();\n  stu.ID = 101;\n  stu.Name= \"Timothy\";\n }\n\ninterface IUnique<Tld> {\n TId ID{get;set;}\n}\n\nclass Student<TId>:lUnique<TId> {\n public TId ID { get; set;}\n public string Name {get; set;}\n}\n```\n### 泛型集合\n带有一个类型参数的泛型类型\n```C#\ninternal class Program {\n public static void Main(string[] args) {\n IList<int> list = new List<int>();\n for (int i = 0;i<100; i++) {\n  list.Add(i);\n }\n foreach (var item in list) {\n  Console.WriteLine(item);\n }\n}\n```\n带有两个类型参数的泛型类型\n```c#\nDictionary<int, string> dict = new Dictionary<int, string>\n```\n\n### 泛型方法\n```C#\ninternal class Program{\n public static void Main(string[] args) args) {\n  int[] a1 = {1,2,3, 4, 5};\n  int[] a2 = {1, 2, 3, 4, 5,6};\n  double[] a3 = {1.1, 2.2, 3.3, 4.4, 5.5};\n  double[] a4 = {1.1, 2.2, 3.3, 4.4, 5.5, 6.6};\n  var result=Zip(a1,a2);\n  //var result=Zip(a3,a4);\n  Console.WriteLine(string.Join(\",\", result)};\n }\n}\n\n//方法：把两个数组组合成一个数组。\nstatic T[] Zip<T>(T[] a, T[] b){\n T[] zipped = new T[a.Length + b.Length];\n int ai = 0, bi = 0, zi = 0;\n do {\n  if (ai < a.Length) zipped[zi++]= a[ai++];\n  if (bi < b.Length) zipped[zi++] = b[bi++];\n } \n while (ai < a.Length || bi < b.Length);\n return zipped;\n}\n```\n\n### 泛型委托\nAction泛型委托\n```C#\ninternal class Program\n{\n public static void Main(string[] args) args) \n {\n  //Action泛型委托声明的方式和Action普通委托声明方式有差异。\n  Action<string> a1 = Say;\n  //Action a1 = new Action(Say)\n  a1();\n }\n static void Say(string str)\n {\n  Console.WriteLine(...);\n }\n static void Mul(int x)\n {\n  ...;\n }\n}\n\n```\nFunc泛型委托\n```c#\ninternal class Program\n{\n public static void Main(string[] args) args) \n {\n  Func<double,double,double> func1 = Add;\n  var result = func1(100, 200);\n  Console.WriteLine(result); \n }\n static int Add(int a,int b)\n {\n  ...;\n }\n static double Add(double a,double b)\n {\n  ...;\n }\n```\n泛型委托与lambda表达式：`Func<double,double,double> func1 = {a, b}=>{return a+b;};`\n可以简化语句，节省声明方法所可能污染代码的可能。\n\n## partial类\n减少类的派生，当原类会自动更新覆盖等时，把自己添加的方法等放到其他名称空间下，则不会被删除或者重写。\n\npartial类必须要保证和原类型在同一个名称空间之下。\n\n## 枚举\n枚举的每个值都有大小，大小也可以自定义设置。\n`Console.WriteLine((int)Level.Employee);`\n```C#\nenum Level\n{\n Employee = 100,\n Boss = 200,\n}\n/////////////////////////////\nenum Level\n{\n Employee = 100,\n Boss,\n}\n//不给BOSS,额外设定值的话，那么bOSS是101.\n```\n枚举的比特位编程\n```C#\ninternal class Program\n{\n public static void Main(string[] args) args) \n {\n  //假设这个人四个技能都会。\n  person.Skill = Skill.Drive | Skill.Cook| Skill.Program| SkiTeach;\n  Console.WriteLine();\n  //按或运算符计算。\n }\nenum Skill \n{\n Drive = 1,\n Cook=2,\n Program=4,\n Teach=8\n}\nclass Person\n{\n public Skill skill;\n}\n```\n## 结构体（struct）\n结构体是值类型，存放值类型数据。\n装箱与拆箱操作：\n```C#\ninternal class Program \n{\n public static void Main(string[] args) args) \n {\n  Student student = new Student(KID = 101, Name = \"Timtohy223;\n  object object = student;//装箱\n  Student student2 = (Student) obj;//拆箱\n  Console.WriteLine($\"#{student2.ID} Name:(student2Name}\")\n }\n}\n\nstruct Student \n{\n public int ID { get; set;}\n public string Name { get; set;}\n}\n```\n结构体对象，进行复制时，是完全复制了其所有数据，而不是只复制了其引用的地址。\n结构体类型，只能由接口派生。\n结构体不能拥有显示的无参构造器：`public Studnt(){}`.（备注，有参的可以。）\n\n\n\n\n# LINQ、lambda表达式与委托\n## lambda\n- 匿名方法\n- Inline方法\n\n**泛型委托的类型推断**\n```C#\n//两种表达方式：\n//Func<int, int, int> func = new Func<int,int,int>((a, b) => { return a + b;});\nFunc<int, int, int> func = (a, b) => { return a + b;};\nint res = func(100, 200);\nConsole.WriteLine(res);\nfunc=(x,y)=>{returnx\nres = func(3,4);\ny;};\nConsole.WriteLine(res);\n```\n另外一种使用方式：\n```C#\nclass Program \n{\n static void Main(string[] args) \n {\n  DoSomeCalc<int>((int a, int b) => (return a b; }, 100,200);\n  //高级写法：\n  //DoSomeCalc((a,b) => (return a b; }, 100,200);\n  static void DoSomeCalc<T>(Func<T, T, T  T> func,T x, Ty)\n {\n  T res=func(x,y);\n  Console.WriteLine(res);\n }\n}\n```\n## LINQ(.NET Language Integrated Query)\n将C#语句转换为sql语句，进行查询，但是sql的查询会更准确，LINQ只是临时简单使用。\n........\n","source":"_posts/C#学习.md","raw":"---\ntitle= C#学习笔记\n---\n\n# Type（类型）\n## 类型的简介\n小内存容纳大尺寸数据会丢失数据和精度...\n大内存...小尺寸数据浪费内存\n整数类型：int 4字节；long 8字节。\n强类型语言：数据类型不能轻易转变；弱类型语言...\n程序静止时，放在硬盘（外村）内，运行时，装载到内存。\n类型中的信息：\n\t内存空间大小，\n\t储存值的大小范围，\n\t基类（父类），\n\t成员（事件，属性，方法）\n\t类型的变量分配在内存的位置\n\t\tStack(栈，比较小)/Heap(堆，更大)\n\t\tStack overflow栈溢出，堆不会溢出。\n\t\t堆上的内存如果忘记回收，会造成内存泄漏。\n\t\tcmd中调用performance monitor可以监测进程的内存。\n\t\t实例，分配到堆（heap）中去。\n## 类型系统\n### 五大数据类型 \n类（class）：Window,Form,Console\n结构体（structure）:Int,double\n枚举（enumeration）\n接口（interface）\n委托（delegate） \n\n## 变量、对象与内存\n### 变量\n变量（名）表示了变量的值存储位置（从这个位置往后数多少节，用以保存这个变量，以其数据类型的要求），并且每个变量都有一个类型，决定什么样的值，能存入变量。\n例如，int x =100;\n类型：静态变量，实例变量（字段，成员变量），数组元素，值参数，引用参数(ref)，输出形参(out) ，局部变量。\n狭义的变量，指局部变量（其他种类变量都有自己的约定名称，例如，静态变量称为静态字段）\n局部变量：方法体，函数体内声明的变量。\n\n### 值类型的变量\nbyte/short/ushort等\n值类型的储存：在内存中分配空间存储值。\n值类型没有实例，实例与变量合而为一了。\n\n### 引用类型的变量\n引用类型的储存：储存的是对象的地址。\n例如：\nStudent stu;(分配四个字节的内存，用来指向实例化对象的地址)\nstu =new Student();（开辟一段内存空间，用于储存Student类中的成员）\n\nClass Student()\n{\n  unit ID;\n  string name;\n}\n\n### 装箱/拆箱\n装箱（Boxing）\nint x=100;\nObject obj =x;\n将栈上的数据搬到堆上，然后将堆上存储这段数据的地址储存到栈上的obj上。\n拆箱（Unboxing）\n相反的操作。\nint y =(int)obj;\n\n# Method(方法)\n## 由来\n由C++和C语言中的function（函数）演变而来。\n当函数成为类的成员之后，便变为了方法（或成员函数）。方法永远是类（class）的成员。 \n## 声明与调用\nC#声明与定义不分家。\n声明结构：\n函数头   函数体\n函数头：特性  修饰符  （partial）  返回值   函数名  （）\n\t修饰符：有的可以组合\n静态方法，隶属于类，而非声明的对象。不用实例化即可以调用。\n例如：\nCalculator c = new Calculator();\nc.method1();\nCalculator.method_2();\n\nClass Calculator\n{\n public int method()\n {\n return 0;\n }\n public static method_2()\n {\n return;\n } \n}\n\nparameter：形参\nargument：实参 \n\n## 构造函数（构造器/constructor）\n## 方法的重载（Overload）\n## 方法的debug\n设置断点（breakpoint）\n观察方法调用时的call stack\nStep in/over/out：\nstep in步进。\nstep over直接略过跳过断点的细节操作，执行下一语句。\nstep out跳到断点的上一层级。\n\n## 方法的调用与栈\nstack frame:方法被调用的时候，在栈当中的布局。\n\n# 操作符（Operator）\n## 概述\n操作符有先后顺序，层级高的先运算，相同层级的从左往右依次运算。\n赋值和lambda表达式，是从右向左运算（赋值），例如x = y;\n操作符本质是函数的简记，例如3x5可以写为：Mul(3,5);\ndefault操作符：获取当前类型的默认值。\nnew操作符：创造实例。 以及创造匿名类型的实例，然后用隐式类型变量引用这个实例。\nnew修饰符：在重写父类方法的时候，可以隐藏父类方法。\ncheck操作符：检测程序是否溢出，若溢出则抛出异常。\nunchecked 操作符：用于禁止溢出检查。它告诉编译器在执行某些可能导致溢出的数学运算时，不要抛出 OverflowException 异常，而是允许溢出发生，并对溢出的结果进行截断或回绕。\ntry-catch:当程序执行到 try 块中的代码时，如果发生了异常（错误），程序会立即跳转到 catch 块，而不会继续执行后续的代码。\nsizeof操作符：获取结构体数据类型实例，在内存当中的字节数。\n~操作符：在二进制上进行按位取反。对最小值用负号（-）来取反，得不到最大值，二进制编码取反原理造成的原因。\n\n# 字段、属性、常量、索引器\n## 字段（field）\n表示与对象（类型）关联的变量，是类型的成员，旧称成员变量 。\n实例字段：与对象相关联。在对象创建时才被初始化。\n静态字段：与类型相关联，用static修饰。在类型被加载时才被初始化。\n## 属性（property）\n是用于访问对象或者类型的特征的成员，特征反映了状态。\n属性是由字段发展而来，是字段的一种拓展。\n字段：\n```C#\n//旧的写法\npublic int Age;\n//get/set的写法\nprivate int age;\npublic int GetAge()//获取字段的值\n{\n return this.age;\n}\npublic int SetAge(int value)//设置字段的值\n{\n if(value>=0&&value<=120)\n {\n  this.age=value;\n }\n ...\n} \n```\n属性现在的声明方法：\n```C#\nprivate int age;\nprivate int Age\n{\n get\n {\n return this.age;}\n }\n set\n {\n  if(value>=0&&value<=120)\n  {\n   this.age=value;\n  }\n }\n}\n```\nvalue在get/set的语法中，是专属的关键字（上下文关键字），表示传进来的数值。\n属性，也是一种语法糖，是编译器简化了编译过程。\nprop/propfull：属性声明的简写\n## 索引器\n...\n\n## 常量（constant）\n关键字：const;\n隶属于，类型而非对象。 \n局部常量，成员常量\n\n## 各种“只读”\n常量，只读字段，只读属性，静态只读字段。\n\n# 参数\n## 值参数\n不带任何修饰符的参数。\n## 引用参数\n用ref修饰符声明的形参。不创建新的储存位置，引用参数所表示的储存位置是调用中作为实参给出变量所表示的储存位置。\n变量在座位引用参数之前，必须明确赋值。\n引用修饰符作用，强调该方法会改变传入的变量的值。\n（难理解，比较绕）\n## 输出形参\n用out修饰符声明的形参，输出形参不创建新的储存位置，表示的储存位置恰是该方法调用中作为实参给出的那个变量所表示的储存位置。\n会产生除return之外的额外返回值。\nPS：params关键字\nint res = Cal(1,2,3);\nstatic int Cal(params int[] intArray)\n{\n ...\n}\nparams会自动声明，只需要输入数值即可。\n\n## 具名调用\nPrintinfo(age:34,name:\"Tim\");\nStatic void Printinfo(string name,int age)\n{\n ...\n}\n## 可选参数\nPrintinfo();\nStatic void Printinfo(string name=\"Tim\",int age=34)\n\n## 扩展方法（This)\n扩展方法必须是public static\n方法中的第一个参数必须被this修饰\n必须由静态类（static）进行收纳\n\nx作为Round方法的第一个参数（double intput），因此仅需要输入第二个参数即可。\n在double intput前加上this之后，所有double类型的值均可以使用这个方法。\n`double x =3.14159;\ndouble y =x.Round(4);\nstatic class DoubleExtension\n{\n public static double Round(this double input,int digits)\n{\n ...\n}\n}`\n\nLINQ方法：\n\n## 委托（delegate）\n是（C/C++）函数指针的“升级版”、\n变量（数据）是以某个地址为起点的一段内存中所存储的值；\n变量，是寻找数据的地址。\n函数（算法）是以某个地址为起点的一段内存中所存储的一组机器语言指令；\n函数，是寻找算法的地址。\n直接调用与间接调用：\n直接调用：通过函数名来调用函数，CPU通过函数名获取函数所在地址。\n间接调用：通过函数指针调用函数，CPU通过读取函数指针存储的值，获取函数所在地址。\n### Action委托实例\nAction委托：无返回值的委托类型。\n\n```c#\nstatic void Main(string[] args]\n{\n Calculator calculator = new Calculator();\n Action action = new Action(calculator.Report);\n //calculator.Report不需要加()，因为只是需要方法名的地址，而不是需要调用它。\n calculator.Report();\n action.Invoke();\n action();\n}\nclass Calculator\n{\n public void Report()\n {\n  Console. WriteLine(\"I have 3 methods.\");\n }\n}\n```\n\n\n### Func委托实例\n有返回值的委托\n\n\n### 委托的声明\n委托是一种类（Class），但是声明方式和一般的类不同。\n注意声明委托的位置：命名空间下，类/主函数之外，避免写错地方形成嵌套类型\n\n```C#\nnamespace DelegateExample\n{\n public delegate double Calc(double x, double y);\n class Program\n {\n  static void Main(string[] args)\n {\n   Calculator calculator = new Calculator();\n   Calc calc1 = new Calc(calculator.Add); \n   Calc calc2 = new Calc(calculator.Sub);\n   Calc calc3 = new Calc(calculator. Mul);\n   Calc calc4 = new Calc(calculator.Div);\n   double a = 100;\n   double b = 200;\n   double c = 0;\n   c = calc1.Invokola, b);\n   Console. WriteLine[c];\n   c = calc2.Invoke(a, b);\n   Console. WriteLine(c);\n   c = calc3.Invoke(a, b);\n   Console. WriteLine(c);\n   c = calc4.Invoke(a, b);\n   Console. WriteLine(c);\n }\n\n }\n class Calculator\n {\n  ...\n }\n}\n```\n\n\n\n### 委托的使用\n1.把方法当作参数传给另外一个方法。\n模板方法，“借用”指定的外部方法，来产生结果\n相当于“填空题”，委托也有返回值，除了委托部分不确定，其他部分都是确定的。\n2.回调（callback）方法，调用指定的外部方法\n相当于“流水线”，委托不需要有返回值。你可以从许多方法中选择自己需要的委托方法。\n\n### 委托使用的案例\n```C#\nnamespace DelegateExample\n{\n class Program\n static void Main(string[] args]\n {\n   ProductFactory productFactory = new ProductFactory[);\n   WrapFactory wrapFactory = new WrapFactory[];\n   Func<Product> func1 = new Func<Product>(productFactory.MakePizza);\n   Func<Product> func2 = new Func<Product>(productFactory.MakeToyCar);\n   Logger logger =new Logger();\n   Action<Product> log = new Action<Product>(logger.Log);\n   Box box1 = wrapFactory.WrapProduct(func1,log);\n   Box box2 = wrapFactory.WrapProduct(func2,log);\n   Console. WriteLine(box1.Product.Name];\n   Console. WriteLine(box2.Product.Name];\n }\n class Product\n {\n  public string Name{get; set;}\n }\n class Box\n {\n  public Product Product{get;set;}\n }\n class WrapFactory\n {\n  public Box WrapProduct(Func<Product> getProduct)\n  {\n   Box box=new Box():\n   Product product=getProduct.Invoke();\n   box.Product=product;\n   return box;\n  }\n }\n \nclass ProductFactory\n{\n public Product MakePizza()\n {\n  Product product=new Product[];\n  product.Name= \"Pizza\":\n  return product;\n }\n public Product MakeToyCar()\n {\n  Product product=new Product[];\n  product.Name = \"Toy Car\";\n  return product;\n }\n} \n}\n```\n\n\n\n### 回调Callback方法案例\n```c#\nnamespace DelegateExample\n{\n class Program\n static void Main(string[] args]\n {\n  ProductFactory productFactory = new ProductFactory[);\n  WrapFactory wrapFactory = new WrapFactory[];\n  Func<Product> func1 = new Func<Product>(productFactory.MalkePizza)\n  Func<Product> func2 = new Func<Product>(productFactory.MaakeToyCar)\n  Box box1 = wrapFactory.WrapProduct(func1);\n  Box box2 = wrapFactory.WrapProduct(func2);\n  Console. WriteLine(box1.Product.Name];\n  Console. WriteLine(box2.Product.Name];\n }\n\n class Logger\n {\n  public void Log(Product product)\n  {\n   Console.WriteLine(\"Product{0}...\")\n  }\n }\n class Product\n {\n  public string Name{get; set;}\n  public string Price{get;set;}\n }\n class Box\n {\n  public Product Product{get;set;}\n }\n class WrapFactory\n {\n \n }\n public Box WrapProduct(Func<Product>getProduct,Action<Product>logCallback)\n {\n  Box box=newBox():\n  Product product=getProduct.Invoke();\n  if(product.Price>=50)\n  {\n   logCallback(product);\n  }\n  box.Product=product;\n  return box;\n }\nclass ProductFactory\n public Product MakePizza()\n {\n  Product product=new Product[];\n  product.Name= \"Pizza\";\n  product.Price=12;\n  return product;\n }\n public Product MakeToyCar()\n {\n  Product product=new Product[];\n  product.Name = \"Toy Car\";\n  product.Price=100; \n  return product;\n }\n}\n```\n\n\n\n### 委托使用的注意点\n委托是一种方法级别的耦合，现实工作中要慎之又慎；\n委托使用不当，会使可读性下降、debug难度增加；\n把委托回调、异步调用、多线程纠缠在一起，会将代码变得难以阅读和维护；\n委托使用不当可能造成内存泄漏和程序性能下降。（被占用的内存无法被释放）\n\n### 多播委托（multicast）\n一个委托内部，封装了不止一个方法。 \n\n```C#\nclass Program\n{\n static void Main(string[] args]\n {\n  Student stu1 = new Student() {ID = 1, PenColor = ConsoleColorYellow}\n  Student stu2 = new Student() {ID = 2, PenColor = ConsoleColorGreen}\n  Student stu3 = new Student() {ID = 3, PenColor = ConsoleColor.Red } \n  Action action1 = new Action(stu1.DoHomework);\n  Action action2 = new Action(stu2.DoHomework);\n  Action action3 = new Action(stu3.DoHomework];\n  action1 += action2;\n  action1 += action3;\n  action1.Invoke();\n  }\n}\n```\n\n### 隐式异步调用\n- 同步与异步\n同步：你做完了，我在你做的基础之上接着做。\n异步：我们俩同时做。（同步进行）\n- 同步调用与异步调用\n每个程序都是一个进程（process）\n每个进程可以有多个线程（Thread）\n同步调用是在同一线程内，异步调用底层机理是多线程\n- 隐式多线程与显示多线程\n直接同步调用：直接通过方法名调用；\n间接同步调用：使用委托进行；\n隐式异步调用：使用委托的异步调用方法；\n例子：\n```C#\nclass Program\nstatic void Main[string[] args]\nStudent stu1 = new Student() {ID = 1, PenColor = ConsoleCColor. Yellow\nStudent stu2 = new Student() {ID = 2, PenColor = ConsoleCColor.Green\nStudent stu3 = new Student() {ID = 3, PenColor = ConsoleCColor.Red\nAction action1 = new Action(stu1.DoHomework];\nAction action2=new Action(stu2.DoHomework);\nAction action3 = new Action[stu3.DoHomework];\naction1.BeginInvoke(null,null)\n//生成一个分支线程。在分支线程里面调用方法。参数1：调用完之后的后续操作。\n//.NET库不支持begininvoke，改用await Task.Run(Action1);\nfor (int i = 0; i < 10; i++)\nConsole.Foreground Color = ConsoleColor.Cyan;\nConsole.WriteLine[\"Main thread {0}.\". i];\nThread.Sleep(1000);\nclass Student\n{\n //...\n}\n```\n\n显式异步调用：使用Thread或者Task；\n\n```c#\nStudent stu1 = new Student() {ID = 1, PenColor = ConsoleCColor. Yellow\n\nStudent stu2 = new Student() {ID = 2, PenColor = ConsoleCColor.Green\n\nStudent stu3 = new Student() {ID = 3, PenColor = ConsoleColor.Red\n\nThread thread1 = new Thread[new ThreadStart(stu1.DoHomework)];\n\nThread thread2 = new Thread[new ThreadStart(stu2.DoHomework)]\n\nThread thread3 = new Thread[new ThreadStart(stu3.DoHomework)]\n\nthread1.Start();\n\nthread2.Start();\n\nthread3.Start();\n\nclass Student\n\n{\n\n //...\n\n}\n```\n\n\n\n```c#\nStudent stu1 = new Student() {ID = 1, PenColor = ConsoleColor. Yellow\n\nStudent stu2 = new Student() {ID = 2, PenColor = ConsoleColorGreen}\n\nStudent stu3 = new Student() {ID = 3, PenColor = ConsoleColor.FRed\n\nTask task1 = new Task[new Action[stu1.DoHomework]];\n\nTask task2 = new Task[new Action[stu2.DoHomework]];\n\nTask task3 = new Task(new Action(stu3.DoHomework));\n\ntask1.Start();\n\ntask2.Start():\n\ntask3.Start[]:\n```\n\n- 适当的使用接口（interface）取代对委托的使用\n- 接口可以取代委托的作用。\n\n\n\n# 事件（Event）\n事件是，使对象或类具备通知能力的成员（to provide notification）。\n事件主要用于，对象或类之间的动作协调与信息传递（消息推送）。\n\n事件参数（Event Args）\n响应事件 \n\n## 事件模型的五个组成部分\n- 事件拥有者（event source ， 对象）\n- 事件成员（event ，成员）\n- 时间的响应者（event subscriber ， 对象）\n- 事件处理器（event handler ， 成员）\n- 事件订阅——把事件处理器与事件进行关联，本质是一种以委托类型为基础的“约定”。\n\n```C#\nusing System;\nusing System.Timers;\n\nnamespace EventStudy\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Timer timer = new Timer();\n            timer.Interval = 1000;\n            Boy boy = new Boy();\n            timer.Elapsed += boy.Action;\n            timer.Start();\n            Console.ReadLine();\n        }\n    }\n    class Boy\n    {\n        internal void Action(object sender, ElapsedEventArgs e)\n        {\n            Console.WriteLine(\"Jump!\");\n        }\n    }\n}\n\n```\n\n```C#\nusing System;\nusing System.Timers;\nusing System.Windows.Forms;\n\nnamespace EventStudy\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Form form =new Form();\n            Controller controller=new Controller(form);\n            form.ShowDialog();\n        }\n    }\n    class Controller\n    {\n        private Form form;\n        public Controller(Form form)\n        {\n            this.form = form;\n            this.form.Click += this.FormClick;\n        }\n\n        private void FormClick(object sender, EventArgs e)\n        {\n            this.form.Text = DateTime.Now.ToString();\n        }\n    }\n}\n```\n\n```C#\nusing System;\nusing System.Timers;\nusing System.Windows.Forms;\n\nnamespace EventStudy\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            MyForm form = new MyForm();\n            form.Click += form.FormClick;\n            form.ShowDialog();\n        }\n    }\n    class MyForm : Form\n    {\n        internal void FormClick(object sender, EventArgs e)\n        {\n            this.Text = DateTime.Now.ToString();\n        }\n    }\n}\n```\n最常用用法：\n```C#\nusing System;\nusing System.Timers;\nusing System.Windows.Forms;\n\nnamespace EventStudy\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            MyForm form = new MyForm();\n            form.ShowDialog();\n        }\n    }\n    class MyForm : Form\n    {\n        private TextBox textBox;\n        private Button button;\n        public MyForm()\n        {\n            this.textBox = new TextBox();\n            this.button = new Button();\n            this.Controls.Add(textBox);\n            this.Controls.Add(button);\n            this.button.Click += this.ButtonClicked;\n        }\n\n        private void ButtonClicked(object sender, EventArgs e)\n        {\n            this.textBox.Text = \"Hello ,World!!!!!!!!\";\n        }\n    }\n}\n```\n\n## 事件的声明\n完整声明\n```C#\nusing System;\nusing System.Timers;\nusing System.Windows.Forms;\n\nnamespace EventStudy\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Customer customer = new Customer();\n            Waiter waiter = new Waiter();\n            customer.Order += waiter.Action;\n            Console.ReadLine();\n            customer.Think();\n            customer.Paythebill();\n        }\n    }\n\n    public class OrderEventArgs : EventArgs\n    {\n        public string DishName { get; set; }\n        public string Size { get; set; }\n    }\n\n    public delegate void OrderEventHandler(Customer customer, OrderEventArgs e);\n\n    public class Customer\n    {\n        private OrderEventHandler orderEventHandler;\n\n        public event OrderEventHandler Order\n        {\n            add\n            {\n                this.orderEventHandler += value;\n            }\n            remove\n            {\n                this.orderEventHandler -= value;\n            }\n        }\n\n        public double Bill { get; set; }\n        public void Paythebill()\n        {\n            Console.WriteLine(\"I will pay ${0}\", this.Bill);\n        }\n\n        public void Think()\n        {\n            OrderEventArgs e = new OrderEventArgs();\n            e.DishName = \"baga\";\n            e.Size = \"large\";\n            this.orderEventHandler.Invoke(this, e);\n        }\n    }\n\n    public class Waiter\n    {\n        public void Action(Customer customer, OrderEventArgs e)\n        {\n            Console.WriteLine(\"I will serve you the dish : {0}\", e.DishName);\n            double price = 10;\n            switch (e.Size)\n            {\n                case \"small\":\n                    price = price * 0.5;\n                    break;\n                case \"large\":\n                    price = price * 1.5;\n                    break;\n                default:\n                    break;\n            }\n            customer.Bill = price;\n        }\n    }\n}\n\n```\n简略声明（Field-like）\n语法糖。\n```C#\n        public event OrderEventHandler Order;\n        public void Think()\n        {\n            OrderEventArgs e = new OrderEventArgs();\n            e.DishName = \"baga\";\n            e.Size = \"large\";\n            this.Order.Invoke(this, e);\n            //简略后，用事件代替为之前的字段。\n            //而在完整版的代码中，事件只能用来+=（订阅）运算。\n        }\n```\n事件，让程序更加有逻辑，对象之间的关系更清晰。 \n委托是方法与方法之间的强关联，事件是对象与对象之间。而委托可能造成，不同对象，对同一个方法进行滥用。\n事件，只能访问事件的订阅操作，而想访问事件的其他层面则不允许。而委托，可以设定传入委托的具体参数和返回值。\n事件的本质，是委托字段的包装器，对其进行封装（encapsulation），事件对外界隐藏了委托实例的大部分功能，而只能对其进行订阅。\nprotected,dynamic,partial，virtual\n\n# 类（class）\n构造函数与析构函数\n析构函数：`~Student(){...}`\n## 类的访问级别修饰符\n也就是，当其他项目（Aseembly）想要访问当前项目时，该类是否能被引用。\npublic：外部可以引用。\ninternal：仅在该项目内部有效。\n\n## 类的继承\nbase class （基类）与derived class（派生类）\n父类与子类\n一个子类的实例，也是父类的一个实例。（例如，一个类的实例，是这个类的实例，也是object类的实例）\nsealed：将该类进行封闭，不能再进行继承。\nC#中一个类只支持一个基类，但是可以支持多个基接口。\npublic与internal修饰的类，需要注意访问级别的层级问题，子类访问级别不能高于父类。\n在构造基类与派生类时，派生类会对基类的方法等进行改写和重构，如果再想通过该派生类去访问该派生类改写过的基类的方法等，是不行的（已被改写）。\n父类的实例构造器，不能被子类继承。\n\n\n## 类成员的访问\nprotected：将类成员的访问级别，限制在继承链上，protected 的类/方法，其子类可以对其进行访问。并且是跨程序集的。可以跟internal修饰符进行组合。\n\n## 重写与多态（polymorphism）\n```C#\nclass Vehicle \n{\n public virtual void Run()\n Console.WriteLine(\"I'm running!\");\n}\nclass Car: Vehicle \n{\n public override void Run() \n {\n  Console.WriteLine(\"Car is running!\");\n }\n}\n```\n如果不加virtual与override，则是子类对父类方法的隐藏。\n在C#编程中，可以通过父类来声明一个子类的实例，这样做的用意是实现多态，也就是，在父类的引用中存储任何一个子类的对象，从而可以调用不同子类的实现。**（父类的方法或者属性，引用继承链上实例化的子类所带有的最新重写版本）**\n通过父类声明子类实例可以让代码更加通用，尤其是在处理大量继承体系时。\n在使用父类声明子类的实例时，最终得到的是 子类的实例，尽管变量的类型是父类。\n\n```C#\npublic void MakeAnimalSound(Animal animal)\n{\n    animal.MakeSound();  // 不管是 Dog 还是 Cat，都会调用各自的 MakeSound 方法\n}\n\npublic static void Main()\n{\n    Animal dog = new Dog();\n    Animal cat = new Cat();\n\n    MakeAnimalSound(dog);  // 输出: Bark\n    MakeAnimalSound(cat);  // 输出: Meow\n}\n```\n\n```C#\npublic class Animal\n{\n    public string Name { get; set; }\n\n    public virtual void Speak()\n    {\n        Console.WriteLine(\"Animal speaks\");\n    }\n}\n\npublic class Dog : Animal\n{\n    public void WagTail()\n    {\n        Console.WriteLine(\"Dog is wagging its tail\");\n    }\n\n    public override void Speak()\n    {\n        Console.WriteLine(\"Dog barks\");\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        Animal animal = new Dog(); // 父类类型的变量指向子类实例\n        animal.Name = \"Buddy\";\n        \n        animal.Speak();  // 输出: Dog barks\n\n        // animal.WagTail();  // 错误，Animal 类中没有 WagTail 方法\n    }\n}\n```\n\n属性也可以被重写。\n# 接口、抽象类、SOLID、单元测试和反射\n\n## 接口与抽象类\n算法\\设计原则\n具体类 → 抽象类 → 接口：越来越抽象，内部实现的东西越来越少。\n抽象类是未完全实现逻辑的类,（有被实现的部分也就是非abstract部分，也有部分abstract的）\n### 抽象类与开放关闭（开闭）原则\n**抽象类**不允许被实例化，但是可以作为基类。可以通过子类实例引用具体的方法。\n**开闭原则**：没有特别情况（修BUG和增添新功能），尽可能不去修改已经写好的代码。也就是：我们应该封装那些不变的、稳定的、固定的和确定的成员，把那些不确定的、有可能改变的成员声明为抽象成员，并且留给子类去实现。\n\n### 接口（Interface）与单元测试\n- 接口是完全未实现逻辑的“类”，成员全部为public.\n- 接口为解耦而生，方便单元测试，高内聚，低耦合。\n- 接口是一个协约（contract）（有分工必有协作，有协作必有协约）\n- 接口不能被实例化，只能用来声明变量、引用具体类（concrete class）的实例。\n举例：\n```C#\n//接口-最抽象的类（所有方法等都是abstract）\ninterface IVehicle \n{\n void Stop();\n void Fill();\n void Run()\n}\n//基类\nabstract class Vehicle : IVehicle \n{\n public void Stop()\n {\n  Console.WriteLine('Stopped!');\n }\n public void Fill() \n {\n  Console.WriteLine(\"Pay and fill...\");\n }\n abstract public void Run();\n}\n//实现类-两个\nclass Car : IVehicle \n{\n public override void Run() \n {\n  Console.WriteLine(\"Car is running...\");\n }\n}\nclass Truck : IVehicle \n{\n public override void Run() \n {\n  Console.WriteLine(\"Truck is running\");\n }\n}\n```\n接口在工作中的一般使用方法\n\n\n\n方法\\类之间的依赖或耦合\n```C#\nclass Program\n{\n static void Main(string[args] \n {\n  var engine = new Engine();\n  var car = new Car(engine);\n  car.Run(3);\n  Console.WriteLine(car.Speed);\n }\n}\n//Engine与Car类有紧耦合，Car类对Engine类有强依赖\nclass Engine \n{\n public int RPM {get; private set;}\n public void Work[int gas] {\n this.RPM = 1000 * gas;\n //this.RPM = 0;\n}\nclass Car \n{\n private Engine engine;\n public Car(Engine engine) {\n  _engine = engine;\n }\n public int Speed {get; private set;}\n public void Run[int gas] {\n  _engine.Work(gas);\n }\n this.Speed = engine.RPM / 100;\n}\n```\n接口可以降低耦合度（保证给你提供的功能准确无误，可靠的）：\n```C#\nclass Program {\n static void Main(stringħ args) {\n  var user = new PhoneUser(new EricssonPhone)//只需要更改这一个地方，其他地方均不需要改动，因此耦合度低。\n  user.UsePhone();\n }\n}\nclass PhoneUser{\n private string _phone\n public PhoneUser(IPhone phone){\n  _phone = phone;\n }\n public void UsePhone(){\n  ...\n }\n}\ninterface IPhone{...}\nclass NokiaPhone : IPhone{...}\nclass EricssonPhone : IPhone{...}\n```\n\n#### 依赖反转/倒置原则（Dependecy Inversion）：\n之前是一个类依赖于另一个类，可以通过设计，改造为，一个类依赖于一个接口，而接口被依赖于其他类。\n例如，司机依赖于交通工具接口，而不同种类的运输工具也依赖于交通工具接口。\n#### 接口隔离原则（Interface Seperation）\n接口和类的大小也不能太小，要把握好度。\n接口提供的功能多于功能调用者\n调用者不能多要功能，也就是调用最小的接口即可。\n```C#\nclass Program \n{\n static void Main〔string[] args) {\n var driver = new Driver(new Car()//new Tank())};\n driver.Drive();\n }\n}\nclass Driver \n{\n private IVehicle _vehicle;\n public Driver(IVehicle vehicle) \n {\n  _vehicle=vehicle;\n }\n public void Drive() \n {\n  _vehicle.Run();\n }\n}\n interface IVehicle\n {\n  void Run();\n }\n  interface IWeapon\n {\n  void Fire();\n }\n class Car : IVhicle{...}\n class Truck : IVhicle{...}\n\n interface ITank:IVehicle, IWeapon\n {\n  //\n }\n class LightTank : ITank{...}\n class Medium Tank : ITank{...}\n class HeavyTank : ITank{...}\n```\n\n#### 单元测试：\n在同一个solution下添加新的test project,命名为:**默认名称空间.test**;\n...\n\n## 反射、特性和依赖注入（Dependency Injection）\n\n### 反射（Reflection）\n是一种设计模式，通过依赖注入实现\n### 依赖注入\n将`Itank tank = new HeavyTank();`操作进行区分。\n因为，当给程序进行升级的时候，很多时候接口后面所引用的实例具体类型需要大量更改，但是有的又不需要，因此，我们通过依赖注入，只需要将注册时候的引用实例类型更改一次即可，并且也可以和仍然需要`Itank tank = new HeavyTank();`的代码进行区分。\n\n```C#\n interface ITank:IVehicle, IWeapon\n {\n  //\n }\n interface IVehicle\n {\n  void Run();\n }\n interface IWeapon\n {\n  void Fire();\n }\nclass LightTank : ITank{...}\nclass Medium Tank : ITank{...}\nclass HeavyTank : ITank{...}\n \nclass Program \n{\n static void Main〔string[] args] \n {\n  //注册。\n  var sc = new ServiceCollection();\n  sc.AddScoped(typeof(ITank), typeof(Medium Tank)};\n  //使用依赖注入后，只需要在这里更改ITank类引用的具体实例\n  var sp = sc.BuildService Provider();\n  //以下，是进行前台运行操作。\n  ITank tank=sp.GetService<lTank>();\n  tank.Fire();\n  tank.Run();\n }\n}\n\n//-----------------------------------------\nclass Program \n{\n static void Main〔string[] args] \n {\n  //注册。\n  var sc = new ServiceCollection();\n  sc.AddScoped(typeof(IVehicle), typeof(Medium Tank)};\n  sc.AddScoped<Driver>();\n  var sp = sc.BuildService Provider();\n  //以下，是进行前台运行操作。\n  var driver=sp.GetService<Driver>();\n  //当我们创建driver实例的时候，不再需要在构造函数里面去引用具体的类实例。\n  //因为Driver类的构造函数中有传入参数的声明（IVehicle），因此DI会在注册列表中去找你的IVihecle，以及与之对应的类。\n  driver.Drive();\n }\n} \n```\n\n### 通过反射实现更松的耦合\n```C#\n\nusing System;\nusing System.Runtime.Loader;\n\nnamespace ReflectionStudy\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine();\n            //在程序路径下创建Animals文件夹\n            var folder = Path.Combine(Environment.CurrentDirectory, \"Animals\");\n            //获取Animals文件夹里面的文件\n            var files = Directory.GetFiles(folder);\n            //创建动物的集合\n            var animalTypes = new List<Type>();\n            foreach (var file in files)\n            {\n                //将文件夹内的文件整合成一个assembly类型的实例\n                var assembly = AssemblyLoadContext.Default.LoadFromAssemblyPath(file);\n                //获得assembly里面，每个元素的所有信息（属性和方法等）\n                var types = assembly.GetTypes();\n                //将每个符合要求的type类型加到我们需要的type集合当中去。\n                foreach (var t in types)\n                {\n                    if (t.GetMethod(\"Voice\") != null)\n                    {\n                        animalTypes.Add(t);\n                    }\n                }\n            }\n\n            while (true)\n            {\n                //将animalsType中的动物逐一打印出名字\n                for (int i = 0; i < animalTypes.Count; i++)\n                {\n                    Console.WriteLine($\"{i + 1}。{animalTypes[i].Name}\");\n                }\n                Console.WriteLine(\"=========================\");\n                //选择动物，然后判断是否超出范围，没有则为其选择对应的动物\n                Console.WriteLine(\"Please choose animal:\");\n                int index = int.Parse(Console.ReadLine());\n                if (index > animalTypes.Count || index < 1)\n                {\n                    Console.WriteLine(\"No such an animal. Try again!\");\n                    continue;                    \n                };\n                int Clicktimes = int.Parse(Console.ReadLine());\n                //获取对应动物类型的typeinfo信息，然后创建反射。\n                var t = animalTypes[index - 1];\n                //获取t中，我们需要的方法。\n                var m = t.GetMethod(\"Voice\");\n                //创建object实例o，并通过它来调用t实例的方法或者属性\n                var o = Activator.CreateInstance(t);\n                //将o传给新创建的object，然后触发m所反射的方法\n                m.Invoke(o, new object[] { Clicktimes });\n            }\n        }\n    }\n}\n```\n**Assembly** 类可以加载以下类型的文件：\n.exe 文件（可执行文件）\n.dll 文件（动态链接库）\n.winmd 文件（Windows Metadata 文件）\n特定平台的程序集（如 .a、.so、.dylib）\n加载这些文件时，Assembly 类会解析文件中的元数据，并允许你通过反射访问其中的类型、方法等信息。\n\n- **.dll文件制作**\n需要另起一个工程，选择class lib。\n- ** SDK制作**\n在总解决方案中，添加Interface工程\n- **制作SDK插件**\n在项目中添加依赖（dependence）中，选择browse，引用即可。\n\n```C#\nnamespace Animals.Lib2 {\n [Unfinished]\n public class Cow : IAnimal \n {\n  public void Voice(int times) \n  {\n   for (inti=0; i < times; i++)\n   {\n    Console.WriteLine(\"Moo!\");\n   }\n  }\n }\n}\n```\n- **Attribute**\n在制作插件的过程中，未完成的部分，用[Unfinished]标注，最后在主程序这边会过滤掉。\n前提是，在SDK接口开发中，声明一个Unfinished的特性，声明如下：\n```C#\nnamespace BabyStroller.SDK {\n public class UnfinishedAttribute : Attribute {\n }\n}\n```\n\nif continue\n\n当我们采用接口和SDK了之后，代码会发生改动\n比如过滤无效类型：\n```C#\nforeach (var t in types) \n{\n if (t.GetInterfaces().Contains(typeof(IAnimal))) \n {\n  var isUnfinished = t.GetCustomAttributes(false).Any(a   => a.GetType() == typeof(UnfinishedAttribute)};\n  if (isUnfinished) continue;\n  animalTypes.Add(t);\n }\n}\n```\n\n以及最调用时：\n```C#\nint times = int.Parse(Console.ReadLine()};\nvar t = animalTypes[index - 1];\nvar m = t.GetMethod(\"Voice\");\nvar o = Activator.Createlnstance(t);\nvar a = o as IAnimal;\na.Voice(times);\n```\n\n>接口`IAnimal` 定义了 `Voice `方法签名，例如：\n```C#\npublic interface IAnimal\n{\n    void Voice(int times);\n}\n```\n类实现接口：\n假设有一个类`Dog`实现了 IAnimal 接口，并提供了 Voice 方法的实现：\n```C#\npublic class Dog : IAnimal\n{\n    public void Voice(int times)\n    {\n        Console.WriteLine($\"The dog barks {times} times.\");\n    }\n}\n```\n这个类实现了 IAnimal 接口，提供了 Voice 方法的具体实现。\n`var o = Activator.CreateInstance(t);`\no 是 Dog 类型的实例（如果 t 是 Dog）。此时，o 既是 Dog 类型的对象，也是 IAnimal 类型的对象，因为 Dog 实现了 IAnimal 接口。\n接口转换和方法调用：你将 o 强制转换为 IAnimal 类型：\n`var a = o as IAnimal;`\n如果 o 实现了 IAnimal 接口，转换会成功，a 就变成了一个 IAnimal 类型的引用，指向 o。然后你可以调用 a.Voice(times)，实际上是在调用 Dog 类中实现的 Voice 方法。\n\n# 泛型、partial类、枚举、结构体\n## 泛型（generic）\n为什么需要泛型：避免成员膨胀或者类型膨胀\n正交性：泛型类型（类/接口/委托/...）、泛型成员（属性/方法/字段/...） \n### 泛型类型\n```C#\ninternal class Program{\n public static void Main(string[] args) args) {\n  Apple apple=new AppleO{Color= \"Red\"};\n  Book book = new BookO {Name = \"New Book\"};\n  Box<Apple> box1 = new Box<Apple>(){Cargo = apple};\n  Box<Book> box2=new Box<Book>Q{Cargo = book};\n }\n}\n\nclass Apple {\npublic string Color {get; set;}\n}\n\nclass Book {\n public string Name { get; set;}\n}\nclass Box<TCargo>{\n public TCargo Cargo {get; set;}\n}\n```\n\n\n### 泛型接口\n```c#\ninternal class Program{\n public static void Main(string[] args) args) {\n  Student<int> stu = new Student<int>();\n  stu.ID = 101;\n  stu.Name= \"Timothy\";\n }\n\ninterface IUnique<Tld> {\n TId ID{get;set;}\n}\n\nclass Student<TId>:lUnique<TId> {\n public TId ID { get; set;}\n public string Name {get; set;}\n}\n```\n### 泛型集合\n带有一个类型参数的泛型类型\n```C#\ninternal class Program {\n public static void Main(string[] args) {\n IList<int> list = new List<int>();\n for (int i = 0;i<100; i++) {\n  list.Add(i);\n }\n foreach (var item in list) {\n  Console.WriteLine(item);\n }\n}\n```\n带有两个类型参数的泛型类型\n```c#\nDictionary<int, string> dict = new Dictionary<int, string>\n```\n\n### 泛型方法\n```C#\ninternal class Program{\n public static void Main(string[] args) args) {\n  int[] a1 = {1,2,3, 4, 5};\n  int[] a2 = {1, 2, 3, 4, 5,6};\n  double[] a3 = {1.1, 2.2, 3.3, 4.4, 5.5};\n  double[] a4 = {1.1, 2.2, 3.3, 4.4, 5.5, 6.6};\n  var result=Zip(a1,a2);\n  //var result=Zip(a3,a4);\n  Console.WriteLine(string.Join(\",\", result)};\n }\n}\n\n//方法：把两个数组组合成一个数组。\nstatic T[] Zip<T>(T[] a, T[] b){\n T[] zipped = new T[a.Length + b.Length];\n int ai = 0, bi = 0, zi = 0;\n do {\n  if (ai < a.Length) zipped[zi++]= a[ai++];\n  if (bi < b.Length) zipped[zi++] = b[bi++];\n } \n while (ai < a.Length || bi < b.Length);\n return zipped;\n}\n```\n\n### 泛型委托\nAction泛型委托\n```C#\ninternal class Program\n{\n public static void Main(string[] args) args) \n {\n  //Action泛型委托声明的方式和Action普通委托声明方式有差异。\n  Action<string> a1 = Say;\n  //Action a1 = new Action(Say)\n  a1();\n }\n static void Say(string str)\n {\n  Console.WriteLine(...);\n }\n static void Mul(int x)\n {\n  ...;\n }\n}\n\n```\nFunc泛型委托\n```c#\ninternal class Program\n{\n public static void Main(string[] args) args) \n {\n  Func<double,double,double> func1 = Add;\n  var result = func1(100, 200);\n  Console.WriteLine(result); \n }\n static int Add(int a,int b)\n {\n  ...;\n }\n static double Add(double a,double b)\n {\n  ...;\n }\n```\n泛型委托与lambda表达式：`Func<double,double,double> func1 = {a, b}=>{return a+b;};`\n可以简化语句，节省声明方法所可能污染代码的可能。\n\n## partial类\n减少类的派生，当原类会自动更新覆盖等时，把自己添加的方法等放到其他名称空间下，则不会被删除或者重写。\n\npartial类必须要保证和原类型在同一个名称空间之下。\n\n## 枚举\n枚举的每个值都有大小，大小也可以自定义设置。\n`Console.WriteLine((int)Level.Employee);`\n```C#\nenum Level\n{\n Employee = 100,\n Boss = 200,\n}\n/////////////////////////////\nenum Level\n{\n Employee = 100,\n Boss,\n}\n//不给BOSS,额外设定值的话，那么bOSS是101.\n```\n枚举的比特位编程\n```C#\ninternal class Program\n{\n public static void Main(string[] args) args) \n {\n  //假设这个人四个技能都会。\n  person.Skill = Skill.Drive | Skill.Cook| Skill.Program| SkiTeach;\n  Console.WriteLine();\n  //按或运算符计算。\n }\nenum Skill \n{\n Drive = 1,\n Cook=2,\n Program=4,\n Teach=8\n}\nclass Person\n{\n public Skill skill;\n}\n```\n## 结构体（struct）\n结构体是值类型，存放值类型数据。\n装箱与拆箱操作：\n```C#\ninternal class Program \n{\n public static void Main(string[] args) args) \n {\n  Student student = new Student(KID = 101, Name = \"Timtohy223;\n  object object = student;//装箱\n  Student student2 = (Student) obj;//拆箱\n  Console.WriteLine($\"#{student2.ID} Name:(student2Name}\")\n }\n}\n\nstruct Student \n{\n public int ID { get; set;}\n public string Name { get; set;}\n}\n```\n结构体对象，进行复制时，是完全复制了其所有数据，而不是只复制了其引用的地址。\n结构体类型，只能由接口派生。\n结构体不能拥有显示的无参构造器：`public Studnt(){}`.（备注，有参的可以。）\n\n\n\n\n# LINQ、lambda表达式与委托\n## lambda\n- 匿名方法\n- Inline方法\n\n**泛型委托的类型推断**\n```C#\n//两种表达方式：\n//Func<int, int, int> func = new Func<int,int,int>((a, b) => { return a + b;});\nFunc<int, int, int> func = (a, b) => { return a + b;};\nint res = func(100, 200);\nConsole.WriteLine(res);\nfunc=(x,y)=>{returnx\nres = func(3,4);\ny;};\nConsole.WriteLine(res);\n```\n另外一种使用方式：\n```C#\nclass Program \n{\n static void Main(string[] args) \n {\n  DoSomeCalc<int>((int a, int b) => (return a b; }, 100,200);\n  //高级写法：\n  //DoSomeCalc((a,b) => (return a b; }, 100,200);\n  static void DoSomeCalc<T>(Func<T, T, T  T> func,T x, Ty)\n {\n  T res=func(x,y);\n  Console.WriteLine(res);\n }\n}\n```\n## LINQ(.NET Language Integrated Query)\n将C#语句转换为sql语句，进行查询，但是sql的查询会更准确，LINQ只是临时简单使用。\n........\n","slug":"C#学习","published":1,"date":"2025-04-21T06:51:05.863Z","updated":"2025-01-21T06:56:56.020Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm9w9inhf0002ncpy6whs2y3b","content":"<div class=\".article-gallery\"><hr>\n<h2 id=\"title-C-学习笔记\"><a href=\"#title-C-学习笔记\" class=\"headerlink\" title=\"title&#x3D; C#学习笔记\"></a>title&#x3D; C#学习笔记</h2><h1 id=\"Type（类型）\"><a href=\"#Type（类型）\" class=\"headerlink\" title=\"Type（类型）\"></a>Type（类型）</h1><h2 id=\"类型的简介\"><a href=\"#类型的简介\" class=\"headerlink\" title=\"类型的简介\"></a>类型的简介</h2><p>小内存容纳大尺寸数据会丢失数据和精度…<br>大内存…小尺寸数据浪费内存<br>整数类型：int 4字节；long 8字节。<br>强类型语言：数据类型不能轻易转变；弱类型语言…<br>程序静止时，放在硬盘（外村）内，运行时，装载到内存。<br>类型中的信息：<br>    内存空间大小，<br>    储存值的大小范围，<br>    基类（父类），<br>    成员（事件，属性，方法）<br>    类型的变量分配在内存的位置<br>        Stack(栈，比较小)&#x2F;Heap(堆，更大)<br>        Stack overflow栈溢出，堆不会溢出。<br>        堆上的内存如果忘记回收，会造成内存泄漏。<br>        cmd中调用performance monitor可以监测进程的内存。<br>        实例，分配到堆（heap）中去。</p>\n<h2 id=\"类型系统\"><a href=\"#类型系统\" class=\"headerlink\" title=\"类型系统\"></a>类型系统</h2><h3 id=\"五大数据类型\"><a href=\"#五大数据类型\" class=\"headerlink\" title=\"五大数据类型\"></a>五大数据类型</h3><p>类（class）：Window,Form,Console<br>结构体（structure）:Int,double<br>枚举（enumeration）<br>接口（interface）<br>委托（delegate） </p>\n<h2 id=\"变量、对象与内存\"><a href=\"#变量、对象与内存\" class=\"headerlink\" title=\"变量、对象与内存\"></a>变量、对象与内存</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量（名）表示了变量的值存储位置（从这个位置往后数多少节，用以保存这个变量，以其数据类型的要求），并且每个变量都有一个类型，决定什么样的值，能存入变量。<br>例如，int x &#x3D;100;<br>类型：静态变量，实例变量（字段，成员变量），数组元素，值参数，引用参数(ref)，输出形参(out) ，局部变量。<br>狭义的变量，指局部变量（其他种类变量都有自己的约定名称，例如，静态变量称为静态字段）<br>局部变量：方法体，函数体内声明的变量。</p>\n<h3 id=\"值类型的变量\"><a href=\"#值类型的变量\" class=\"headerlink\" title=\"值类型的变量\"></a>值类型的变量</h3><p>byte&#x2F;short&#x2F;ushort等<br>值类型的储存：在内存中分配空间存储值。<br>值类型没有实例，实例与变量合而为一了。</p>\n<h3 id=\"引用类型的变量\"><a href=\"#引用类型的变量\" class=\"headerlink\" title=\"引用类型的变量\"></a>引用类型的变量</h3><p>引用类型的储存：储存的是对象的地址。<br>例如：<br>Student stu;(分配四个字节的内存，用来指向实例化对象的地址)<br>stu &#x3D;new Student();（开辟一段内存空间，用于储存Student类中的成员）</p>\n<p>Class Student()<br>{<br>  unit ID;<br>  string name;<br>}</p>\n<h3 id=\"装箱-拆箱\"><a href=\"#装箱-拆箱\" class=\"headerlink\" title=\"装箱&#x2F;拆箱\"></a>装箱&#x2F;拆箱</h3><p>装箱（Boxing）<br>int x&#x3D;100;<br>Object obj &#x3D;x;<br>将栈上的数据搬到堆上，然后将堆上存储这段数据的地址储存到栈上的obj上。<br>拆箱（Unboxing）<br>相反的操作。<br>int y &#x3D;(int)obj;</p>\n<h1 id=\"Method-方法\"><a href=\"#Method-方法\" class=\"headerlink\" title=\"Method(方法)\"></a>Method(方法)</h1><h2 id=\"由来\"><a href=\"#由来\" class=\"headerlink\" title=\"由来\"></a>由来</h2><p>由C++和C语言中的function（函数）演变而来。<br>当函数成为类的成员之后，便变为了方法（或成员函数）。方法永远是类（class）的成员。 </p>\n<h2 id=\"声明与调用\"><a href=\"#声明与调用\" class=\"headerlink\" title=\"声明与调用\"></a>声明与调用</h2><p>C#声明与定义不分家。<br>声明结构：<br>函数头   函数体<br>函数头：特性  修饰符  （partial）  返回值   函数名  （）<br>    修饰符：有的可以组合<br>静态方法，隶属于类，而非声明的对象。不用实例化即可以调用。<br>例如：<br>Calculator c &#x3D; new Calculator();<br>c.method1();<br>Calculator.method_2();</p>\n<p>Class Calculator<br>{<br> public int method()<br> {<br> return 0;<br> }<br> public static method_2()<br> {<br> return;<br> }<br>}</p>\n<p>parameter：形参<br>argument：实参 </p>\n<h2 id=\"构造函数（构造器-constructor）\"><a href=\"#构造函数（构造器-constructor）\" class=\"headerlink\" title=\"构造函数（构造器&#x2F;constructor）\"></a>构造函数（构造器&#x2F;constructor）</h2><h2 id=\"方法的重载（Overload）\"><a href=\"#方法的重载（Overload）\" class=\"headerlink\" title=\"方法的重载（Overload）\"></a>方法的重载（Overload）</h2><h2 id=\"方法的debug\"><a href=\"#方法的debug\" class=\"headerlink\" title=\"方法的debug\"></a>方法的debug</h2><p>设置断点（breakpoint）<br>观察方法调用时的call stack<br>Step in&#x2F;over&#x2F;out：<br>step in步进。<br>step over直接略过跳过断点的细节操作，执行下一语句。<br>step out跳到断点的上一层级。</p>\n<h2 id=\"方法的调用与栈\"><a href=\"#方法的调用与栈\" class=\"headerlink\" title=\"方法的调用与栈\"></a>方法的调用与栈</h2><p>stack frame:方法被调用的时候，在栈当中的布局。</p>\n<h1 id=\"操作符（Operator）\"><a href=\"#操作符（Operator）\" class=\"headerlink\" title=\"操作符（Operator）\"></a>操作符（Operator）</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>操作符有先后顺序，层级高的先运算，相同层级的从左往右依次运算。<br>赋值和lambda表达式，是从右向左运算（赋值），例如x &#x3D; y;<br>操作符本质是函数的简记，例如3x5可以写为：Mul(3,5);<br>default操作符：获取当前类型的默认值。<br>new操作符：创造实例。 以及创造匿名类型的实例，然后用隐式类型变量引用这个实例。<br>new修饰符：在重写父类方法的时候，可以隐藏父类方法。<br>check操作符：检测程序是否溢出，若溢出则抛出异常。<br>unchecked 操作符：用于禁止溢出检查。它告诉编译器在执行某些可能导致溢出的数学运算时，不要抛出 OverflowException 异常，而是允许溢出发生，并对溢出的结果进行截断或回绕。<br>try-catch:当程序执行到 try 块中的代码时，如果发生了异常（错误），程序会立即跳转到 catch 块，而不会继续执行后续的代码。<br>sizeof操作符：获取结构体数据类型实例，在内存当中的字节数。<br>~操作符：在二进制上进行按位取反。对最小值用负号（-）来取反，得不到最大值，二进制编码取反原理造成的原因。</p>\n<h1 id=\"字段、属性、常量、索引器\"><a href=\"#字段、属性、常量、索引器\" class=\"headerlink\" title=\"字段、属性、常量、索引器\"></a>字段、属性、常量、索引器</h1><h2 id=\"字段（field）\"><a href=\"#字段（field）\" class=\"headerlink\" title=\"字段（field）\"></a>字段（field）</h2><p>表示与对象（类型）关联的变量，是类型的成员，旧称成员变量 。<br>实例字段：与对象相关联。在对象创建时才被初始化。<br>静态字段：与类型相关联，用static修饰。在类型被加载时才被初始化。</p>\n<h2 id=\"属性（property）\"><a href=\"#属性（property）\" class=\"headerlink\" title=\"属性（property）\"></a>属性（property）</h2><p>是用于访问对象或者类型的特征的成员，特征反映了状态。<br>属性是由字段发展而来，是字段的一种拓展。<br>字段：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//旧的写法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Age;</span><br><span class=\"line\"><span class=\"comment\">//get/set的写法</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> age;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">GetAge</span>()<span class=\"comment\">//获取字段的值</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">SetAge</span>(<span class=\"params\"><span class=\"built_in\">int</span> <span class=\"keyword\">value</span></span>)<span class=\"comment\">//设置字段的值</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(<span class=\"keyword\">value</span>&gt;=<span class=\"number\">0</span>&amp;&amp;<span class=\"keyword\">value</span>&lt;=<span class=\"number\">120</span>)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age=<span class=\"keyword\">value</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>属性现在的声明方法：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> age;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> Age</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">get</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">set</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">value</span>&gt;=<span class=\"number\">0</span>&amp;&amp;<span class=\"keyword\">value</span>&lt;=<span class=\"number\">120</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age=<span class=\"keyword\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>value在get&#x2F;set的语法中，是专属的关键字（上下文关键字），表示传进来的数值。<br>属性，也是一种语法糖，是编译器简化了编译过程。<br>prop&#x2F;propfull：属性声明的简写</p>\n<h2 id=\"索引器\"><a href=\"#索引器\" class=\"headerlink\" title=\"索引器\"></a>索引器</h2><p>…</p>\n<h2 id=\"常量（constant）\"><a href=\"#常量（constant）\" class=\"headerlink\" title=\"常量（constant）\"></a>常量（constant）</h2><p>关键字：const;<br>隶属于，类型而非对象。<br>局部常量，成员常量</p>\n<h2 id=\"各种“只读”\"><a href=\"#各种“只读”\" class=\"headerlink\" title=\"各种“只读”\"></a>各种“只读”</h2><p>常量，只读字段，只读属性，静态只读字段。</p>\n<h1 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h1><h2 id=\"值参数\"><a href=\"#值参数\" class=\"headerlink\" title=\"值参数\"></a>值参数</h2><p>不带任何修饰符的参数。</p>\n<h2 id=\"引用参数\"><a href=\"#引用参数\" class=\"headerlink\" title=\"引用参数\"></a>引用参数</h2><p>用ref修饰符声明的形参。不创建新的储存位置，引用参数所表示的储存位置是调用中作为实参给出变量所表示的储存位置。<br>变量在座位引用参数之前，必须明确赋值。<br>引用修饰符作用，强调该方法会改变传入的变量的值。<br>（难理解，比较绕）</p>\n<h2 id=\"输出形参\"><a href=\"#输出形参\" class=\"headerlink\" title=\"输出形参\"></a>输出形参</h2><p>用out修饰符声明的形参，输出形参不创建新的储存位置，表示的储存位置恰是该方法调用中作为实参给出的那个变量所表示的储存位置。<br>会产生除return之外的额外返回值。<br>PS：params关键字<br>int res &#x3D; Cal(1,2,3);<br>static int Cal(params int[] intArray)<br>{<br> …<br>}<br>params会自动声明，只需要输入数值即可。</p>\n<h2 id=\"具名调用\"><a href=\"#具名调用\" class=\"headerlink\" title=\"具名调用\"></a>具名调用</h2><p>Printinfo(age:34,name:”Tim”);<br>Static void Printinfo(string name,int age)<br>{<br> …<br>}</p>\n<h2 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h2><p>Printinfo();<br>Static void Printinfo(string name&#x3D;”Tim”,int age&#x3D;34)</p>\n<h2 id=\"扩展方法（This\"><a href=\"#扩展方法（This\" class=\"headerlink\" title=\"扩展方法（This)\"></a>扩展方法（This)</h2><p>扩展方法必须是public static<br>方法中的第一个参数必须被this修饰<br>必须由静态类（static）进行收纳</p>\n<p>x作为Round方法的第一个参数（double intput），因此仅需要输入第二个参数即可。<br>在double intput前加上this之后，所有double类型的值均可以使用这个方法。<br><code>double x =3.14159; double y =x.Round(4); static class DoubleExtension &#123;  public static double Round(this double input,int digits) &#123;  ... &#125; &#125;</code></p>\n<p>LINQ方法：</p>\n<h2 id=\"委托（delegate）\"><a href=\"#委托（delegate）\" class=\"headerlink\" title=\"委托（delegate）\"></a>委托（delegate）</h2><p>是（C&#x2F;C++）函数指针的“升级版”、<br>变量（数据）是以某个地址为起点的一段内存中所存储的值；<br>变量，是寻找数据的地址。<br>函数（算法）是以某个地址为起点的一段内存中所存储的一组机器语言指令；<br>函数，是寻找算法的地址。<br>直接调用与间接调用：<br>直接调用：通过函数名来调用函数，CPU通过函数名获取函数所在地址。<br>间接调用：通过函数指针调用函数，CPU通过读取函数指针存储的值，获取函数所在地址。</p>\n<h3 id=\"Action委托实例\"><a href=\"#Action委托实例\" class=\"headerlink\" title=\"Action委托实例\"></a>Action委托实例</h3><p>Action委托：无返回值的委托类型。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span>]</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"> Calculator calculator = <span class=\"keyword\">new</span> Calculator(</span>)</span>;</span><br><span class=\"line\"> Action action = <span class=\"keyword\">new</span> Action(calculator.Report);</span><br><span class=\"line\"> <span class=\"comment\">//calculator.Report不需要加()，因为只是需要方法名的地址，而不是需要调用它。</span></span><br><span class=\"line\"> calculator.Report();</span><br><span class=\"line\"> action.Invoke();</span><br><span class=\"line\"> action();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Report</span>()</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Console. WriteLine(<span class=\"string\">&quot;I have 3 methods.&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Func委托实例\"><a href=\"#Func委托实例\" class=\"headerlink\" title=\"Func委托实例\"></a>Func委托实例</h3><p>有返回值的委托</p>\n<h3 id=\"委托的声明\"><a href=\"#委托的声明\" class=\"headerlink\" title=\"委托的声明\"></a>委托的声明</h3><p>委托是一种类（Class），但是声明方式和一般的类不同。<br>注意声明委托的位置：命名空间下，类&#x2F;主函数之外，避免写错地方形成嵌套类型</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DelegateExample</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"built_in\">double</span> <span class=\"title\">Calc</span>(<span class=\"params\"><span class=\"built_in\">double</span> x, <span class=\"built_in\">double</span> y</span>)</span>;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   Calculator calculator = <span class=\"keyword\">new</span> Calculator();</span><br><span class=\"line\">   Calc calc1 = <span class=\"keyword\">new</span> Calc(calculator.Add); </span><br><span class=\"line\">   Calc calc2 = <span class=\"keyword\">new</span> Calc(calculator.Sub);</span><br><span class=\"line\">   Calc calc3 = <span class=\"keyword\">new</span> Calc(calculator. Mul);</span><br><span class=\"line\">   Calc calc4 = <span class=\"keyword\">new</span> Calc(calculator.Div);</span><br><span class=\"line\">   <span class=\"built_in\">double</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">   <span class=\"built_in\">double</span> b = <span class=\"number\">200</span>;</span><br><span class=\"line\">   <span class=\"built_in\">double</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">   c = calc1.Invokola, b);</span><br><span class=\"line\">   Console. WriteLine[c];</span><br><span class=\"line\">   c = calc2.Invoke(a, b);</span><br><span class=\"line\">   Console. WriteLine(c);</span><br><span class=\"line\">   c = calc3.Invoke(a, b);</span><br><span class=\"line\">   Console. WriteLine(c);</span><br><span class=\"line\">   c = calc4.Invoke(a, b);</span><br><span class=\"line\">   Console. WriteLine(c);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Calculator</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"委托的使用\"><a href=\"#委托的使用\" class=\"headerlink\" title=\"委托的使用\"></a>委托的使用</h3><p>1.把方法当作参数传给另外一个方法。<br>模板方法，“借用”指定的外部方法，来产生结果<br>相当于“填空题”，委托也有返回值，除了委托部分不确定，其他部分都是确定的。<br>2.回调（callback）方法，调用指定的外部方法<br>相当于“流水线”，委托不需要有返回值。你可以从许多方法中选择自己需要的委托方法。</p>\n<h3 id=\"委托使用的案例\"><a href=\"#委托使用的案例\" class=\"headerlink\" title=\"委托使用的案例\"></a>委托使用的案例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DelegateExample</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\"> <span class=\"title\">static</span> <span class=\"title\">void</span> <span class=\"title\">Main</span>(<span class=\"title\">string</span>[] <span class=\"title\">args</span>]</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   ProductFactory productFactory = <span class=\"keyword\">new</span> ProductFactory[);</span><br><span class=\"line\">   WrapFactory wrapFactory = <span class=\"keyword\">new</span> WrapFactory[];</span><br><span class=\"line\">   Func&lt;Product&gt; func1 = <span class=\"keyword\">new</span> Func&lt;Product&gt;(productFactory.MakePizza);</span><br><span class=\"line\">   Func&lt;Product&gt; func2 = <span class=\"keyword\">new</span> Func&lt;Product&gt;(productFactory.MakeToyCar);</span><br><span class=\"line\">   Logger logger =<span class=\"keyword\">new</span> Logger();</span><br><span class=\"line\">   Action&lt;Product&gt; log = <span class=\"keyword\">new</span> Action&lt;Product&gt;(logger.Log);</span><br><span class=\"line\">   Box box1 = wrapFactory.WrapProduct(func1,log);</span><br><span class=\"line\">   Box box2 = wrapFactory.WrapProduct(func2,log);</span><br><span class=\"line\">   Console. WriteLine(box1.Product.Name];</span><br><span class=\"line\">   Console. WriteLine(box2.Product.Name];</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Product</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name&#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Box</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Product Product&#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">WrapFactory</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Box <span class=\"title\">WrapProduct</span>(<span class=\"params\">Func&lt;Product&gt; getProduct</span>)</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   Box box=<span class=\"keyword\">new</span> Box():</span><br><span class=\"line\">   Product product=getProduct.Invoke();</span><br><span class=\"line\">   box.Product=product;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> box;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ProductFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">MakePizza</span>()</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Product product=<span class=\"keyword\">new</span> Product[];</span><br><span class=\"line\">  product.Name= <span class=\"string\">&quot;Pizza&quot;</span>:</span><br><span class=\"line\">  <span class=\"keyword\">return</span> product;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">MakeToyCar</span>()</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Product product=<span class=\"keyword\">new</span> Product[];</span><br><span class=\"line\">  product.Name = <span class=\"string\">&quot;Toy Car&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> product;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"回调Callback方法案例\"><a href=\"#回调Callback方法案例\" class=\"headerlink\" title=\"回调Callback方法案例\"></a>回调Callback方法案例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DelegateExample</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\"> <span class=\"title\">static</span> <span class=\"title\">void</span> <span class=\"title\">Main</span>(<span class=\"title\">string</span>[] <span class=\"title\">args</span>]</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  ProductFactory productFactory = <span class=\"keyword\">new</span> ProductFactory[);</span><br><span class=\"line\">  WrapFactory wrapFactory = <span class=\"keyword\">new</span> WrapFactory[];</span><br><span class=\"line\">  Func&lt;Product&gt; func1 = <span class=\"keyword\">new</span> Func&lt;Product&gt;(productFactory.MalkePizza)</span><br><span class=\"line\">  Func&lt;Product&gt; func2 = <span class=\"keyword\">new</span> Func&lt;Product&gt;(productFactory.MaakeToyCar)</span><br><span class=\"line\">  Box box1 = wrapFactory.WrapProduct(func1);</span><br><span class=\"line\">  Box box2 = wrapFactory.WrapProduct(func2);</span><br><span class=\"line\">  Console. WriteLine(box1.Product.Name];</span><br><span class=\"line\">  Console. WriteLine(box2.Product.Name];</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Logger</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Log</span>(<span class=\"params\">Product product</span>)</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   Console.WriteLine(<span class=\"string\">&quot;Product&#123;0&#125;...&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Product</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name&#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Price&#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Box</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Product Product&#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">WrapFactory</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Box <span class=\"title\">WrapProduct</span>(<span class=\"params\">Func&lt;Product&gt;getProduct,Action&lt;Product&gt;logCallback</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Box box=newBox():</span><br><span class=\"line\">  Product product=getProduct.Invoke();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(product.Price&gt;=<span class=\"number\">50</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   logCallback(product);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  box.Product=product;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> box;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ProductFactory</span></span><br><span class=\"line\"> <span class=\"title\">public</span> <span class=\"title\">Product</span> <span class=\"title\">MakePizza</span>()</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Product product=<span class=\"keyword\">new</span> Product[];</span><br><span class=\"line\">  product.Name= <span class=\"string\">&quot;Pizza&quot;</span>;</span><br><span class=\"line\">  product.Price=<span class=\"number\">12</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> product;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">MakeToyCar</span>()</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Product product=<span class=\"keyword\">new</span> Product[];</span><br><span class=\"line\">  product.Name = <span class=\"string\">&quot;Toy Car&quot;</span>;</span><br><span class=\"line\">  product.Price=<span class=\"number\">100</span>; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> product;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"委托使用的注意点\"><a href=\"#委托使用的注意点\" class=\"headerlink\" title=\"委托使用的注意点\"></a>委托使用的注意点</h3><p>委托是一种方法级别的耦合，现实工作中要慎之又慎；<br>委托使用不当，会使可读性下降、debug难度增加；<br>把委托回调、异步调用、多线程纠缠在一起，会将代码变得难以阅读和维护；<br>委托使用不当可能造成内存泄漏和程序性能下降。（被占用的内存无法被释放）</p>\n<h3 id=\"多播委托（multicast）\"><a href=\"#多播委托（multicast）\" class=\"headerlink\" title=\"多播委托（multicast）\"></a>多播委托（multicast）</h3><p>一个委托内部，封装了不止一个方法。 </p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span>]</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"> &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  Student stu1 = <span class=\"keyword\">new</span> Student(</span>)</span> &#123;ID = <span class=\"number\">1</span>, PenColor = ConsoleColorYellow&#125;</span><br><span class=\"line\">  Student stu2 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">2</span>, PenColor = ConsoleColorGreen&#125;</span><br><span class=\"line\">  Student stu3 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">3</span>, PenColor = ConsoleColor.Red &#125; </span><br><span class=\"line\">  Action action1 = <span class=\"keyword\">new</span> Action(stu1.DoHomework);</span><br><span class=\"line\">  Action action2 = <span class=\"keyword\">new</span> Action(stu2.DoHomework);</span><br><span class=\"line\">  Action action3 = <span class=\"keyword\">new</span> Action(stu3.DoHomework];</span><br><span class=\"line\">  action1 += action2;</span><br><span class=\"line\">  action1 += action3;</span><br><span class=\"line\">  action1.Invoke();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式异步调用\"><a href=\"#隐式异步调用\" class=\"headerlink\" title=\"隐式异步调用\"></a>隐式异步调用</h3><ul>\n<li>同步与异步<br>同步：你做完了，我在你做的基础之上接着做。<br>异步：我们俩同时做。（同步进行）</li>\n<li>同步调用与异步调用<br>每个程序都是一个进程（process）<br>每个进程可以有多个线程（Thread）<br>同步调用是在同一线程内，异步调用底层机理是多线程</li>\n<li>隐式多线程与显示多线程<br>直接同步调用：直接通过方法名调用；<br>间接同步调用：使用委托进行；<br>隐式异步调用：使用委托的异步调用方法；<br>例子：<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\"><span class=\"title\">static</span> <span class=\"title\">void</span> <span class=\"title\">Main</span>[<span class=\"title\">string</span>[] <span class=\"title\">args</span>]</span><br><span class=\"line\"><span class=\"title\">Student</span> <span class=\"title\">stu1</span> = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">1</span>, PenColor = ConsoleCColor. Yellow</span><br><span class=\"line\">Student stu2 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">2</span>, PenColor = ConsoleCColor.Green</span><br><span class=\"line\">Student stu3 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">3</span>, PenColor = ConsoleCColor.Red</span><br><span class=\"line\">Action action1 = <span class=\"keyword\">new</span> Action(stu1.DoHomework];</span><br><span class=\"line\">Action action2=<span class=\"keyword\">new</span> Action(stu2.DoHomework);</span><br><span class=\"line\">Action action3 = <span class=\"keyword\">new</span> Action[stu3.DoHomework];</span><br><span class=\"line\">action1.BeginInvoke(<span class=\"literal\">null</span>,<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"comment\">//生成一个分支线程。在分支线程里面调用方法。参数1：调用完之后的后续操作。</span></span><br><span class=\"line\"><span class=\"comment\">//.NET库不支持begininvoke，改用await Task.Run(Action1);</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">Console.Foreground Color = ConsoleColor.Cyan;</span><br><span class=\"line\">Console.WriteLine[<span class=\"string\">&quot;Main thread &#123;0&#125;.&quot;</span>. i];</span><br><span class=\"line\">Thread.Sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>显式异步调用：使用Thread或者Task；</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student stu1 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">1</span>, PenColor = ConsoleCColor. Yellow</span><br><span class=\"line\"></span><br><span class=\"line\">Student stu2 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">2</span>, PenColor = ConsoleCColor.Green</span><br><span class=\"line\"></span><br><span class=\"line\">Student stu3 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">3</span>, PenColor = ConsoleColor.Red</span><br><span class=\"line\"></span><br><span class=\"line\">Thread thread1 = <span class=\"keyword\">new</span> Thread[<span class=\"keyword\">new</span> ThreadStart(stu1.DoHomework)];</span><br><span class=\"line\"></span><br><span class=\"line\">Thread thread2 = <span class=\"keyword\">new</span> Thread[<span class=\"keyword\">new</span> ThreadStart(stu2.DoHomework)]</span><br><span class=\"line\"></span><br><span class=\"line\">Thread thread3 = <span class=\"keyword\">new</span> Thread[<span class=\"keyword\">new</span> ThreadStart(stu3.DoHomework)]</span><br><span class=\"line\"></span><br><span class=\"line\">thread1.Start();</span><br><span class=\"line\"></span><br><span class=\"line\">thread2.Start();</span><br><span class=\"line\"></span><br><span class=\"line\">thread3.Start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student stu1 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">1</span>, PenColor = ConsoleColor. Yellow</span><br><span class=\"line\"></span><br><span class=\"line\">Student stu2 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">2</span>, PenColor = ConsoleColorGreen&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student stu3 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">3</span>, PenColor = ConsoleColor.FRed</span><br><span class=\"line\"></span><br><span class=\"line\">Task task1 = <span class=\"keyword\">new</span> Task[<span class=\"keyword\">new</span> Action[stu1.DoHomework]];</span><br><span class=\"line\"></span><br><span class=\"line\">Task task2 = <span class=\"keyword\">new</span> Task[<span class=\"keyword\">new</span> Action[stu2.DoHomework]];</span><br><span class=\"line\"></span><br><span class=\"line\">Task task3 = <span class=\"keyword\">new</span> Task(<span class=\"keyword\">new</span> Action(stu3.DoHomework));</span><br><span class=\"line\"></span><br><span class=\"line\">task1.Start();</span><br><span class=\"line\"></span><br><span class=\"line\">task2.Start():</span><br><span class=\"line\"></span><br><span class=\"line\">task3.Start[]:</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>适当的使用接口（interface）取代对委托的使用</li>\n<li>接口可以取代委托的作用。</li>\n</ul>\n<h1 id=\"事件（Event）\"><a href=\"#事件（Event）\" class=\"headerlink\" title=\"事件（Event）\"></a>事件（Event）</h1><p>事件是，使对象或类具备通知能力的成员（to provide notification）。<br>事件主要用于，对象或类之间的动作协调与信息传递（消息推送）。</p>\n<p>事件参数（Event Args）<br>响应事件 </p>\n<h2 id=\"事件模型的五个组成部分\"><a href=\"#事件模型的五个组成部分\" class=\"headerlink\" title=\"事件模型的五个组成部分\"></a>事件模型的五个组成部分</h2><ul>\n<li>事件拥有者（event source ， 对象）</li>\n<li>事件成员（event ，成员）</li>\n<li>时间的响应者（event subscriber ， 对象）</li>\n<li>事件处理器（event handler ， 成员）</li>\n<li>事件订阅——把事件处理器与事件进行关联，本质是一种以委托类型为基础的“约定”。</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Timers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">EventStudy</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Timer timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">            timer.Interval = <span class=\"number\">1000</span>;</span><br><span class=\"line\">            Boy boy = <span class=\"keyword\">new</span> Boy();</span><br><span class=\"line\">            timer.Elapsed += boy.Action;</span><br><span class=\"line\">            timer.Start();</span><br><span class=\"line\">            Console.ReadLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Boy</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, ElapsedEventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Jump!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Timers;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">EventStudy</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Form form =<span class=\"keyword\">new</span> Form();</span><br><span class=\"line\">            Controller controller=<span class=\"keyword\">new</span> Controller(form);</span><br><span class=\"line\">            form.ShowDialog();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Form form;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Controller</span>(<span class=\"params\">Form form</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.form = form;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.form.Click += <span class=\"keyword\">this</span>.FormClick;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">FormClick</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.form.Text = DateTime.Now.ToString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Timers;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">EventStudy</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MyForm form = <span class=\"keyword\">new</span> MyForm();</span><br><span class=\"line\">            form.Click += form.FormClick;</span><br><span class=\"line\">            form.ShowDialog();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">MyForm</span> : <span class=\"title\">Form</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">void</span> <span class=\"title\">FormClick</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Text = DateTime.Now.ToString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最常用用法：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Timers;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">EventStudy</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MyForm form = <span class=\"keyword\">new</span> MyForm();</span><br><span class=\"line\">            form.ShowDialog();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">MyForm</span> : <span class=\"title\">Form</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> TextBox textBox;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Button button;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyForm</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.textBox = <span class=\"keyword\">new</span> TextBox();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.button = <span class=\"keyword\">new</span> Button();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Controls.Add(textBox);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Controls.Add(button);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.button.Click += <span class=\"keyword\">this</span>.ButtonClicked;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ButtonClicked</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.textBox.Text = <span class=\"string\">&quot;Hello ,World!!!!!!!!&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件的声明\"><a href=\"#事件的声明\" class=\"headerlink\" title=\"事件的声明\"></a>事件的声明</h2><p>完整声明</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Timers;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">EventStudy</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Customer customer = <span class=\"keyword\">new</span> Customer();</span><br><span class=\"line\">            Waiter waiter = <span class=\"keyword\">new</span> Waiter();</span><br><span class=\"line\">            customer.Order += waiter.Action;</span><br><span class=\"line\">            Console.ReadLine();</span><br><span class=\"line\">            customer.Think();</span><br><span class=\"line\">            customer.Paythebill();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OrderEventArgs</span> : <span class=\"title\">EventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> DishName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Size &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">OrderEventHandler</span>(<span class=\"params\">Customer customer, OrderEventArgs e</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> OrderEventHandler orderEventHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> OrderEventHandler Order</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">add</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.orderEventHandler += <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">remove</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.orderEventHandler -= <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Bill &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Paythebill</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;I will pay $&#123;0&#125;&quot;</span>, <span class=\"keyword\">this</span>.Bill);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Think</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            OrderEventArgs e = <span class=\"keyword\">new</span> OrderEventArgs();</span><br><span class=\"line\">            e.DishName = <span class=\"string\">&quot;baga&quot;</span>;</span><br><span class=\"line\">            e.Size = <span class=\"string\">&quot;large&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.orderEventHandler.Invoke(<span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Waiter</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span>(<span class=\"params\">Customer customer, OrderEventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;I will serve you the dish : &#123;0&#125;&quot;</span>, e.DishName);</span><br><span class=\"line\">            <span class=\"built_in\">double</span> price = <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (e.Size)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;small&quot;</span>:</span><br><span class=\"line\">                    price = price * <span class=\"number\">0.5</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;large&quot;</span>:</span><br><span class=\"line\">                    price = price * <span class=\"number\">1.5</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"literal\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            customer.Bill = price;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>简略声明（Field-like）<br>语法糖。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">event</span> OrderEventHandler Order;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Think</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OrderEventArgs e = <span class=\"keyword\">new</span> OrderEventArgs();</span><br><span class=\"line\">    e.DishName = <span class=\"string\">&quot;baga&quot;</span>;</span><br><span class=\"line\">    e.Size = <span class=\"string\">&quot;large&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.Order.Invoke(<span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">    <span class=\"comment\">//简略后，用事件代替为之前的字段。</span></span><br><span class=\"line\">    <span class=\"comment\">//而在完整版的代码中，事件只能用来+=（订阅）运算。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事件，让程序更加有逻辑，对象之间的关系更清晰。<br>委托是方法与方法之间的强关联，事件是对象与对象之间。而委托可能造成，不同对象，对同一个方法进行滥用。<br>事件，只能访问事件的订阅操作，而想访问事件的其他层面则不允许。而委托，可以设定传入委托的具体参数和返回值。<br>事件的本质，是委托字段的包装器，对其进行封装（encapsulation），事件对外界隐藏了委托实例的大部分功能，而只能对其进行订阅。<br>protected,dynamic,partial，virtual</p>\n<h1 id=\"类（class）\"><a href=\"#类（class）\" class=\"headerlink\" title=\"类（class）\"></a>类（class）</h1><p>构造函数与析构函数<br>析构函数：<code>~Student()&#123;...&#125;</code></p>\n<h2 id=\"类的访问级别修饰符\"><a href=\"#类的访问级别修饰符\" class=\"headerlink\" title=\"类的访问级别修饰符\"></a>类的访问级别修饰符</h2><p>也就是，当其他项目（Aseembly）想要访问当前项目时，该类是否能被引用。<br>public：外部可以引用。<br>internal：仅在该项目内部有效。</p>\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><p>base class （基类）与derived class（派生类）<br>父类与子类<br>一个子类的实例，也是父类的一个实例。（例如，一个类的实例，是这个类的实例，也是object类的实例）<br>sealed：将该类进行封闭，不能再进行继承。<br>C#中一个类只支持一个基类，但是可以支持多个基接口。<br>public与internal修饰的类，需要注意访问级别的层级问题，子类访问级别不能高于父类。<br>在构造基类与派生类时，派生类会对基类的方法等进行改写和重构，如果再想通过该派生类去访问该派生类改写过的基类的方法等，是不行的（已被改写）。<br>父类的实例构造器，不能被子类继承。</p>\n<h2 id=\"类成员的访问\"><a href=\"#类成员的访问\" class=\"headerlink\" title=\"类成员的访问\"></a>类成员的访问</h2><p>protected：将类成员的访问级别，限制在继承链上，protected 的类&#x2F;方法，其子类可以对其进行访问。并且是跨程序集的。可以跟internal修饰符进行组合。</p>\n<h2 id=\"重写与多态（polymorphism）\"><a href=\"#重写与多态（polymorphism）\" class=\"headerlink\" title=\"重写与多态（polymorphism）\"></a>重写与多态（polymorphism）</h2><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Vehicle</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span></span><br><span class=\"line\"><span class=\"function\"> Console.<span class=\"title\">WriteLine</span>(<span class=\"params\"><span class=\"string\">&quot;I&#x27;m running!&quot;</span></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span>: <span class=\"title\">Vehicle</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Console.WriteLine(<span class=\"string\">&quot;Car is running!&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果不加virtual与override，则是子类对父类方法的隐藏。<br>在C#编程中，可以通过父类来声明一个子类的实例，这样做的用意是实现多态，也就是，在父类的引用中存储任何一个子类的对象，从而可以调用不同子类的实现。<strong>（父类的方法或者属性，引用继承链上实例化的子类所带有的最新重写版本）</strong><br>通过父类声明子类实例可以让代码更加通用，尤其是在处理大量继承体系时。<br>在使用父类声明子类的实例时，最终得到的是 子类的实例，尽管变量的类型是父类。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MakeAnimalSound</span>(<span class=\"params\">Animal animal</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    animal.MakeSound();  <span class=\"comment\">// 不管是 Dog 还是 Cat，都会调用各自的 MakeSound 方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Animal dog = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">    Animal cat = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\"></span><br><span class=\"line\">    MakeAnimalSound(dog);  <span class=\"comment\">// 输出: Bark</span></span><br><span class=\"line\">    MakeAnimalSound(cat);  <span class=\"comment\">// 输出: Meow</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Speak</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Animal speaks&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"title\">Animal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">WagTail</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Dog is wagging its tail&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Speak</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Dog barks&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Animal animal = <span class=\"keyword\">new</span> Dog(); <span class=\"comment\">// 父类类型的变量指向子类实例</span></span><br><span class=\"line\">        animal.Name = <span class=\"string\">&quot;Buddy&quot;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        animal.Speak();  <span class=\"comment\">// 输出: Dog barks</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// animal.WagTail();  // 错误，Animal 类中没有 WagTail 方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>属性也可以被重写。</p>\n<h1 id=\"接口、抽象类、SOLID、单元测试和反射\"><a href=\"#接口、抽象类、SOLID、单元测试和反射\" class=\"headerlink\" title=\"接口、抽象类、SOLID、单元测试和反射\"></a>接口、抽象类、SOLID、单元测试和反射</h1><h2 id=\"接口与抽象类\"><a href=\"#接口与抽象类\" class=\"headerlink\" title=\"接口与抽象类\"></a>接口与抽象类</h2><p>算法\\设计原则<br>具体类 → 抽象类 → 接口：越来越抽象，内部实现的东西越来越少。<br>抽象类是未完全实现逻辑的类,（有被实现的部分也就是非abstract部分，也有部分abstract的）</p>\n<h3 id=\"抽象类与开放关闭（开闭）原则\"><a href=\"#抽象类与开放关闭（开闭）原则\" class=\"headerlink\" title=\"抽象类与开放关闭（开闭）原则\"></a>抽象类与开放关闭（开闭）原则</h3><p><strong>抽象类</strong>不允许被实例化，但是可以作为基类。可以通过子类实例引用具体的方法。<br><strong>开闭原则</strong>：没有特别情况（修BUG和增添新功能），尽可能不去修改已经写好的代码。也就是：我们应该封装那些不变的、稳定的、固定的和确定的成员，把那些不确定的、有可能改变的成员声明为抽象成员，并且留给子类去实现。</p>\n<h3 id=\"接口（Interface）与单元测试\"><a href=\"#接口（Interface）与单元测试\" class=\"headerlink\" title=\"接口（Interface）与单元测试\"></a>接口（Interface）与单元测试</h3><ul>\n<li>接口是完全未实现逻辑的“类”，成员全部为public.</li>\n<li>接口为解耦而生，方便单元测试，高内聚，低耦合。</li>\n<li>接口是一个协约（contract）（有分工必有协作，有协作必有协约）</li>\n<li>接口不能被实例化，只能用来声明变量、引用具体类（concrete class）的实例。<br>举例：<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接口-最抽象的类（所有方法等都是abstract）</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">IVehicle</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Stop</span>()</span>;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Fill</span>()</span>;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//基类</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Vehicle : IVehicle</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Stop</span>()</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Console.WriteLine(<span class=\"string\">&#x27;Stopped!&#x27;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>()</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Console.WriteLine(<span class=\"string\">&quot;Pay and fill...&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实现类-两个</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> : <span class=\"title\">IVehicle</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Console.WriteLine(<span class=\"string\">&quot;Car is running...&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Truck</span> : <span class=\"title\">IVehicle</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Console.WriteLine(<span class=\"string\">&quot;Truck is running&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n接口在工作中的一般使用方法</li>\n</ul>\n<p>方法\\类之间的依赖或耦合</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[<span class=\"keyword\">args</span>] </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"> &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  <span class=\"keyword\">var</span> engine = <span class=\"keyword\">new</span> Engine(</span>)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car(engine);</span><br><span class=\"line\">  car.Run(<span class=\"number\">3</span>);</span><br><span class=\"line\">  Console.WriteLine(car.Speed);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Engine与Car类有紧耦合，Car类对Engine类有强依赖</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Engine</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> RPM &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> Work[<span class=\"built_in\">int</span> gas] &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.RPM = <span class=\"number\">1000</span> * gas;</span><br><span class=\"line\"> <span class=\"comment\">//this.RPM = 0;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> Engine engine;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Car</span>(<span class=\"params\">Engine engine</span>)</span> &#123;</span><br><span class=\"line\">  _engine = engine;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Speed &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> Run[<span class=\"built_in\">int</span> gas] &#123;</span><br><span class=\"line\">  _engine.Work(gas);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.Speed = engine.RPM / <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口可以降低耦合度（保证给你提供的功能准确无误，可靠的）：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span> &#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>ħ <span class=\"keyword\">args</span></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> PhoneUser(<span class=\"keyword\">new</span> EricssonPhone)<span class=\"comment\">//只需要更改这一个地方，其他地方均不需要改动，因此耦合度低。</span></span><br><span class=\"line\">  user.UsePhone();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">PhoneUser</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _<span class=\"function\">phone</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">public</span> <span class=\"title\">PhoneUser</span>(<span class=\"params\">IPhone phone</span>)</span>&#123;</span><br><span class=\"line\">  _phone = phone;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">UsePhone</span>()</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">IPhone</span>&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">NokiaPhone</span> : <span class=\"title\">IPhone</span>&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">EricssonPhone</span> : <span class=\"title\">IPhone</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"依赖反转-倒置原则（Dependecy-Inversion）：\"><a href=\"#依赖反转-倒置原则（Dependecy-Inversion）：\" class=\"headerlink\" title=\"依赖反转&#x2F;倒置原则（Dependecy Inversion）：\"></a>依赖反转&#x2F;倒置原则（Dependecy Inversion）：</h4><p>之前是一个类依赖于另一个类，可以通过设计，改造为，一个类依赖于一个接口，而接口被依赖于其他类。<br>例如，司机依赖于交通工具接口，而不同种类的运输工具也依赖于交通工具接口。</p>\n<h4 id=\"接口隔离原则（Interface-Seperation）\"><a href=\"#接口隔离原则（Interface-Seperation）\" class=\"headerlink\" title=\"接口隔离原则（Interface Seperation）\"></a>接口隔离原则（Interface Seperation）</h4><p>接口和类的大小也不能太小，要把握好度。<br>接口提供的功能多于功能调用者<br>调用者不能多要功能，也就是调用最小的接口即可。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> Main〔<span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span>) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> driver = <span class=\"keyword\">new</span> Driver(<span class=\"keyword\">new</span> Car()<span class=\"comment\">//new Tank())&#125;;</span></span><br><span class=\"line\"> driver.Drive();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Driver</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> IVehicle _vehicle;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Driver</span>(<span class=\"params\">IVehicle vehicle</span>)</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  _vehicle=vehicle;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drive</span>()</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  _vehicle.Run();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">interface</span> <span class=\"title\">IVehicle</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">interface</span> <span class=\"title\">IWeapon</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Fire</span>()</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Car</span> : <span class=\"title\">IVhicle</span>&#123;...&#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Truck</span> : <span class=\"title\">IVhicle</span>&#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">interface</span> <span class=\"title\">ITank</span>:<span class=\"title\">IVehicle</span>, <span class=\"title\">IWeapon</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">LightTank</span> : <span class=\"title\">ITank</span>&#123;...&#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Medium</span> <span class=\"title\">Tank</span> : <span class=\"title\">ITank</span>&#123;...&#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">HeavyTank</span> : <span class=\"title\">ITank</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"单元测试：\"><a href=\"#单元测试：\" class=\"headerlink\" title=\"单元测试：\"></a>单元测试：</h4><p>在同一个solution下添加新的test project,命名为:<strong>默认名称空间.test</strong>;<br>…</p>\n<h2 id=\"反射、特性和依赖注入（Dependency-Injection）\"><a href=\"#反射、特性和依赖注入（Dependency-Injection）\" class=\"headerlink\" title=\"反射、特性和依赖注入（Dependency Injection）\"></a>反射、特性和依赖注入（Dependency Injection）</h2><h3 id=\"反射（Reflection）\"><a href=\"#反射（Reflection）\" class=\"headerlink\" title=\"反射（Reflection）\"></a>反射（Reflection）</h3><p>是一种设计模式，通过依赖注入实现</p>\n<h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><p>将<code>Itank tank = new HeavyTank();</code>操作进行区分。<br>因为，当给程序进行升级的时候，很多时候接口后面所引用的实例具体类型需要大量更改，但是有的又不需要，因此，我们通过依赖注入，只需要将注册时候的引用实例类型更改一次即可，并且也可以和仍然需要<code>Itank tank = new HeavyTank();</code>的代码进行区分。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">interface</span> <span class=\"title\">ITank</span>:<span class=\"title\">IVehicle</span>, <span class=\"title\">IWeapon</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">interface</span> <span class=\"title\">IVehicle</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">interface</span> <span class=\"title\">IWeapon</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Fire</span>()</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">LightTank</span> : <span class=\"title\">ITank</span>&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Medium</span> <span class=\"title\">Tank</span> : <span class=\"title\">ITank</span>&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">HeavyTank</span> : <span class=\"title\">ITank</span>&#123;...&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> Main〔<span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span>] </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//注册。</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sc = <span class=\"keyword\">new</span> ServiceCollection();</span><br><span class=\"line\">  sc.AddScoped(<span class=\"keyword\">typeof</span>(ITank), <span class=\"keyword\">typeof</span>(Medium Tank)&#125;;</span><br><span class=\"line\">  <span class=\"comment\">//使用依赖注入后，只需要在这里更改ITank类引用的具体实例</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sp = sc.<span class=\"function\">BuildService <span class=\"title\">Provider</span>()</span>;</span><br><span class=\"line\">  <span class=\"comment\">//以下，是进行前台运行操作。</span></span><br><span class=\"line\">  ITank tank=sp.GetService&lt;lTank&gt;();</span><br><span class=\"line\">  tank.Fire();</span><br><span class=\"line\">  tank.Run();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> Main〔<span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span>] </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//注册。</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sc = <span class=\"keyword\">new</span> ServiceCollection();</span><br><span class=\"line\">  sc.AddScoped(<span class=\"keyword\">typeof</span>(IVehicle), <span class=\"keyword\">typeof</span>(Medium Tank)&#125;;</span><br><span class=\"line\">  sc.AddScoped&lt;Driver&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sp = sc.<span class=\"function\">BuildService <span class=\"title\">Provider</span>()</span>;</span><br><span class=\"line\">  <span class=\"comment\">//以下，是进行前台运行操作。</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> driver=sp.GetService&lt;Driver&gt;();</span><br><span class=\"line\">  <span class=\"comment\">//当我们创建driver实例的时候，不再需要在构造函数里面去引用具体的类实例。</span></span><br><span class=\"line\">  <span class=\"comment\">//因为Driver类的构造函数中有传入参数的声明（IVehicle），因此DI会在注册列表中去找你的IVihecle，以及与之对应的类。</span></span><br><span class=\"line\">  driver.Drive();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过反射实现更松的耦合\"><a href=\"#通过反射实现更松的耦合\" class=\"headerlink\" title=\"通过反射实现更松的耦合\"></a>通过反射实现更松的耦合</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Runtime.Loader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ReflectionStudy</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine();</span><br><span class=\"line\">            <span class=\"comment\">//在程序路径下创建Animals文件夹</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> folder = Path.Combine(Environment.CurrentDirectory, <span class=\"string\">&quot;Animals&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//获取Animals文件夹里面的文件</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> files = Directory.GetFiles(folder);</span><br><span class=\"line\">            <span class=\"comment\">//创建动物的集合</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> animalTypes = <span class=\"keyword\">new</span> List&lt;Type&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> <span class=\"keyword\">file</span> <span class=\"keyword\">in</span> files)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//将文件夹内的文件整合成一个assembly类型的实例</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> assembly = AssemblyLoadContext.Default.LoadFromAssemblyPath(<span class=\"keyword\">file</span>);</span><br><span class=\"line\">                <span class=\"comment\">//获得assembly里面，每个元素的所有信息（属性和方法等）</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> types = assembly.GetTypes();</span><br><span class=\"line\">                <span class=\"comment\">//将每个符合要求的type类型加到我们需要的type集合当中去。</span></span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> types)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (t.GetMethod(<span class=\"string\">&quot;Voice&quot;</span>) != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        animalTypes.Add(t);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//将animalsType中的动物逐一打印出名字</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; animalTypes.Count; i++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;i + <span class=\"number\">1</span>&#125;</span>。<span class=\"subst\">&#123;animalTypes[i].Name&#125;</span>&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;=========================&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//选择动物，然后判断是否超出范围，没有则为其选择对应的动物</span></span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;Please choose animal:&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">int</span> index = <span class=\"built_in\">int</span>.Parse(Console.ReadLine());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (index &gt; animalTypes.Count || index &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">&quot;No such an animal. Try again!&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;                    </span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"built_in\">int</span> Clicktimes = <span class=\"built_in\">int</span>.Parse(Console.ReadLine());</span><br><span class=\"line\">                <span class=\"comment\">//获取对应动物类型的typeinfo信息，然后创建反射。</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> t = animalTypes[index - <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"comment\">//获取t中，我们需要的方法。</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> m = t.GetMethod(<span class=\"string\">&quot;Voice&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//创建object实例o，并通过它来调用t实例的方法或者属性</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> o = Activator.CreateInstance(t);</span><br><span class=\"line\">                <span class=\"comment\">//将o传给新创建的object，然后触发m所反射的方法</span></span><br><span class=\"line\">                m.Invoke(o, <span class=\"keyword\">new</span> <span class=\"built_in\">object</span>[] &#123; Clicktimes &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Assembly</strong> 类可以加载以下类型的文件：<br>.exe 文件（可执行文件）<br>.dll 文件（动态链接库）<br>.winmd 文件（Windows Metadata 文件）<br>特定平台的程序集（如 .a、.so、.dylib）<br>加载这些文件时，Assembly 类会解析文件中的元数据，并允许你通过反射访问其中的类型、方法等信息。</p>\n<ul>\n<li><strong>.dll文件制作</strong><br>需要另起一个工程，选择class lib。</li>\n<li>** SDK制作**<br>在总解决方案中，添加Interface工程</li>\n<li><strong>制作SDK插件</strong><br>在项目中添加依赖（dependence）中，选择browse，引用即可。</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Animals.Lib2</span> &#123;</span><br><span class=\"line\"> [<span class=\"meta\">Unfinished</span>]</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Cow</span> : <span class=\"title\">IAnimal</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Voice</span>(<span class=\"params\"><span class=\"built_in\">int</span> times</span>)</span> </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (inti=<span class=\"number\">0</span>; i &lt; times; i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Moo!&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>Attribute</strong><br>在制作插件的过程中，未完成的部分，用[Unfinished]标注，最后在主程序这边会过滤掉。<br>前提是，在SDK接口开发中，声明一个Unfinished的特性，声明如下：<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">BabyStroller.SDK</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UnfinishedAttribute</span> : <span class=\"title\">Attribute</span> &#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>if continue</p>\n<p>当我们采用接口和SDK了之后，代码会发生改动<br>比如过滤无效类型：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> types) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (t.GetInterfaces().Contains(<span class=\"keyword\">typeof</span>(IAnimal))) </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isUnfinished = t.GetCustomAttributes(<span class=\"literal\">false</span>).Any(a   =&gt; a.GetType() == <span class=\"keyword\">typeof</span>(UnfinishedAttribute)&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isUnfinished) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">  animalTypes.Add(t);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以及最调用时：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> times = <span class=\"built_in\">int</span>.Parse(Console.ReadLine()&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> t = animalTypes[index - <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = t.GetMethod(<span class=\"string\">&quot;Voice&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = Activator.Createlnstance(t);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = o <span class=\"keyword\">as</span> IAnimal;</span><br><span class=\"line\">a.Voice(times);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>接口<code>IAnimal</code> 定义了 <code>Voice </code>方法签名，例如：</p>\n</blockquote>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IAnimal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Voice</span>(<span class=\"params\"><span class=\"built_in\">int</span> times</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类实现接口：<br>假设有一个类<code>Dog</code>实现了 IAnimal 接口，并提供了 Voice 方法的实现：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"title\">IAnimal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Voice</span>(<span class=\"params\"><span class=\"built_in\">int</span> times</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;The dog barks <span class=\"subst\">&#123;times&#125;</span> times.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个类实现了 IAnimal 接口，提供了 Voice 方法的具体实现。<br><code>var o = Activator.CreateInstance(t);</code><br>o 是 Dog 类型的实例（如果 t 是 Dog）。此时，o 既是 Dog 类型的对象，也是 IAnimal 类型的对象，因为 Dog 实现了 IAnimal 接口。<br>接口转换和方法调用：你将 o 强制转换为 IAnimal 类型：<br><code>var a = o as IAnimal;</code><br>如果 o 实现了 IAnimal 接口，转换会成功，a 就变成了一个 IAnimal 类型的引用，指向 o。然后你可以调用 a.Voice(times)，实际上是在调用 Dog 类中实现的 Voice 方法。</p>\n<h1 id=\"泛型、partial类、枚举、结构体\"><a href=\"#泛型、partial类、枚举、结构体\" class=\"headerlink\" title=\"泛型、partial类、枚举、结构体\"></a>泛型、partial类、枚举、结构体</h1><h2 id=\"泛型（generic）\"><a href=\"#泛型（generic）\" class=\"headerlink\" title=\"泛型（generic）\"></a>泛型（generic）</h2><p>为什么需要泛型：避免成员膨胀或者类型膨胀<br>正交性：泛型类型（类&#x2F;接口&#x2F;委托&#x2F;…）、泛型成员（属性&#x2F;方法&#x2F;字段&#x2F;…） </p>\n<h3 id=\"泛型类型\"><a href=\"#泛型类型\" class=\"headerlink\" title=\"泛型类型\"></a>泛型类型</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>) <span class=\"keyword\">args</span>)</span> &#123;</span><br><span class=\"line\">  Apple apple=<span class=\"keyword\">new</span> AppleO&#123;Color= <span class=\"string\">&quot;Red&quot;</span>&#125;;</span><br><span class=\"line\">  Book book = <span class=\"keyword\">new</span> BookO &#123;Name = <span class=\"string\">&quot;New Book&quot;</span>&#125;;</span><br><span class=\"line\">  Box&lt;Apple&gt; box1 = <span class=\"keyword\">new</span> Box&lt;Apple&gt;()&#123;Cargo = apple&#125;;</span><br><span class=\"line\">  Box&lt;Book&gt; box2=<span class=\"keyword\">new</span> Box&lt;Book&gt;Q&#123;Cargo = book&#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Color &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span>&lt;<span class=\"title\">TCargo</span>&gt;&#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> TCargo Cargo &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"泛型接口\"><a href=\"#泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>) <span class=\"keyword\">args</span>)</span> &#123;</span><br><span class=\"line\">  Student&lt;<span class=\"built_in\">int</span>&gt; stu = <span class=\"keyword\">new</span> Student&lt;<span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">  stu.ID = <span class=\"number\">101</span>;</span><br><span class=\"line\">  stu.Name= <span class=\"string\">&quot;Timothy&quot;</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">IUnique</span>&lt;<span class=\"title\">Tld</span>&gt; &#123;</span><br><span class=\"line\"> TId ID&#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>&lt;<span class=\"title\">TId</span>&gt;:<span class=\"title\">lUnique</span>&lt;<span class=\"title\">TId</span>&gt; &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> TId ID &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"泛型集合\"><a href=\"#泛型集合\" class=\"headerlink\" title=\"泛型集合\"></a>泛型集合</h3><p>带有一个类型参数的泛型类型</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span> &#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span> &#123;</span><br><span class=\"line\"> IList&lt;<span class=\"built_in\">int</span>&gt; list = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">  list.Add(i);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> list) &#123;</span><br><span class=\"line\">  Console.WriteLine(item);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>带有两个类型参数的泛型类型</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dictionary&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">string</span>&gt; dict = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">string</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型方法\"><a href=\"#泛型方法\" class=\"headerlink\" title=\"泛型方法\"></a>泛型方法</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>) <span class=\"keyword\">args</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span>[] a1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">int</span>[] a2 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">double</span>[] a3 = &#123;<span class=\"number\">1.1</span>, <span class=\"number\">2.2</span>, <span class=\"number\">3.3</span>, <span class=\"number\">4.4</span>, <span class=\"number\">5.5</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">double</span>[] a4 = &#123;<span class=\"number\">1.1</span>, <span class=\"number\">2.2</span>, <span class=\"number\">3.3</span>, <span class=\"number\">4.4</span>, <span class=\"number\">5.5</span>, <span class=\"number\">6.6</span>&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result=Zip(a1,a2);</span><br><span class=\"line\">  <span class=\"comment\">//var result=Zip(a3,a4);</span></span><br><span class=\"line\">  Console.WriteLine(<span class=\"built_in\">string</span>.Join(<span class=\"string\">&quot;,&quot;</span>, result)&#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法：把两个数组组合成一个数组。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> T[] <span class=\"title\">Zip</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T[] a, T[] b</span>)</span>&#123;</span><br><span class=\"line\"> T[] zipped = <span class=\"keyword\">new</span> T[a.Length + b.Length];</span><br><span class=\"line\"> <span class=\"built_in\">int</span> ai = <span class=\"number\">0</span>, bi = <span class=\"number\">0</span>, zi = <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ai &lt; a.Length) zipped[zi++]= a[ai++];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bi &lt; b.Length) zipped[zi++] = b[bi++];</span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> <span class=\"keyword\">while</span> (ai &lt; a.Length || bi &lt; b.Length);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> zipped;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型委托\"><a href=\"#泛型委托\" class=\"headerlink\" title=\"泛型委托\"></a>泛型委托</h3><p>Action泛型委托</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>) <span class=\"keyword\">args</span>)</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//Action泛型委托声明的方式和Action普通委托声明方式有差异。</span></span><br><span class=\"line\">  Action&lt;<span class=\"built_in\">string</span>&gt; a1 = Say;</span><br><span class=\"line\">  <span class=\"comment\">//Action a1 = new Action(Say)</span></span><br><span class=\"line\">  a1();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Say</span>(<span class=\"params\"><span class=\"built_in\">string</span> str</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Console.WriteLine(...);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Mul</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  ...;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Func泛型委托</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>) <span class=\"keyword\">args</span>)</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Func&lt;<span class=\"built_in\">double</span>,<span class=\"built_in\">double</span>,<span class=\"built_in\">double</span>&gt; func1 = Add;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = func1(<span class=\"number\">100</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">  Console.WriteLine(result); </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"built_in\">int</span> a,<span class=\"built_in\">int</span> b</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  ...;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">double</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"built_in\">double</span> a,<span class=\"built_in\">double</span> b</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  ...;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>泛型委托与lambda表达式：<code>Func&lt;double,double,double&gt; func1 = &#123;a, b&#125;=&gt;&#123;return a+b;&#125;;</code><br>可以简化语句，节省声明方法所可能污染代码的可能。</p>\n<h2 id=\"partial类\"><a href=\"#partial类\" class=\"headerlink\" title=\"partial类\"></a>partial类</h2><p>减少类的派生，当原类会自动更新覆盖等时，把自己添加的方法等放到其他名称空间下，则不会被删除或者重写。</p>\n<p>partial类必须要保证和原类型在同一个名称空间之下。</p>\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>枚举的每个值都有大小，大小也可以自定义设置。<br><code>Console.WriteLine((int)Level.Employee);</code></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> Level</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> Employee = <span class=\"number\">100</span>,</span><br><span class=\"line\"> Boss = <span class=\"number\">200</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span><span class=\"doctag\">///</span><span class=\"doctag\">///</span><span class=\"doctag\">///</span><span class=\"doctag\">///</span><span class=\"doctag\">///</span><span class=\"doctag\">///</span><span class=\"doctag\">///</span><span class=\"doctag\">///</span>//</span></span><br><span class=\"line\"><span class=\"built_in\">enum</span> Level</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> Employee = <span class=\"number\">100</span>,</span><br><span class=\"line\"> Boss,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//不给BOSS,额外设定值的话，那么bOSS是101.</span></span><br></pre></td></tr></table></figure>\n<p>枚举的比特位编程</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>) <span class=\"keyword\">args</span>)</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//假设这个人四个技能都会。</span></span><br><span class=\"line\">  person.Skill = Skill.Drive | Skill.Cook| Skill.Program| SkiTeach;</span><br><span class=\"line\">  Console.WriteLine();</span><br><span class=\"line\">  <span class=\"comment\">//按或运算符计算。</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"built_in\">enum</span> Skill </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> Drive = <span class=\"number\">1</span>,</span><br><span class=\"line\"> Cook=<span class=\"number\">2</span>,</span><br><span class=\"line\"> Program=<span class=\"number\">4</span>,</span><br><span class=\"line\"> Teach=<span class=\"number\">8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> Skill skill;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构体（struct）\"><a href=\"#结构体（struct）\" class=\"headerlink\" title=\"结构体（struct）\"></a>结构体（struct）</h2><p>结构体是值类型，存放值类型数据。<br>装箱与拆箱操作：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>) <span class=\"keyword\">args</span>)</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Student student = <span class=\"keyword\">new</span> Student(KID = <span class=\"number\">101</span>, Name = <span class=\"string\">&quot;Timtohy223;</span></span><br><span class=\"line\"><span class=\"string\">  object object = student;//装箱</span></span><br><span class=\"line\"><span class=\"string\">  Student student2 = (Student) obj;//拆箱</span></span><br><span class=\"line\"><span class=\"string\">  Console.WriteLine($&quot;</span><span class=\"meta\">#&#123;student2.ID&#125; Name:(student2Name&#125;&quot;)</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> Student </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ID &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结构体对象，进行复制时，是完全复制了其所有数据，而不是只复制了其引用的地址。<br>结构体类型，只能由接口派生。<br>结构体不能拥有显示的无参构造器：<code>public Studnt()&#123;&#125;</code>.（备注，有参的可以。）</p>\n<h1 id=\"LINQ、lambda表达式与委托\"><a href=\"#LINQ、lambda表达式与委托\" class=\"headerlink\" title=\"LINQ、lambda表达式与委托\"></a>LINQ、lambda表达式与委托</h1><h2 id=\"lambda\"><a href=\"#lambda\" class=\"headerlink\" title=\"lambda\"></a>lambda</h2><ul>\n<li>匿名方法</li>\n<li>Inline方法</li>\n</ul>\n<p><strong>泛型委托的类型推断</strong></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//两种表达方式：</span></span><br><span class=\"line\"><span class=\"comment\">//Func&lt;int, int, int&gt; func = new Func&lt;int,int,int&gt;((a, b) =&gt; &#123; return a + b;&#125;);</span></span><br><span class=\"line\">Func&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>&gt; func = (a, b) =&gt; &#123; <span class=\"keyword\">return</span> a + b;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">int</span> res = func(<span class=\"number\">100</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">Console.WriteLine(res);</span><br><span class=\"line\">func=(x,y)=&gt;&#123;returnx</span><br><span class=\"line\">res = func(<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">y;&#125;;</span><br><span class=\"line\">Console.WriteLine(res);</span><br></pre></td></tr></table></figure>\n<p>另外一种使用方式：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  DoSomeCalc&lt;<span class=\"built_in\">int</span>&gt;((<span class=\"built_in\">int</span> a, <span class=\"built_in\">int</span> b) =&gt; (<span class=\"keyword\">return</span> a b; &#125;, <span class=\"number\">100</span>,<span class=\"number\">200</span>);</span><br><span class=\"line\">  <span class=\"comment\">//高级写法：</span></span><br><span class=\"line\">  <span class=\"comment\">//DoSomeCalc((a,b) =&gt; (return a b; &#125;, 100,200);</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DoSomeCalc</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">Func&lt;T, T, T  T&gt; func,T x, Ty</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  T res=func(x,y);</span><br><span class=\"line\">  Console.WriteLine(res);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"LINQ-NET-Language-Integrated-Query\"><a href=\"#LINQ-NET-Language-Integrated-Query\" class=\"headerlink\" title=\"LINQ(.NET Language Integrated Query)\"></a>LINQ(.NET Language Integrated Query)</h2><p>将C#语句转换为sql语句，进行查询，但是sql的查询会更准确，LINQ只是临时简单使用。<br>……..</p>\n</div>","excerpt":"","more":"<div class=\".article-gallery\"><hr>\n<h2 id=\"title-C-学习笔记\"><a href=\"#title-C-学习笔记\" class=\"headerlink\" title=\"title&#x3D; C#学习笔记\"></a>title&#x3D; C#学习笔记</h2><h1 id=\"Type（类型）\"><a href=\"#Type（类型）\" class=\"headerlink\" title=\"Type（类型）\"></a>Type（类型）</h1><h2 id=\"类型的简介\"><a href=\"#类型的简介\" class=\"headerlink\" title=\"类型的简介\"></a>类型的简介</h2><p>小内存容纳大尺寸数据会丢失数据和精度…<br>大内存…小尺寸数据浪费内存<br>整数类型：int 4字节；long 8字节。<br>强类型语言：数据类型不能轻易转变；弱类型语言…<br>程序静止时，放在硬盘（外村）内，运行时，装载到内存。<br>类型中的信息：<br>    内存空间大小，<br>    储存值的大小范围，<br>    基类（父类），<br>    成员（事件，属性，方法）<br>    类型的变量分配在内存的位置<br>        Stack(栈，比较小)&#x2F;Heap(堆，更大)<br>        Stack overflow栈溢出，堆不会溢出。<br>        堆上的内存如果忘记回收，会造成内存泄漏。<br>        cmd中调用performance monitor可以监测进程的内存。<br>        实例，分配到堆（heap）中去。</p>\n<h2 id=\"类型系统\"><a href=\"#类型系统\" class=\"headerlink\" title=\"类型系统\"></a>类型系统</h2><h3 id=\"五大数据类型\"><a href=\"#五大数据类型\" class=\"headerlink\" title=\"五大数据类型\"></a>五大数据类型</h3><p>类（class）：Window,Form,Console<br>结构体（structure）:Int,double<br>枚举（enumeration）<br>接口（interface）<br>委托（delegate） </p>\n<h2 id=\"变量、对象与内存\"><a href=\"#变量、对象与内存\" class=\"headerlink\" title=\"变量、对象与内存\"></a>变量、对象与内存</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量（名）表示了变量的值存储位置（从这个位置往后数多少节，用以保存这个变量，以其数据类型的要求），并且每个变量都有一个类型，决定什么样的值，能存入变量。<br>例如，int x &#x3D;100;<br>类型：静态变量，实例变量（字段，成员变量），数组元素，值参数，引用参数(ref)，输出形参(out) ，局部变量。<br>狭义的变量，指局部变量（其他种类变量都有自己的约定名称，例如，静态变量称为静态字段）<br>局部变量：方法体，函数体内声明的变量。</p>\n<h3 id=\"值类型的变量\"><a href=\"#值类型的变量\" class=\"headerlink\" title=\"值类型的变量\"></a>值类型的变量</h3><p>byte&#x2F;short&#x2F;ushort等<br>值类型的储存：在内存中分配空间存储值。<br>值类型没有实例，实例与变量合而为一了。</p>\n<h3 id=\"引用类型的变量\"><a href=\"#引用类型的变量\" class=\"headerlink\" title=\"引用类型的变量\"></a>引用类型的变量</h3><p>引用类型的储存：储存的是对象的地址。<br>例如：<br>Student stu;(分配四个字节的内存，用来指向实例化对象的地址)<br>stu &#x3D;new Student();（开辟一段内存空间，用于储存Student类中的成员）</p>\n<p>Class Student()<br>{<br>  unit ID;<br>  string name;<br>}</p>\n<h3 id=\"装箱-拆箱\"><a href=\"#装箱-拆箱\" class=\"headerlink\" title=\"装箱&#x2F;拆箱\"></a>装箱&#x2F;拆箱</h3><p>装箱（Boxing）<br>int x&#x3D;100;<br>Object obj &#x3D;x;<br>将栈上的数据搬到堆上，然后将堆上存储这段数据的地址储存到栈上的obj上。<br>拆箱（Unboxing）<br>相反的操作。<br>int y &#x3D;(int)obj;</p>\n<h1 id=\"Method-方法\"><a href=\"#Method-方法\" class=\"headerlink\" title=\"Method(方法)\"></a>Method(方法)</h1><h2 id=\"由来\"><a href=\"#由来\" class=\"headerlink\" title=\"由来\"></a>由来</h2><p>由C++和C语言中的function（函数）演变而来。<br>当函数成为类的成员之后，便变为了方法（或成员函数）。方法永远是类（class）的成员。 </p>\n<h2 id=\"声明与调用\"><a href=\"#声明与调用\" class=\"headerlink\" title=\"声明与调用\"></a>声明与调用</h2><p>C#声明与定义不分家。<br>声明结构：<br>函数头   函数体<br>函数头：特性  修饰符  （partial）  返回值   函数名  （）<br>    修饰符：有的可以组合<br>静态方法，隶属于类，而非声明的对象。不用实例化即可以调用。<br>例如：<br>Calculator c &#x3D; new Calculator();<br>c.method1();<br>Calculator.method_2();</p>\n<p>Class Calculator<br>{<br> public int method()<br> {<br> return 0;<br> }<br> public static method_2()<br> {<br> return;<br> }<br>}</p>\n<p>parameter：形参<br>argument：实参 </p>\n<h2 id=\"构造函数（构造器-constructor）\"><a href=\"#构造函数（构造器-constructor）\" class=\"headerlink\" title=\"构造函数（构造器&#x2F;constructor）\"></a>构造函数（构造器&#x2F;constructor）</h2><h2 id=\"方法的重载（Overload）\"><a href=\"#方法的重载（Overload）\" class=\"headerlink\" title=\"方法的重载（Overload）\"></a>方法的重载（Overload）</h2><h2 id=\"方法的debug\"><a href=\"#方法的debug\" class=\"headerlink\" title=\"方法的debug\"></a>方法的debug</h2><p>设置断点（breakpoint）<br>观察方法调用时的call stack<br>Step in&#x2F;over&#x2F;out：<br>step in步进。<br>step over直接略过跳过断点的细节操作，执行下一语句。<br>step out跳到断点的上一层级。</p>\n<h2 id=\"方法的调用与栈\"><a href=\"#方法的调用与栈\" class=\"headerlink\" title=\"方法的调用与栈\"></a>方法的调用与栈</h2><p>stack frame:方法被调用的时候，在栈当中的布局。</p>\n<h1 id=\"操作符（Operator）\"><a href=\"#操作符（Operator）\" class=\"headerlink\" title=\"操作符（Operator）\"></a>操作符（Operator）</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>操作符有先后顺序，层级高的先运算，相同层级的从左往右依次运算。<br>赋值和lambda表达式，是从右向左运算（赋值），例如x &#x3D; y;<br>操作符本质是函数的简记，例如3x5可以写为：Mul(3,5);<br>default操作符：获取当前类型的默认值。<br>new操作符：创造实例。 以及创造匿名类型的实例，然后用隐式类型变量引用这个实例。<br>new修饰符：在重写父类方法的时候，可以隐藏父类方法。<br>check操作符：检测程序是否溢出，若溢出则抛出异常。<br>unchecked 操作符：用于禁止溢出检查。它告诉编译器在执行某些可能导致溢出的数学运算时，不要抛出 OverflowException 异常，而是允许溢出发生，并对溢出的结果进行截断或回绕。<br>try-catch:当程序执行到 try 块中的代码时，如果发生了异常（错误），程序会立即跳转到 catch 块，而不会继续执行后续的代码。<br>sizeof操作符：获取结构体数据类型实例，在内存当中的字节数。<br>~操作符：在二进制上进行按位取反。对最小值用负号（-）来取反，得不到最大值，二进制编码取反原理造成的原因。</p>\n<h1 id=\"字段、属性、常量、索引器\"><a href=\"#字段、属性、常量、索引器\" class=\"headerlink\" title=\"字段、属性、常量、索引器\"></a>字段、属性、常量、索引器</h1><h2 id=\"字段（field）\"><a href=\"#字段（field）\" class=\"headerlink\" title=\"字段（field）\"></a>字段（field）</h2><p>表示与对象（类型）关联的变量，是类型的成员，旧称成员变量 。<br>实例字段：与对象相关联。在对象创建时才被初始化。<br>静态字段：与类型相关联，用static修饰。在类型被加载时才被初始化。</p>\n<h2 id=\"属性（property）\"><a href=\"#属性（property）\" class=\"headerlink\" title=\"属性（property）\"></a>属性（property）</h2><p>是用于访问对象或者类型的特征的成员，特征反映了状态。<br>属性是由字段发展而来，是字段的一种拓展。<br>字段：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//旧的写法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Age;</span><br><span class=\"line\"><span class=\"comment\">//get/set的写法</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> age;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">GetAge</span>()<span class=\"comment\">//获取字段的值</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">SetAge</span>(<span class=\"params\"><span class=\"built_in\">int</span> <span class=\"keyword\">value</span></span>)<span class=\"comment\">//设置字段的值</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span>(<span class=\"keyword\">value</span>&gt;=<span class=\"number\">0</span>&amp;&amp;<span class=\"keyword\">value</span>&lt;=<span class=\"number\">120</span>)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age=<span class=\"keyword\">value</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ...</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>属性现在的声明方法：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> age;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> Age</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">get</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">set</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">value</span>&gt;=<span class=\"number\">0</span>&amp;&amp;<span class=\"keyword\">value</span>&lt;=<span class=\"number\">120</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.age=<span class=\"keyword\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>value在get&#x2F;set的语法中，是专属的关键字（上下文关键字），表示传进来的数值。<br>属性，也是一种语法糖，是编译器简化了编译过程。<br>prop&#x2F;propfull：属性声明的简写</p>\n<h2 id=\"索引器\"><a href=\"#索引器\" class=\"headerlink\" title=\"索引器\"></a>索引器</h2><p>…</p>\n<h2 id=\"常量（constant）\"><a href=\"#常量（constant）\" class=\"headerlink\" title=\"常量（constant）\"></a>常量（constant）</h2><p>关键字：const;<br>隶属于，类型而非对象。<br>局部常量，成员常量</p>\n<h2 id=\"各种“只读”\"><a href=\"#各种“只读”\" class=\"headerlink\" title=\"各种“只读”\"></a>各种“只读”</h2><p>常量，只读字段，只读属性，静态只读字段。</p>\n<h1 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h1><h2 id=\"值参数\"><a href=\"#值参数\" class=\"headerlink\" title=\"值参数\"></a>值参数</h2><p>不带任何修饰符的参数。</p>\n<h2 id=\"引用参数\"><a href=\"#引用参数\" class=\"headerlink\" title=\"引用参数\"></a>引用参数</h2><p>用ref修饰符声明的形参。不创建新的储存位置，引用参数所表示的储存位置是调用中作为实参给出变量所表示的储存位置。<br>变量在座位引用参数之前，必须明确赋值。<br>引用修饰符作用，强调该方法会改变传入的变量的值。<br>（难理解，比较绕）</p>\n<h2 id=\"输出形参\"><a href=\"#输出形参\" class=\"headerlink\" title=\"输出形参\"></a>输出形参</h2><p>用out修饰符声明的形参，输出形参不创建新的储存位置，表示的储存位置恰是该方法调用中作为实参给出的那个变量所表示的储存位置。<br>会产生除return之外的额外返回值。<br>PS：params关键字<br>int res &#x3D; Cal(1,2,3);<br>static int Cal(params int[] intArray)<br>{<br> …<br>}<br>params会自动声明，只需要输入数值即可。</p>\n<h2 id=\"具名调用\"><a href=\"#具名调用\" class=\"headerlink\" title=\"具名调用\"></a>具名调用</h2><p>Printinfo(age:34,name:”Tim”);<br>Static void Printinfo(string name,int age)<br>{<br> …<br>}</p>\n<h2 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h2><p>Printinfo();<br>Static void Printinfo(string name&#x3D;”Tim”,int age&#x3D;34)</p>\n<h2 id=\"扩展方法（This\"><a href=\"#扩展方法（This\" class=\"headerlink\" title=\"扩展方法（This)\"></a>扩展方法（This)</h2><p>扩展方法必须是public static<br>方法中的第一个参数必须被this修饰<br>必须由静态类（static）进行收纳</p>\n<p>x作为Round方法的第一个参数（double intput），因此仅需要输入第二个参数即可。<br>在double intput前加上this之后，所有double类型的值均可以使用这个方法。<br><code>double x =3.14159; double y =x.Round(4); static class DoubleExtension &#123;  public static double Round(this double input,int digits) &#123;  ... &#125; &#125;</code></p>\n<p>LINQ方法：</p>\n<h2 id=\"委托（delegate）\"><a href=\"#委托（delegate）\" class=\"headerlink\" title=\"委托（delegate）\"></a>委托（delegate）</h2><p>是（C&#x2F;C++）函数指针的“升级版”、<br>变量（数据）是以某个地址为起点的一段内存中所存储的值；<br>变量，是寻找数据的地址。<br>函数（算法）是以某个地址为起点的一段内存中所存储的一组机器语言指令；<br>函数，是寻找算法的地址。<br>直接调用与间接调用：<br>直接调用：通过函数名来调用函数，CPU通过函数名获取函数所在地址。<br>间接调用：通过函数指针调用函数，CPU通过读取函数指针存储的值，获取函数所在地址。</p>\n<h3 id=\"Action委托实例\"><a href=\"#Action委托实例\" class=\"headerlink\" title=\"Action委托实例\"></a>Action委托实例</h3><p>Action委托：无返回值的委托类型。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span>]</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">&#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"> Calculator calculator = <span class=\"keyword\">new</span> Calculator(</span>)</span>;</span><br><span class=\"line\"> Action action = <span class=\"keyword\">new</span> Action(calculator.Report);</span><br><span class=\"line\"> <span class=\"comment\">//calculator.Report不需要加()，因为只是需要方法名的地址，而不是需要调用它。</span></span><br><span class=\"line\"> calculator.Report();</span><br><span class=\"line\"> action.Invoke();</span><br><span class=\"line\"> action();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Report</span>()</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Console. WriteLine(<span class=\"string\">&quot;I have 3 methods.&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Func委托实例\"><a href=\"#Func委托实例\" class=\"headerlink\" title=\"Func委托实例\"></a>Func委托实例</h3><p>有返回值的委托</p>\n<h3 id=\"委托的声明\"><a href=\"#委托的声明\" class=\"headerlink\" title=\"委托的声明\"></a>委托的声明</h3><p>委托是一种类（Class），但是声明方式和一般的类不同。<br>注意声明委托的位置：命名空间下，类&#x2F;主函数之外，避免写错地方形成嵌套类型</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DelegateExample</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"built_in\">double</span> <span class=\"title\">Calc</span>(<span class=\"params\"><span class=\"built_in\">double</span> x, <span class=\"built_in\">double</span> y</span>)</span>;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   Calculator calculator = <span class=\"keyword\">new</span> Calculator();</span><br><span class=\"line\">   Calc calc1 = <span class=\"keyword\">new</span> Calc(calculator.Add); </span><br><span class=\"line\">   Calc calc2 = <span class=\"keyword\">new</span> Calc(calculator.Sub);</span><br><span class=\"line\">   Calc calc3 = <span class=\"keyword\">new</span> Calc(calculator. Mul);</span><br><span class=\"line\">   Calc calc4 = <span class=\"keyword\">new</span> Calc(calculator.Div);</span><br><span class=\"line\">   <span class=\"built_in\">double</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\">   <span class=\"built_in\">double</span> b = <span class=\"number\">200</span>;</span><br><span class=\"line\">   <span class=\"built_in\">double</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">   c = calc1.Invokola, b);</span><br><span class=\"line\">   Console. WriteLine[c];</span><br><span class=\"line\">   c = calc2.Invoke(a, b);</span><br><span class=\"line\">   Console. WriteLine(c);</span><br><span class=\"line\">   c = calc3.Invoke(a, b);</span><br><span class=\"line\">   Console. WriteLine(c);</span><br><span class=\"line\">   c = calc4.Invoke(a, b);</span><br><span class=\"line\">   Console. WriteLine(c);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Calculator</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"委托的使用\"><a href=\"#委托的使用\" class=\"headerlink\" title=\"委托的使用\"></a>委托的使用</h3><p>1.把方法当作参数传给另外一个方法。<br>模板方法，“借用”指定的外部方法，来产生结果<br>相当于“填空题”，委托也有返回值，除了委托部分不确定，其他部分都是确定的。<br>2.回调（callback）方法，调用指定的外部方法<br>相当于“流水线”，委托不需要有返回值。你可以从许多方法中选择自己需要的委托方法。</p>\n<h3 id=\"委托使用的案例\"><a href=\"#委托使用的案例\" class=\"headerlink\" title=\"委托使用的案例\"></a>委托使用的案例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DelegateExample</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\"> <span class=\"title\">static</span> <span class=\"title\">void</span> <span class=\"title\">Main</span>(<span class=\"title\">string</span>[] <span class=\"title\">args</span>]</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   ProductFactory productFactory = <span class=\"keyword\">new</span> ProductFactory[);</span><br><span class=\"line\">   WrapFactory wrapFactory = <span class=\"keyword\">new</span> WrapFactory[];</span><br><span class=\"line\">   Func&lt;Product&gt; func1 = <span class=\"keyword\">new</span> Func&lt;Product&gt;(productFactory.MakePizza);</span><br><span class=\"line\">   Func&lt;Product&gt; func2 = <span class=\"keyword\">new</span> Func&lt;Product&gt;(productFactory.MakeToyCar);</span><br><span class=\"line\">   Logger logger =<span class=\"keyword\">new</span> Logger();</span><br><span class=\"line\">   Action&lt;Product&gt; log = <span class=\"keyword\">new</span> Action&lt;Product&gt;(logger.Log);</span><br><span class=\"line\">   Box box1 = wrapFactory.WrapProduct(func1,log);</span><br><span class=\"line\">   Box box2 = wrapFactory.WrapProduct(func2,log);</span><br><span class=\"line\">   Console. WriteLine(box1.Product.Name];</span><br><span class=\"line\">   Console. WriteLine(box2.Product.Name];</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Product</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name&#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Box</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Product Product&#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">WrapFactory</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Box <span class=\"title\">WrapProduct</span>(<span class=\"params\">Func&lt;Product&gt; getProduct</span>)</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   Box box=<span class=\"keyword\">new</span> Box():</span><br><span class=\"line\">   Product product=getProduct.Invoke();</span><br><span class=\"line\">   box.Product=product;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> box;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ProductFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">MakePizza</span>()</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Product product=<span class=\"keyword\">new</span> Product[];</span><br><span class=\"line\">  product.Name= <span class=\"string\">&quot;Pizza&quot;</span>:</span><br><span class=\"line\">  <span class=\"keyword\">return</span> product;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">MakeToyCar</span>()</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Product product=<span class=\"keyword\">new</span> Product[];</span><br><span class=\"line\">  product.Name = <span class=\"string\">&quot;Toy Car&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> product;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"回调Callback方法案例\"><a href=\"#回调Callback方法案例\" class=\"headerlink\" title=\"回调Callback方法案例\"></a>回调Callback方法案例</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DelegateExample</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\"> <span class=\"title\">static</span> <span class=\"title\">void</span> <span class=\"title\">Main</span>(<span class=\"title\">string</span>[] <span class=\"title\">args</span>]</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  ProductFactory productFactory = <span class=\"keyword\">new</span> ProductFactory[);</span><br><span class=\"line\">  WrapFactory wrapFactory = <span class=\"keyword\">new</span> WrapFactory[];</span><br><span class=\"line\">  Func&lt;Product&gt; func1 = <span class=\"keyword\">new</span> Func&lt;Product&gt;(productFactory.MalkePizza)</span><br><span class=\"line\">  Func&lt;Product&gt; func2 = <span class=\"keyword\">new</span> Func&lt;Product&gt;(productFactory.MaakeToyCar)</span><br><span class=\"line\">  Box box1 = wrapFactory.WrapProduct(func1);</span><br><span class=\"line\">  Box box2 = wrapFactory.WrapProduct(func2);</span><br><span class=\"line\">  Console. WriteLine(box1.Product.Name];</span><br><span class=\"line\">  Console. WriteLine(box2.Product.Name];</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Logger</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Log</span>(<span class=\"params\">Product product</span>)</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   Console.WriteLine(<span class=\"string\">&quot;Product&#123;0&#125;...&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Product</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name&#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Price&#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Box</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Product Product&#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">WrapFactory</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Box <span class=\"title\">WrapProduct</span>(<span class=\"params\">Func&lt;Product&gt;getProduct,Action&lt;Product&gt;logCallback</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Box box=newBox():</span><br><span class=\"line\">  Product product=getProduct.Invoke();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(product.Price&gt;=<span class=\"number\">50</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   logCallback(product);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  box.Product=product;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> box;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ProductFactory</span></span><br><span class=\"line\"> <span class=\"title\">public</span> <span class=\"title\">Product</span> <span class=\"title\">MakePizza</span>()</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Product product=<span class=\"keyword\">new</span> Product[];</span><br><span class=\"line\">  product.Name= <span class=\"string\">&quot;Pizza&quot;</span>;</span><br><span class=\"line\">  product.Price=<span class=\"number\">12</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> product;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Product <span class=\"title\">MakeToyCar</span>()</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Product product=<span class=\"keyword\">new</span> Product[];</span><br><span class=\"line\">  product.Name = <span class=\"string\">&quot;Toy Car&quot;</span>;</span><br><span class=\"line\">  product.Price=<span class=\"number\">100</span>; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> product;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"委托使用的注意点\"><a href=\"#委托使用的注意点\" class=\"headerlink\" title=\"委托使用的注意点\"></a>委托使用的注意点</h3><p>委托是一种方法级别的耦合，现实工作中要慎之又慎；<br>委托使用不当，会使可读性下降、debug难度增加；<br>把委托回调、异步调用、多线程纠缠在一起，会将代码变得难以阅读和维护；<br>委托使用不当可能造成内存泄漏和程序性能下降。（被占用的内存无法被释放）</p>\n<h3 id=\"多播委托（multicast）\"><a href=\"#多播委托（multicast）\" class=\"headerlink\" title=\"多播委托（multicast）\"></a>多播委托（multicast）</h3><p>一个委托内部，封装了不止一个方法。 </p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span>]</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"> &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  Student stu1 = <span class=\"keyword\">new</span> Student(</span>)</span> &#123;ID = <span class=\"number\">1</span>, PenColor = ConsoleColorYellow&#125;</span><br><span class=\"line\">  Student stu2 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">2</span>, PenColor = ConsoleColorGreen&#125;</span><br><span class=\"line\">  Student stu3 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">3</span>, PenColor = ConsoleColor.Red &#125; </span><br><span class=\"line\">  Action action1 = <span class=\"keyword\">new</span> Action(stu1.DoHomework);</span><br><span class=\"line\">  Action action2 = <span class=\"keyword\">new</span> Action(stu2.DoHomework);</span><br><span class=\"line\">  Action action3 = <span class=\"keyword\">new</span> Action(stu3.DoHomework];</span><br><span class=\"line\">  action1 += action2;</span><br><span class=\"line\">  action1 += action3;</span><br><span class=\"line\">  action1.Invoke();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式异步调用\"><a href=\"#隐式异步调用\" class=\"headerlink\" title=\"隐式异步调用\"></a>隐式异步调用</h3><ul>\n<li>同步与异步<br>同步：你做完了，我在你做的基础之上接着做。<br>异步：我们俩同时做。（同步进行）</li>\n<li>同步调用与异步调用<br>每个程序都是一个进程（process）<br>每个进程可以有多个线程（Thread）<br>同步调用是在同一线程内，异步调用底层机理是多线程</li>\n<li>隐式多线程与显示多线程<br>直接同步调用：直接通过方法名调用；<br>间接同步调用：使用委托进行；<br>隐式异步调用：使用委托的异步调用方法；<br>例子：<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\"><span class=\"title\">static</span> <span class=\"title\">void</span> <span class=\"title\">Main</span>[<span class=\"title\">string</span>[] <span class=\"title\">args</span>]</span><br><span class=\"line\"><span class=\"title\">Student</span> <span class=\"title\">stu1</span> = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">1</span>, PenColor = ConsoleCColor. Yellow</span><br><span class=\"line\">Student stu2 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">2</span>, PenColor = ConsoleCColor.Green</span><br><span class=\"line\">Student stu3 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">3</span>, PenColor = ConsoleCColor.Red</span><br><span class=\"line\">Action action1 = <span class=\"keyword\">new</span> Action(stu1.DoHomework];</span><br><span class=\"line\">Action action2=<span class=\"keyword\">new</span> Action(stu2.DoHomework);</span><br><span class=\"line\">Action action3 = <span class=\"keyword\">new</span> Action[stu3.DoHomework];</span><br><span class=\"line\">action1.BeginInvoke(<span class=\"literal\">null</span>,<span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"comment\">//生成一个分支线程。在分支线程里面调用方法。参数1：调用完之后的后续操作。</span></span><br><span class=\"line\"><span class=\"comment\">//.NET库不支持begininvoke，改用await Task.Run(Action1);</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">Console.Foreground Color = ConsoleColor.Cyan;</span><br><span class=\"line\">Console.WriteLine[<span class=\"string\">&quot;Main thread &#123;0&#125;.&quot;</span>. i];</span><br><span class=\"line\">Thread.Sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>显式异步调用：使用Thread或者Task；</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student stu1 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">1</span>, PenColor = ConsoleCColor. Yellow</span><br><span class=\"line\"></span><br><span class=\"line\">Student stu2 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">2</span>, PenColor = ConsoleCColor.Green</span><br><span class=\"line\"></span><br><span class=\"line\">Student stu3 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">3</span>, PenColor = ConsoleColor.Red</span><br><span class=\"line\"></span><br><span class=\"line\">Thread thread1 = <span class=\"keyword\">new</span> Thread[<span class=\"keyword\">new</span> ThreadStart(stu1.DoHomework)];</span><br><span class=\"line\"></span><br><span class=\"line\">Thread thread2 = <span class=\"keyword\">new</span> Thread[<span class=\"keyword\">new</span> ThreadStart(stu2.DoHomework)]</span><br><span class=\"line\"></span><br><span class=\"line\">Thread thread3 = <span class=\"keyword\">new</span> Thread[<span class=\"keyword\">new</span> ThreadStart(stu3.DoHomework)]</span><br><span class=\"line\"></span><br><span class=\"line\">thread1.Start();</span><br><span class=\"line\"></span><br><span class=\"line\">thread2.Start();</span><br><span class=\"line\"></span><br><span class=\"line\">thread3.Start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student stu1 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">1</span>, PenColor = ConsoleColor. Yellow</span><br><span class=\"line\"></span><br><span class=\"line\">Student stu2 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">2</span>, PenColor = ConsoleColorGreen&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student stu3 = <span class=\"keyword\">new</span> Student() &#123;ID = <span class=\"number\">3</span>, PenColor = ConsoleColor.FRed</span><br><span class=\"line\"></span><br><span class=\"line\">Task task1 = <span class=\"keyword\">new</span> Task[<span class=\"keyword\">new</span> Action[stu1.DoHomework]];</span><br><span class=\"line\"></span><br><span class=\"line\">Task task2 = <span class=\"keyword\">new</span> Task[<span class=\"keyword\">new</span> Action[stu2.DoHomework]];</span><br><span class=\"line\"></span><br><span class=\"line\">Task task3 = <span class=\"keyword\">new</span> Task(<span class=\"keyword\">new</span> Action(stu3.DoHomework));</span><br><span class=\"line\"></span><br><span class=\"line\">task1.Start();</span><br><span class=\"line\"></span><br><span class=\"line\">task2.Start():</span><br><span class=\"line\"></span><br><span class=\"line\">task3.Start[]:</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>适当的使用接口（interface）取代对委托的使用</li>\n<li>接口可以取代委托的作用。</li>\n</ul>\n<h1 id=\"事件（Event）\"><a href=\"#事件（Event）\" class=\"headerlink\" title=\"事件（Event）\"></a>事件（Event）</h1><p>事件是，使对象或类具备通知能力的成员（to provide notification）。<br>事件主要用于，对象或类之间的动作协调与信息传递（消息推送）。</p>\n<p>事件参数（Event Args）<br>响应事件 </p>\n<h2 id=\"事件模型的五个组成部分\"><a href=\"#事件模型的五个组成部分\" class=\"headerlink\" title=\"事件模型的五个组成部分\"></a>事件模型的五个组成部分</h2><ul>\n<li>事件拥有者（event source ， 对象）</li>\n<li>事件成员（event ，成员）</li>\n<li>时间的响应者（event subscriber ， 对象）</li>\n<li>事件处理器（event handler ， 成员）</li>\n<li>事件订阅——把事件处理器与事件进行关联，本质是一种以委托类型为基础的“约定”。</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Timers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">EventStudy</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Timer timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">            timer.Interval = <span class=\"number\">1000</span>;</span><br><span class=\"line\">            Boy boy = <span class=\"keyword\">new</span> Boy();</span><br><span class=\"line\">            timer.Elapsed += boy.Action;</span><br><span class=\"line\">            timer.Start();</span><br><span class=\"line\">            Console.ReadLine();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Boy</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, ElapsedEventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Jump!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Timers;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">EventStudy</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Form form =<span class=\"keyword\">new</span> Form();</span><br><span class=\"line\">            Controller controller=<span class=\"keyword\">new</span> Controller(form);</span><br><span class=\"line\">            form.ShowDialog();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Form form;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Controller</span>(<span class=\"params\">Form form</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.form = form;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.form.Click += <span class=\"keyword\">this</span>.FormClick;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">FormClick</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.form.Text = DateTime.Now.ToString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Timers;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">EventStudy</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MyForm form = <span class=\"keyword\">new</span> MyForm();</span><br><span class=\"line\">            form.Click += form.FormClick;</span><br><span class=\"line\">            form.ShowDialog();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">MyForm</span> : <span class=\"title\">Form</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">void</span> <span class=\"title\">FormClick</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Text = DateTime.Now.ToString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最常用用法：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Timers;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">EventStudy</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MyForm form = <span class=\"keyword\">new</span> MyForm();</span><br><span class=\"line\">            form.ShowDialog();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">MyForm</span> : <span class=\"title\">Form</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> TextBox textBox;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Button button;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyForm</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.textBox = <span class=\"keyword\">new</span> TextBox();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.button = <span class=\"keyword\">new</span> Button();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Controls.Add(textBox);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.Controls.Add(button);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.button.Click += <span class=\"keyword\">this</span>.ButtonClicked;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ButtonClicked</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.textBox.Text = <span class=\"string\">&quot;Hello ,World!!!!!!!!&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件的声明\"><a href=\"#事件的声明\" class=\"headerlink\" title=\"事件的声明\"></a>事件的声明</h2><p>完整声明</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Timers;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Windows.Forms;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">EventStudy</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Customer customer = <span class=\"keyword\">new</span> Customer();</span><br><span class=\"line\">            Waiter waiter = <span class=\"keyword\">new</span> Waiter();</span><br><span class=\"line\">            customer.Order += waiter.Action;</span><br><span class=\"line\">            Console.ReadLine();</span><br><span class=\"line\">            customer.Think();</span><br><span class=\"line\">            customer.Paythebill();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OrderEventArgs</span> : <span class=\"title\">EventArgs</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> DishName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Size &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">OrderEventHandler</span>(<span class=\"params\">Customer customer, OrderEventArgs e</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> OrderEventHandler orderEventHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> OrderEventHandler Order</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">add</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.orderEventHandler += <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">remove</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.orderEventHandler -= <span class=\"keyword\">value</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">double</span> Bill &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Paythebill</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;I will pay $&#123;0&#125;&quot;</span>, <span class=\"keyword\">this</span>.Bill);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Think</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            OrderEventArgs e = <span class=\"keyword\">new</span> OrderEventArgs();</span><br><span class=\"line\">            e.DishName = <span class=\"string\">&quot;baga&quot;</span>;</span><br><span class=\"line\">            e.Size = <span class=\"string\">&quot;large&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.orderEventHandler.Invoke(<span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Waiter</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Action</span>(<span class=\"params\">Customer customer, OrderEventArgs e</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;I will serve you the dish : &#123;0&#125;&quot;</span>, e.DishName);</span><br><span class=\"line\">            <span class=\"built_in\">double</span> price = <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (e.Size)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;small&quot;</span>:</span><br><span class=\"line\">                    price = price * <span class=\"number\">0.5</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;large&quot;</span>:</span><br><span class=\"line\">                    price = price * <span class=\"number\">1.5</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"literal\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            customer.Bill = price;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>简略声明（Field-like）<br>语法糖。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">event</span> OrderEventHandler Order;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Think</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    OrderEventArgs e = <span class=\"keyword\">new</span> OrderEventArgs();</span><br><span class=\"line\">    e.DishName = <span class=\"string\">&quot;baga&quot;</span>;</span><br><span class=\"line\">    e.Size = <span class=\"string\">&quot;large&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.Order.Invoke(<span class=\"keyword\">this</span>, e);</span><br><span class=\"line\">    <span class=\"comment\">//简略后，用事件代替为之前的字段。</span></span><br><span class=\"line\">    <span class=\"comment\">//而在完整版的代码中，事件只能用来+=（订阅）运算。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事件，让程序更加有逻辑，对象之间的关系更清晰。<br>委托是方法与方法之间的强关联，事件是对象与对象之间。而委托可能造成，不同对象，对同一个方法进行滥用。<br>事件，只能访问事件的订阅操作，而想访问事件的其他层面则不允许。而委托，可以设定传入委托的具体参数和返回值。<br>事件的本质，是委托字段的包装器，对其进行封装（encapsulation），事件对外界隐藏了委托实例的大部分功能，而只能对其进行订阅。<br>protected,dynamic,partial，virtual</p>\n<h1 id=\"类（class）\"><a href=\"#类（class）\" class=\"headerlink\" title=\"类（class）\"></a>类（class）</h1><p>构造函数与析构函数<br>析构函数：<code>~Student()&#123;...&#125;</code></p>\n<h2 id=\"类的访问级别修饰符\"><a href=\"#类的访问级别修饰符\" class=\"headerlink\" title=\"类的访问级别修饰符\"></a>类的访问级别修饰符</h2><p>也就是，当其他项目（Aseembly）想要访问当前项目时，该类是否能被引用。<br>public：外部可以引用。<br>internal：仅在该项目内部有效。</p>\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><p>base class （基类）与derived class（派生类）<br>父类与子类<br>一个子类的实例，也是父类的一个实例。（例如，一个类的实例，是这个类的实例，也是object类的实例）<br>sealed：将该类进行封闭，不能再进行继承。<br>C#中一个类只支持一个基类，但是可以支持多个基接口。<br>public与internal修饰的类，需要注意访问级别的层级问题，子类访问级别不能高于父类。<br>在构造基类与派生类时，派生类会对基类的方法等进行改写和重构，如果再想通过该派生类去访问该派生类改写过的基类的方法等，是不行的（已被改写）。<br>父类的实例构造器，不能被子类继承。</p>\n<h2 id=\"类成员的访问\"><a href=\"#类成员的访问\" class=\"headerlink\" title=\"类成员的访问\"></a>类成员的访问</h2><p>protected：将类成员的访问级别，限制在继承链上，protected 的类&#x2F;方法，其子类可以对其进行访问。并且是跨程序集的。可以跟internal修饰符进行组合。</p>\n<h2 id=\"重写与多态（polymorphism）\"><a href=\"#重写与多态（polymorphism）\" class=\"headerlink\" title=\"重写与多态（polymorphism）\"></a>重写与多态（polymorphism）</h2><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Vehicle</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span></span><br><span class=\"line\"><span class=\"function\"> Console.<span class=\"title\">WriteLine</span>(<span class=\"params\"><span class=\"string\">&quot;I&#x27;m running!&quot;</span></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span>: <span class=\"title\">Vehicle</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Console.WriteLine(<span class=\"string\">&quot;Car is running!&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果不加virtual与override，则是子类对父类方法的隐藏。<br>在C#编程中，可以通过父类来声明一个子类的实例，这样做的用意是实现多态，也就是，在父类的引用中存储任何一个子类的对象，从而可以调用不同子类的实现。<strong>（父类的方法或者属性，引用继承链上实例化的子类所带有的最新重写版本）</strong><br>通过父类声明子类实例可以让代码更加通用，尤其是在处理大量继承体系时。<br>在使用父类声明子类的实例时，最终得到的是 子类的实例，尽管变量的类型是父类。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MakeAnimalSound</span>(<span class=\"params\">Animal animal</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    animal.MakeSound();  <span class=\"comment\">// 不管是 Dog 还是 Cat，都会调用各自的 MakeSound 方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Animal dog = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">    Animal cat = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\"></span><br><span class=\"line\">    MakeAnimalSound(dog);  <span class=\"comment\">// 输出: Bark</span></span><br><span class=\"line\">    MakeAnimalSound(cat);  <span class=\"comment\">// 输出: Meow</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Speak</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Animal speaks&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"title\">Animal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">WagTail</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Dog is wagging its tail&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Speak</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Dog barks&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Animal animal = <span class=\"keyword\">new</span> Dog(); <span class=\"comment\">// 父类类型的变量指向子类实例</span></span><br><span class=\"line\">        animal.Name = <span class=\"string\">&quot;Buddy&quot;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        animal.Speak();  <span class=\"comment\">// 输出: Dog barks</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// animal.WagTail();  // 错误，Animal 类中没有 WagTail 方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>属性也可以被重写。</p>\n<h1 id=\"接口、抽象类、SOLID、单元测试和反射\"><a href=\"#接口、抽象类、SOLID、单元测试和反射\" class=\"headerlink\" title=\"接口、抽象类、SOLID、单元测试和反射\"></a>接口、抽象类、SOLID、单元测试和反射</h1><h2 id=\"接口与抽象类\"><a href=\"#接口与抽象类\" class=\"headerlink\" title=\"接口与抽象类\"></a>接口与抽象类</h2><p>算法\\设计原则<br>具体类 → 抽象类 → 接口：越来越抽象，内部实现的东西越来越少。<br>抽象类是未完全实现逻辑的类,（有被实现的部分也就是非abstract部分，也有部分abstract的）</p>\n<h3 id=\"抽象类与开放关闭（开闭）原则\"><a href=\"#抽象类与开放关闭（开闭）原则\" class=\"headerlink\" title=\"抽象类与开放关闭（开闭）原则\"></a>抽象类与开放关闭（开闭）原则</h3><p><strong>抽象类</strong>不允许被实例化，但是可以作为基类。可以通过子类实例引用具体的方法。<br><strong>开闭原则</strong>：没有特别情况（修BUG和增添新功能），尽可能不去修改已经写好的代码。也就是：我们应该封装那些不变的、稳定的、固定的和确定的成员，把那些不确定的、有可能改变的成员声明为抽象成员，并且留给子类去实现。</p>\n<h3 id=\"接口（Interface）与单元测试\"><a href=\"#接口（Interface）与单元测试\" class=\"headerlink\" title=\"接口（Interface）与单元测试\"></a>接口（Interface）与单元测试</h3><ul>\n<li>接口是完全未实现逻辑的“类”，成员全部为public.</li>\n<li>接口为解耦而生，方便单元测试，高内聚，低耦合。</li>\n<li>接口是一个协约（contract）（有分工必有协作，有协作必有协约）</li>\n<li>接口不能被实例化，只能用来声明变量、引用具体类（concrete class）的实例。<br>举例：<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接口-最抽象的类（所有方法等都是abstract）</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">IVehicle</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Stop</span>()</span>;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Fill</span>()</span>;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//基类</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Vehicle : IVehicle</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Stop</span>()</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Console.WriteLine(<span class=\"string\">&#x27;Stopped!&#x27;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Fill</span>()</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Console.WriteLine(<span class=\"string\">&quot;Pay and fill...&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实现类-两个</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> : <span class=\"title\">IVehicle</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Console.WriteLine(<span class=\"string\">&quot;Car is running...&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Truck</span> : <span class=\"title\">IVehicle</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Console.WriteLine(<span class=\"string\">&quot;Truck is running&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n接口在工作中的一般使用方法</li>\n</ul>\n<p>方法\\类之间的依赖或耦合</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[<span class=\"keyword\">args</span>] </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"> &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">  <span class=\"keyword\">var</span> engine = <span class=\"keyword\">new</span> Engine(</span>)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car(engine);</span><br><span class=\"line\">  car.Run(<span class=\"number\">3</span>);</span><br><span class=\"line\">  Console.WriteLine(car.Speed);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Engine与Car类有紧耦合，Car类对Engine类有强依赖</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Engine</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> RPM &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> Work[<span class=\"built_in\">int</span> gas] &#123;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.RPM = <span class=\"number\">1000</span> * gas;</span><br><span class=\"line\"> <span class=\"comment\">//this.RPM = 0;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> Engine engine;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Car</span>(<span class=\"params\">Engine engine</span>)</span> &#123;</span><br><span class=\"line\">  _engine = engine;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Speed &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> Run[<span class=\"built_in\">int</span> gas] &#123;</span><br><span class=\"line\">  _engine.Work(gas);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">this</span>.Speed = engine.RPM / <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口可以降低耦合度（保证给你提供的功能准确无误，可靠的）：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span> &#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>ħ <span class=\"keyword\">args</span></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> PhoneUser(<span class=\"keyword\">new</span> EricssonPhone)<span class=\"comment\">//只需要更改这一个地方，其他地方均不需要改动，因此耦合度低。</span></span><br><span class=\"line\">  user.UsePhone();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">PhoneUser</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _<span class=\"function\">phone</span></span><br><span class=\"line\"><span class=\"function\"> <span class=\"keyword\">public</span> <span class=\"title\">PhoneUser</span>(<span class=\"params\">IPhone phone</span>)</span>&#123;</span><br><span class=\"line\">  _phone = phone;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">UsePhone</span>()</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">IPhone</span>&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">NokiaPhone</span> : <span class=\"title\">IPhone</span>&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">EricssonPhone</span> : <span class=\"title\">IPhone</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"依赖反转-倒置原则（Dependecy-Inversion）：\"><a href=\"#依赖反转-倒置原则（Dependecy-Inversion）：\" class=\"headerlink\" title=\"依赖反转&#x2F;倒置原则（Dependecy Inversion）：\"></a>依赖反转&#x2F;倒置原则（Dependecy Inversion）：</h4><p>之前是一个类依赖于另一个类，可以通过设计，改造为，一个类依赖于一个接口，而接口被依赖于其他类。<br>例如，司机依赖于交通工具接口，而不同种类的运输工具也依赖于交通工具接口。</p>\n<h4 id=\"接口隔离原则（Interface-Seperation）\"><a href=\"#接口隔离原则（Interface-Seperation）\" class=\"headerlink\" title=\"接口隔离原则（Interface Seperation）\"></a>接口隔离原则（Interface Seperation）</h4><p>接口和类的大小也不能太小，要把握好度。<br>接口提供的功能多于功能调用者<br>调用者不能多要功能，也就是调用最小的接口即可。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> Main〔<span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span>) &#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> driver = <span class=\"keyword\">new</span> Driver(<span class=\"keyword\">new</span> Car()<span class=\"comment\">//new Tank())&#125;;</span></span><br><span class=\"line\"> driver.Drive();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Driver</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> IVehicle _vehicle;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Driver</span>(<span class=\"params\">IVehicle vehicle</span>)</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  _vehicle=vehicle;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drive</span>()</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  _vehicle.Run();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">interface</span> <span class=\"title\">IVehicle</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">  <span class=\"keyword\">interface</span> <span class=\"title\">IWeapon</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Fire</span>()</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Car</span> : <span class=\"title\">IVhicle</span>&#123;...&#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Truck</span> : <span class=\"title\">IVhicle</span>&#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">interface</span> <span class=\"title\">ITank</span>:<span class=\"title\">IVehicle</span>, <span class=\"title\">IWeapon</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">LightTank</span> : <span class=\"title\">ITank</span>&#123;...&#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">Medium</span> <span class=\"title\">Tank</span> : <span class=\"title\">ITank</span>&#123;...&#125;</span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title\">HeavyTank</span> : <span class=\"title\">ITank</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"单元测试：\"><a href=\"#单元测试：\" class=\"headerlink\" title=\"单元测试：\"></a>单元测试：</h4><p>在同一个solution下添加新的test project,命名为:<strong>默认名称空间.test</strong>;<br>…</p>\n<h2 id=\"反射、特性和依赖注入（Dependency-Injection）\"><a href=\"#反射、特性和依赖注入（Dependency-Injection）\" class=\"headerlink\" title=\"反射、特性和依赖注入（Dependency Injection）\"></a>反射、特性和依赖注入（Dependency Injection）</h2><h3 id=\"反射（Reflection）\"><a href=\"#反射（Reflection）\" class=\"headerlink\" title=\"反射（Reflection）\"></a>反射（Reflection）</h3><p>是一种设计模式，通过依赖注入实现</p>\n<h3 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h3><p>将<code>Itank tank = new HeavyTank();</code>操作进行区分。<br>因为，当给程序进行升级的时候，很多时候接口后面所引用的实例具体类型需要大量更改，但是有的又不需要，因此，我们通过依赖注入，只需要将注册时候的引用实例类型更改一次即可，并且也可以和仍然需要<code>Itank tank = new HeavyTank();</code>的代码进行区分。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">interface</span> <span class=\"title\">ITank</span>:<span class=\"title\">IVehicle</span>, <span class=\"title\">IWeapon</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">interface</span> <span class=\"title\">IVehicle</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Run</span>()</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">interface</span> <span class=\"title\">IWeapon</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Fire</span>()</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">LightTank</span> : <span class=\"title\">ITank</span>&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Medium</span> <span class=\"title\">Tank</span> : <span class=\"title\">ITank</span>&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">HeavyTank</span> : <span class=\"title\">ITank</span>&#123;...&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> Main〔<span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span>] </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//注册。</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sc = <span class=\"keyword\">new</span> ServiceCollection();</span><br><span class=\"line\">  sc.AddScoped(<span class=\"keyword\">typeof</span>(ITank), <span class=\"keyword\">typeof</span>(Medium Tank)&#125;;</span><br><span class=\"line\">  <span class=\"comment\">//使用依赖注入后，只需要在这里更改ITank类引用的具体实例</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sp = sc.<span class=\"function\">BuildService <span class=\"title\">Provider</span>()</span>;</span><br><span class=\"line\">  <span class=\"comment\">//以下，是进行前台运行操作。</span></span><br><span class=\"line\">  ITank tank=sp.GetService&lt;lTank&gt;();</span><br><span class=\"line\">  tank.Fire();</span><br><span class=\"line\">  tank.Run();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> Main〔<span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span>] </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//注册。</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> sc = <span class=\"keyword\">new</span> ServiceCollection();</span><br><span class=\"line\">  sc.AddScoped(<span class=\"keyword\">typeof</span>(IVehicle), <span class=\"keyword\">typeof</span>(Medium Tank)&#125;;</span><br><span class=\"line\">  sc.AddScoped&lt;Driver&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sp = sc.<span class=\"function\">BuildService <span class=\"title\">Provider</span>()</span>;</span><br><span class=\"line\">  <span class=\"comment\">//以下，是进行前台运行操作。</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> driver=sp.GetService&lt;Driver&gt;();</span><br><span class=\"line\">  <span class=\"comment\">//当我们创建driver实例的时候，不再需要在构造函数里面去引用具体的类实例。</span></span><br><span class=\"line\">  <span class=\"comment\">//因为Driver类的构造函数中有传入参数的声明（IVehicle），因此DI会在注册列表中去找你的IVihecle，以及与之对应的类。</span></span><br><span class=\"line\">  driver.Drive();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过反射实现更松的耦合\"><a href=\"#通过反射实现更松的耦合\" class=\"headerlink\" title=\"通过反射实现更松的耦合\"></a>通过反射实现更松的耦合</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Runtime.Loader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ReflectionStudy</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine();</span><br><span class=\"line\">            <span class=\"comment\">//在程序路径下创建Animals文件夹</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> folder = Path.Combine(Environment.CurrentDirectory, <span class=\"string\">&quot;Animals&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//获取Animals文件夹里面的文件</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> files = Directory.GetFiles(folder);</span><br><span class=\"line\">            <span class=\"comment\">//创建动物的集合</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> animalTypes = <span class=\"keyword\">new</span> List&lt;Type&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> <span class=\"keyword\">file</span> <span class=\"keyword\">in</span> files)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//将文件夹内的文件整合成一个assembly类型的实例</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> assembly = AssemblyLoadContext.Default.LoadFromAssemblyPath(<span class=\"keyword\">file</span>);</span><br><span class=\"line\">                <span class=\"comment\">//获得assembly里面，每个元素的所有信息（属性和方法等）</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> types = assembly.GetTypes();</span><br><span class=\"line\">                <span class=\"comment\">//将每个符合要求的type类型加到我们需要的type集合当中去。</span></span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> types)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (t.GetMethod(<span class=\"string\">&quot;Voice&quot;</span>) != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        animalTypes.Add(t);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//将animalsType中的动物逐一打印出名字</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; animalTypes.Count; i++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;i + <span class=\"number\">1</span>&#125;</span>。<span class=\"subst\">&#123;animalTypes[i].Name&#125;</span>&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;=========================&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//选择动物，然后判断是否超出范围，没有则为其选择对应的动物</span></span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;Please choose animal:&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">int</span> index = <span class=\"built_in\">int</span>.Parse(Console.ReadLine());</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (index &gt; animalTypes.Count || index &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Console.WriteLine(<span class=\"string\">&quot;No such an animal. Try again!&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;                    </span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"built_in\">int</span> Clicktimes = <span class=\"built_in\">int</span>.Parse(Console.ReadLine());</span><br><span class=\"line\">                <span class=\"comment\">//获取对应动物类型的typeinfo信息，然后创建反射。</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> t = animalTypes[index - <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"comment\">//获取t中，我们需要的方法。</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> m = t.GetMethod(<span class=\"string\">&quot;Voice&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//创建object实例o，并通过它来调用t实例的方法或者属性</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> o = Activator.CreateInstance(t);</span><br><span class=\"line\">                <span class=\"comment\">//将o传给新创建的object，然后触发m所反射的方法</span></span><br><span class=\"line\">                m.Invoke(o, <span class=\"keyword\">new</span> <span class=\"built_in\">object</span>[] &#123; Clicktimes &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Assembly</strong> 类可以加载以下类型的文件：<br>.exe 文件（可执行文件）<br>.dll 文件（动态链接库）<br>.winmd 文件（Windows Metadata 文件）<br>特定平台的程序集（如 .a、.so、.dylib）<br>加载这些文件时，Assembly 类会解析文件中的元数据，并允许你通过反射访问其中的类型、方法等信息。</p>\n<ul>\n<li><strong>.dll文件制作</strong><br>需要另起一个工程，选择class lib。</li>\n<li>** SDK制作**<br>在总解决方案中，添加Interface工程</li>\n<li><strong>制作SDK插件</strong><br>在项目中添加依赖（dependence）中，选择browse，引用即可。</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Animals.Lib2</span> &#123;</span><br><span class=\"line\"> [<span class=\"meta\">Unfinished</span>]</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Cow</span> : <span class=\"title\">IAnimal</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Voice</span>(<span class=\"params\"><span class=\"built_in\">int</span> times</span>)</span> </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (inti=<span class=\"number\">0</span>; i &lt; times; i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Moo!&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>Attribute</strong><br>在制作插件的过程中，未完成的部分，用[Unfinished]标注，最后在主程序这边会过滤掉。<br>前提是，在SDK接口开发中，声明一个Unfinished的特性，声明如下：<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">BabyStroller.SDK</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UnfinishedAttribute</span> : <span class=\"title\">Attribute</span> &#123;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>if continue</p>\n<p>当我们采用接口和SDK了之后，代码会发生改动<br>比如过滤无效类型：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> t <span class=\"keyword\">in</span> types) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (t.GetInterfaces().Contains(<span class=\"keyword\">typeof</span>(IAnimal))) </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isUnfinished = t.GetCustomAttributes(<span class=\"literal\">false</span>).Any(a   =&gt; a.GetType() == <span class=\"keyword\">typeof</span>(UnfinishedAttribute)&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isUnfinished) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">  animalTypes.Add(t);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以及最调用时：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> times = <span class=\"built_in\">int</span>.Parse(Console.ReadLine()&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> t = animalTypes[index - <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> m = t.GetMethod(<span class=\"string\">&quot;Voice&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = Activator.Createlnstance(t);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = o <span class=\"keyword\">as</span> IAnimal;</span><br><span class=\"line\">a.Voice(times);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>接口<code>IAnimal</code> 定义了 <code>Voice </code>方法签名，例如：</p>\n</blockquote>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IAnimal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Voice</span>(<span class=\"params\"><span class=\"built_in\">int</span> times</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类实现接口：<br>假设有一个类<code>Dog</code>实现了 IAnimal 接口，并提供了 Voice 方法的实现：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"title\">IAnimal</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Voice</span>(<span class=\"params\"><span class=\"built_in\">int</span> times</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;The dog barks <span class=\"subst\">&#123;times&#125;</span> times.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个类实现了 IAnimal 接口，提供了 Voice 方法的具体实现。<br><code>var o = Activator.CreateInstance(t);</code><br>o 是 Dog 类型的实例（如果 t 是 Dog）。此时，o 既是 Dog 类型的对象，也是 IAnimal 类型的对象，因为 Dog 实现了 IAnimal 接口。<br>接口转换和方法调用：你将 o 强制转换为 IAnimal 类型：<br><code>var a = o as IAnimal;</code><br>如果 o 实现了 IAnimal 接口，转换会成功，a 就变成了一个 IAnimal 类型的引用，指向 o。然后你可以调用 a.Voice(times)，实际上是在调用 Dog 类中实现的 Voice 方法。</p>\n<h1 id=\"泛型、partial类、枚举、结构体\"><a href=\"#泛型、partial类、枚举、结构体\" class=\"headerlink\" title=\"泛型、partial类、枚举、结构体\"></a>泛型、partial类、枚举、结构体</h1><h2 id=\"泛型（generic）\"><a href=\"#泛型（generic）\" class=\"headerlink\" title=\"泛型（generic）\"></a>泛型（generic）</h2><p>为什么需要泛型：避免成员膨胀或者类型膨胀<br>正交性：泛型类型（类&#x2F;接口&#x2F;委托&#x2F;…）、泛型成员（属性&#x2F;方法&#x2F;字段&#x2F;…） </p>\n<h3 id=\"泛型类型\"><a href=\"#泛型类型\" class=\"headerlink\" title=\"泛型类型\"></a>泛型类型</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>) <span class=\"keyword\">args</span>)</span> &#123;</span><br><span class=\"line\">  Apple apple=<span class=\"keyword\">new</span> AppleO&#123;Color= <span class=\"string\">&quot;Red&quot;</span>&#125;;</span><br><span class=\"line\">  Book book = <span class=\"keyword\">new</span> BookO &#123;Name = <span class=\"string\">&quot;New Book&quot;</span>&#125;;</span><br><span class=\"line\">  Box&lt;Apple&gt; box1 = <span class=\"keyword\">new</span> Box&lt;Apple&gt;()&#123;Cargo = apple&#125;;</span><br><span class=\"line\">  Box&lt;Book&gt; box2=<span class=\"keyword\">new</span> Box&lt;Book&gt;Q&#123;Cargo = book&#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Color &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span>&lt;<span class=\"title\">TCargo</span>&gt;&#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> TCargo Cargo &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"泛型接口\"><a href=\"#泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>) <span class=\"keyword\">args</span>)</span> &#123;</span><br><span class=\"line\">  Student&lt;<span class=\"built_in\">int</span>&gt; stu = <span class=\"keyword\">new</span> Student&lt;<span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">  stu.ID = <span class=\"number\">101</span>;</span><br><span class=\"line\">  stu.Name= <span class=\"string\">&quot;Timothy&quot;</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title\">IUnique</span>&lt;<span class=\"title\">Tld</span>&gt; &#123;</span><br><span class=\"line\"> TId ID&#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span>&lt;<span class=\"title\">TId</span>&gt;:<span class=\"title\">lUnique</span>&lt;<span class=\"title\">TId</span>&gt; &#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> TId ID &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"泛型集合\"><a href=\"#泛型集合\" class=\"headerlink\" title=\"泛型集合\"></a>泛型集合</h3><p>带有一个类型参数的泛型类型</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span> &#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span> &#123;</span><br><span class=\"line\"> IList&lt;<span class=\"built_in\">int</span>&gt; list = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">  list.Add(i);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> list) &#123;</span><br><span class=\"line\">  Console.WriteLine(item);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>带有两个类型参数的泛型类型</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dictionary&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">string</span>&gt; dict = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">string</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型方法\"><a href=\"#泛型方法\" class=\"headerlink\" title=\"泛型方法\"></a>泛型方法</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span>&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>) <span class=\"keyword\">args</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span>[] a1 = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">int</span>[] a2 = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">double</span>[] a3 = &#123;<span class=\"number\">1.1</span>, <span class=\"number\">2.2</span>, <span class=\"number\">3.3</span>, <span class=\"number\">4.4</span>, <span class=\"number\">5.5</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">double</span>[] a4 = &#123;<span class=\"number\">1.1</span>, <span class=\"number\">2.2</span>, <span class=\"number\">3.3</span>, <span class=\"number\">4.4</span>, <span class=\"number\">5.5</span>, <span class=\"number\">6.6</span>&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result=Zip(a1,a2);</span><br><span class=\"line\">  <span class=\"comment\">//var result=Zip(a3,a4);</span></span><br><span class=\"line\">  Console.WriteLine(<span class=\"built_in\">string</span>.Join(<span class=\"string\">&quot;,&quot;</span>, result)&#125;;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//方法：把两个数组组合成一个数组。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> T[] <span class=\"title\">Zip</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T[] a, T[] b</span>)</span>&#123;</span><br><span class=\"line\"> T[] zipped = <span class=\"keyword\">new</span> T[a.Length + b.Length];</span><br><span class=\"line\"> <span class=\"built_in\">int</span> ai = <span class=\"number\">0</span>, bi = <span class=\"number\">0</span>, zi = <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ai &lt; a.Length) zipped[zi++]= a[ai++];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bi &lt; b.Length) zipped[zi++] = b[bi++];</span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> <span class=\"keyword\">while</span> (ai &lt; a.Length || bi &lt; b.Length);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> zipped;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"泛型委托\"><a href=\"#泛型委托\" class=\"headerlink\" title=\"泛型委托\"></a>泛型委托</h3><p>Action泛型委托</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>) <span class=\"keyword\">args</span>)</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//Action泛型委托声明的方式和Action普通委托声明方式有差异。</span></span><br><span class=\"line\">  Action&lt;<span class=\"built_in\">string</span>&gt; a1 = Say;</span><br><span class=\"line\">  <span class=\"comment\">//Action a1 = new Action(Say)</span></span><br><span class=\"line\">  a1();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Say</span>(<span class=\"params\"><span class=\"built_in\">string</span> str</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Console.WriteLine(...);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Mul</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  ...;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Func泛型委托</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>) <span class=\"keyword\">args</span>)</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Func&lt;<span class=\"built_in\">double</span>,<span class=\"built_in\">double</span>,<span class=\"built_in\">double</span>&gt; func1 = Add;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = func1(<span class=\"number\">100</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">  Console.WriteLine(result); </span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"built_in\">int</span> a,<span class=\"built_in\">int</span> b</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  ...;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">double</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"built_in\">double</span> a,<span class=\"built_in\">double</span> b</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  ...;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>泛型委托与lambda表达式：<code>Func&lt;double,double,double&gt; func1 = &#123;a, b&#125;=&gt;&#123;return a+b;&#125;;</code><br>可以简化语句，节省声明方法所可能污染代码的可能。</p>\n<h2 id=\"partial类\"><a href=\"#partial类\" class=\"headerlink\" title=\"partial类\"></a>partial类</h2><p>减少类的派生，当原类会自动更新覆盖等时，把自己添加的方法等放到其他名称空间下，则不会被删除或者重写。</p>\n<p>partial类必须要保证和原类型在同一个名称空间之下。</p>\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>枚举的每个值都有大小，大小也可以自定义设置。<br><code>Console.WriteLine((int)Level.Employee);</code></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">enum</span> Level</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> Employee = <span class=\"number\">100</span>,</span><br><span class=\"line\"> Boss = <span class=\"number\">200</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span><span class=\"doctag\">///</span><span class=\"doctag\">///</span><span class=\"doctag\">///</span><span class=\"doctag\">///</span><span class=\"doctag\">///</span><span class=\"doctag\">///</span><span class=\"doctag\">///</span><span class=\"doctag\">///</span>//</span></span><br><span class=\"line\"><span class=\"built_in\">enum</span> Level</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> Employee = <span class=\"number\">100</span>,</span><br><span class=\"line\"> Boss,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//不给BOSS,额外设定值的话，那么bOSS是101.</span></span><br></pre></td></tr></table></figure>\n<p>枚举的比特位编程</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>) <span class=\"keyword\">args</span>)</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//假设这个人四个技能都会。</span></span><br><span class=\"line\">  person.Skill = Skill.Drive | Skill.Cook| Skill.Program| SkiTeach;</span><br><span class=\"line\">  Console.WriteLine();</span><br><span class=\"line\">  <span class=\"comment\">//按或运算符计算。</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"built_in\">enum</span> Skill </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> Drive = <span class=\"number\">1</span>,</span><br><span class=\"line\"> Cook=<span class=\"number\">2</span>,</span><br><span class=\"line\"> Program=<span class=\"number\">4</span>,</span><br><span class=\"line\"> Teach=<span class=\"number\">8</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> Skill skill;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构体（struct）\"><a href=\"#结构体（struct）\" class=\"headerlink\" title=\"结构体（struct）\"></a>结构体（struct）</h2><p>结构体是值类型，存放值类型数据。<br>装箱与拆箱操作：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>) <span class=\"keyword\">args</span>)</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  Student student = <span class=\"keyword\">new</span> Student(KID = <span class=\"number\">101</span>, Name = <span class=\"string\">&quot;Timtohy223;</span></span><br><span class=\"line\"><span class=\"string\">  object object = student;//装箱</span></span><br><span class=\"line\"><span class=\"string\">  Student student2 = (Student) obj;//拆箱</span></span><br><span class=\"line\"><span class=\"string\">  Console.WriteLine($&quot;</span><span class=\"meta\">#&#123;student2.ID&#125; Name:(student2Name&#125;&quot;)</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> Student </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ID &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结构体对象，进行复制时，是完全复制了其所有数据，而不是只复制了其引用的地址。<br>结构体类型，只能由接口派生。<br>结构体不能拥有显示的无参构造器：<code>public Studnt()&#123;&#125;</code>.（备注，有参的可以。）</p>\n<h1 id=\"LINQ、lambda表达式与委托\"><a href=\"#LINQ、lambda表达式与委托\" class=\"headerlink\" title=\"LINQ、lambda表达式与委托\"></a>LINQ、lambda表达式与委托</h1><h2 id=\"lambda\"><a href=\"#lambda\" class=\"headerlink\" title=\"lambda\"></a>lambda</h2><ul>\n<li>匿名方法</li>\n<li>Inline方法</li>\n</ul>\n<p><strong>泛型委托的类型推断</strong></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//两种表达方式：</span></span><br><span class=\"line\"><span class=\"comment\">//Func&lt;int, int, int&gt; func = new Func&lt;int,int,int&gt;((a, b) =&gt; &#123; return a + b;&#125;);</span></span><br><span class=\"line\">Func&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>&gt; func = (a, b) =&gt; &#123; <span class=\"keyword\">return</span> a + b;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">int</span> res = func(<span class=\"number\">100</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">Console.WriteLine(res);</span><br><span class=\"line\">func=(x,y)=&gt;&#123;returnx</span><br><span class=\"line\">res = func(<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br><span class=\"line\">y;&#125;;</span><br><span class=\"line\">Console.WriteLine(res);</span><br></pre></td></tr></table></figure>\n<p>另外一种使用方式：</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] <span class=\"keyword\">args</span></span>)</span> </span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  DoSomeCalc&lt;<span class=\"built_in\">int</span>&gt;((<span class=\"built_in\">int</span> a, <span class=\"built_in\">int</span> b) =&gt; (<span class=\"keyword\">return</span> a b; &#125;, <span class=\"number\">100</span>,<span class=\"number\">200</span>);</span><br><span class=\"line\">  <span class=\"comment\">//高级写法：</span></span><br><span class=\"line\">  <span class=\"comment\">//DoSomeCalc((a,b) =&gt; (return a b; &#125;, 100,200);</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DoSomeCalc</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">Func&lt;T, T, T  T&gt; func,T x, Ty</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  T res=func(x,y);</span><br><span class=\"line\">  Console.WriteLine(res);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"LINQ-NET-Language-Integrated-Query\"><a href=\"#LINQ-NET-Language-Integrated-Query\" class=\"headerlink\" title=\"LINQ(.NET Language Integrated Query)\"></a>LINQ(.NET Language Integrated Query)</h2><p>将C#语句转换为sql语句，进行查询，但是sql的查询会更准确，LINQ只是临时简单使用。<br>……..</p>\n</div>"},{"_content":"---\ntitle = 一罐盐音效设计课程\n---\n\n# 完整的音频工作流程\n体验游戏\n音频策划案\n功能策划\n需求表制作\n中间件同步研发\n音频管线\n制作\n混音\nQA\n上线\n\n# 游戏音频三要素\n游戏开发前期，和制作人或者其他同事沟通过程中，通过游戏三要素的沟通同步，能够清晰游戏音频的后续开发方向。\n## 氛围带入\n玩家能感受到情绪，能够沉浸于游戏世界，能感受到情绪的波动。\n开发者：需要将虚拟世界的听觉达到统一；建立情感记忆和反馈（玩家的每一个操作都要能感受到反馈）；能够煽动玩家的情绪。\n游戏更有沉浸感，能让游戏变得更好玩，玩家才会愿意去玩，更有积极性。\n\n## 文化表现\n核心玩法、视听体验、故事\n说白了，风格化，例如：《茶杯头》（滤波器或者降采样等来实现上世纪美国动画复古银色），《空洞骑士》（8bit红白机完全复刻），《银河恶魔城》（切高频）。\n\n## 功能引导\n实现游戏中的目的，是希望玩家紧张，轻松，悬疑，正面负面等等。\n引导玩家购买欲。\n\n# 音频与游戏题材玩法的关系\n关键点：优先级和目的。任何游戏的声音不会十全十美，因此要有着重表现的地方，也就是优先级，而优先级的排序涉及到游戏的开发目的。\n\n- 强调自身动作类：ACT、格斗、魂类、FPSRPG）\n优先级：打击感有关的声音最高\n当打击声与其他声音矛盾时，牺牲其他声音；当声音的现实感（常识）与打击感违背时，牺牲现实感；把最清晰的主频率让给打击感和受击声。\n\n设计上突出的点：\n武器的轻重、材质的不同、角色的差异；\n不同类型的游戏，音效风格不同\n\n- 强调氛围感类（RPG、泛AVG、SIM、艺术感）\n优先级：环境氛围声优先级最高。\n当环境氛围声与其他声音矛盾时，牺牲其他声音；当声音的现实感（常识）与打击感违背时，牺牲现实感；把最清晰的主频率让给环境氛围声。\n\n设计上突出的点：\n还原场景空间：混响延迟等。\n画里与画外：《冰汽时代》中，背景音加上了人的咳嗽声。想象力\n环境的层级细节：性能与表现。\n不同类型的游戏的做法不同。\n《八方旅人》，重剧情，重点在音乐上，环境声不复杂但是也能准确的表达不同场景的声音特点。\n《过山车之星》的分层系统做得很好，模拟经营类侧重环境声和UI声。拉远时和拉近时.... \n\n\n- 强调机械声类（FPS、TPS等枪械类）\n优先级：一切跟枪械打斗有关的声音，包括1p、3p\n\n设计上突出的点：\n还原拟真枪，了解枪械发声原理，知道怎么拆分；设计枪声时基于爽感和功能性，而非现实；了解枪声和距离之间的混响关系。\n设计非拟真枪（科幻）：处理拟真和科幻的主次比例。加上拟真枪设计逻思路。《守望先锋》 \n提前预估游戏功能，实现音频程序和音效的配合：机械总量、游戏人数体量、受击材质；发射距离，游戏地图规模与核心玩法设计（声音的传播距离）。\n除了枪械发射之外的声音的贴合度。 \n\n- 强调UI类（SIM、SLG、休闲）\n优先级：着重设计UI契合度和复杂度。\n\n设计上突出的点：\n分清正反馈和负反馈；\n契合游戏背景世界观（风格化）\n学会使用画外音，脱离UI本身的束缚。《辐射》\n\n- 强调功能与声音引导类（AVG、解密、恐怖）\n优先级：....\n\n设计上突出的点：\n持续性音效不可全频段。\n要学会克制。\n结合游戏玩法进行设计。\n《疑案追声》\n\n## 游戏分析\n- 分析游戏的三要素\n- 分析游戏着重点（可能不止一处）\n清晰，简洁，明了。\n不停的玩游戏，分析，建立参考。将优秀的音频片段可以录频留存。\n游戏分析的具体内容：\n1.游戏概况\n游戏类型、游戏平台、游戏画面、美术风格\n\n2.世界观&游戏设定\n背景故事、核心设定、人物设定\n\n3.三要素\n\n4.着重点（强调点）\n\n5.音效设计\n\n\n# 游戏音频框架\n## 游戏音频管线\n- 音频管线，从游戏概念开始，到玩家听到为止。 \n- 人员分配：\n音频组长：做决定的人\n甲方：检查质量\n团队成员：一群出谋划策的人\n- 了解各种游戏，了解同事、甲方等，得学会团队协作\n\n- 具体的音频部门分配\n1.音效（Sound Effect/SFX/SE）\n2.语音（Voice/VO/VC）\n3.音乐（Music/BGM）\n音效总监：音效导演或者音频老大，Audio Director\n音频部门老大：Audio Lead\n声音管理：Audio Manager/Producer（Project Manager/PM）\n------\n音频技术：Technical Sound Designer\n声音设计：Sound Designer\n拟音师：Foley Artists\n对白编辑：Dialogue Editor\n音乐编辑：Music Editor\n...\n------\n语音：游戏中偏重要的一个部分，特别是MOBA类游戏中\n主角语音（1p,3p）；\n其他角色、怪物、广播、群杂(walla)等。\n音乐：\n有源音乐（点声源类似的意思）\n无源音乐（BGM）：动态音乐（交互音乐的意思）/静态音乐\n\n# 典型音效品类设计\n音频表格\n游戏品类和表格建立。\n每一个游戏都有它的核心品类，\n进行“品类分析”，明确游戏的核心玩法，\n“建立表格”，设立工作流和表格，\n“制作”，根据计划完成游戏声音设计。\n\n## 尼罗河勇士2\n核心关键词：SLG、战旗、俯视角、特殊题材（埃及）、重点关注（游戏特色：石板玩法）\n1.与项目组沟通，做出游戏的mind脑图\n2.根据脑图和demo进行列出游戏音频清单（acb = bank ; cue = event）\n音效制作时，\n\n## 江湖客栈\n","source":"_posts/一罐盐音效设计课程.md","raw":"---\ntitle = 一罐盐音效设计课程\n---\n\n# 完整的音频工作流程\n体验游戏\n音频策划案\n功能策划\n需求表制作\n中间件同步研发\n音频管线\n制作\n混音\nQA\n上线\n\n# 游戏音频三要素\n游戏开发前期，和制作人或者其他同事沟通过程中，通过游戏三要素的沟通同步，能够清晰游戏音频的后续开发方向。\n## 氛围带入\n玩家能感受到情绪，能够沉浸于游戏世界，能感受到情绪的波动。\n开发者：需要将虚拟世界的听觉达到统一；建立情感记忆和反馈（玩家的每一个操作都要能感受到反馈）；能够煽动玩家的情绪。\n游戏更有沉浸感，能让游戏变得更好玩，玩家才会愿意去玩，更有积极性。\n\n## 文化表现\n核心玩法、视听体验、故事\n说白了，风格化，例如：《茶杯头》（滤波器或者降采样等来实现上世纪美国动画复古银色），《空洞骑士》（8bit红白机完全复刻），《银河恶魔城》（切高频）。\n\n## 功能引导\n实现游戏中的目的，是希望玩家紧张，轻松，悬疑，正面负面等等。\n引导玩家购买欲。\n\n# 音频与游戏题材玩法的关系\n关键点：优先级和目的。任何游戏的声音不会十全十美，因此要有着重表现的地方，也就是优先级，而优先级的排序涉及到游戏的开发目的。\n\n- 强调自身动作类：ACT、格斗、魂类、FPSRPG）\n优先级：打击感有关的声音最高\n当打击声与其他声音矛盾时，牺牲其他声音；当声音的现实感（常识）与打击感违背时，牺牲现实感；把最清晰的主频率让给打击感和受击声。\n\n设计上突出的点：\n武器的轻重、材质的不同、角色的差异；\n不同类型的游戏，音效风格不同\n\n- 强调氛围感类（RPG、泛AVG、SIM、艺术感）\n优先级：环境氛围声优先级最高。\n当环境氛围声与其他声音矛盾时，牺牲其他声音；当声音的现实感（常识）与打击感违背时，牺牲现实感；把最清晰的主频率让给环境氛围声。\n\n设计上突出的点：\n还原场景空间：混响延迟等。\n画里与画外：《冰汽时代》中，背景音加上了人的咳嗽声。想象力\n环境的层级细节：性能与表现。\n不同类型的游戏的做法不同。\n《八方旅人》，重剧情，重点在音乐上，环境声不复杂但是也能准确的表达不同场景的声音特点。\n《过山车之星》的分层系统做得很好，模拟经营类侧重环境声和UI声。拉远时和拉近时.... \n\n\n- 强调机械声类（FPS、TPS等枪械类）\n优先级：一切跟枪械打斗有关的声音，包括1p、3p\n\n设计上突出的点：\n还原拟真枪，了解枪械发声原理，知道怎么拆分；设计枪声时基于爽感和功能性，而非现实；了解枪声和距离之间的混响关系。\n设计非拟真枪（科幻）：处理拟真和科幻的主次比例。加上拟真枪设计逻思路。《守望先锋》 \n提前预估游戏功能，实现音频程序和音效的配合：机械总量、游戏人数体量、受击材质；发射距离，游戏地图规模与核心玩法设计（声音的传播距离）。\n除了枪械发射之外的声音的贴合度。 \n\n- 强调UI类（SIM、SLG、休闲）\n优先级：着重设计UI契合度和复杂度。\n\n设计上突出的点：\n分清正反馈和负反馈；\n契合游戏背景世界观（风格化）\n学会使用画外音，脱离UI本身的束缚。《辐射》\n\n- 强调功能与声音引导类（AVG、解密、恐怖）\n优先级：....\n\n设计上突出的点：\n持续性音效不可全频段。\n要学会克制。\n结合游戏玩法进行设计。\n《疑案追声》\n\n## 游戏分析\n- 分析游戏的三要素\n- 分析游戏着重点（可能不止一处）\n清晰，简洁，明了。\n不停的玩游戏，分析，建立参考。将优秀的音频片段可以录频留存。\n游戏分析的具体内容：\n1.游戏概况\n游戏类型、游戏平台、游戏画面、美术风格\n\n2.世界观&游戏设定\n背景故事、核心设定、人物设定\n\n3.三要素\n\n4.着重点（强调点）\n\n5.音效设计\n\n\n# 游戏音频框架\n## 游戏音频管线\n- 音频管线，从游戏概念开始，到玩家听到为止。 \n- 人员分配：\n音频组长：做决定的人\n甲方：检查质量\n团队成员：一群出谋划策的人\n- 了解各种游戏，了解同事、甲方等，得学会团队协作\n\n- 具体的音频部门分配\n1.音效（Sound Effect/SFX/SE）\n2.语音（Voice/VO/VC）\n3.音乐（Music/BGM）\n音效总监：音效导演或者音频老大，Audio Director\n音频部门老大：Audio Lead\n声音管理：Audio Manager/Producer（Project Manager/PM）\n------\n音频技术：Technical Sound Designer\n声音设计：Sound Designer\n拟音师：Foley Artists\n对白编辑：Dialogue Editor\n音乐编辑：Music Editor\n...\n------\n语音：游戏中偏重要的一个部分，特别是MOBA类游戏中\n主角语音（1p,3p）；\n其他角色、怪物、广播、群杂(walla)等。\n音乐：\n有源音乐（点声源类似的意思）\n无源音乐（BGM）：动态音乐（交互音乐的意思）/静态音乐\n\n# 典型音效品类设计\n音频表格\n游戏品类和表格建立。\n每一个游戏都有它的核心品类，\n进行“品类分析”，明确游戏的核心玩法，\n“建立表格”，设立工作流和表格，\n“制作”，根据计划完成游戏声音设计。\n\n## 尼罗河勇士2\n核心关键词：SLG、战旗、俯视角、特殊题材（埃及）、重点关注（游戏特色：石板玩法）\n1.与项目组沟通，做出游戏的mind脑图\n2.根据脑图和demo进行列出游戏音频清单（acb = bank ; cue = event）\n音效制作时，\n\n## 江湖客栈\n","slug":"一罐盐音效设计课程","published":1,"date":"2025-04-21T06:51:05.858Z","updated":"2025-03-02T13:47:41.774Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm9w9inhf0003ncpyc4zb16pm","content":"<div class=\".article-gallery\"><hr>\n<h2 id=\"title-一罐盐音效设计课程\"><a href=\"#title-一罐盐音效设计课程\" class=\"headerlink\" title=\"title &#x3D; 一罐盐音效设计课程\"></a>title &#x3D; 一罐盐音效设计课程</h2><h1 id=\"完整的音频工作流程\"><a href=\"#完整的音频工作流程\" class=\"headerlink\" title=\"完整的音频工作流程\"></a>完整的音频工作流程</h1><p>体验游戏<br>音频策划案<br>功能策划<br>需求表制作<br>中间件同步研发<br>音频管线<br>制作<br>混音<br>QA<br>上线</p>\n<h1 id=\"游戏音频三要素\"><a href=\"#游戏音频三要素\" class=\"headerlink\" title=\"游戏音频三要素\"></a>游戏音频三要素</h1><p>游戏开发前期，和制作人或者其他同事沟通过程中，通过游戏三要素的沟通同步，能够清晰游戏音频的后续开发方向。</p>\n<h2 id=\"氛围带入\"><a href=\"#氛围带入\" class=\"headerlink\" title=\"氛围带入\"></a>氛围带入</h2><p>玩家能感受到情绪，能够沉浸于游戏世界，能感受到情绪的波动。<br>开发者：需要将虚拟世界的听觉达到统一；建立情感记忆和反馈（玩家的每一个操作都要能感受到反馈）；能够煽动玩家的情绪。<br>游戏更有沉浸感，能让游戏变得更好玩，玩家才会愿意去玩，更有积极性。</p>\n<h2 id=\"文化表现\"><a href=\"#文化表现\" class=\"headerlink\" title=\"文化表现\"></a>文化表现</h2><p>核心玩法、视听体验、故事<br>说白了，风格化，例如：《茶杯头》（滤波器或者降采样等来实现上世纪美国动画复古银色），《空洞骑士》（8bit红白机完全复刻），《银河恶魔城》（切高频）。</p>\n<h2 id=\"功能引导\"><a href=\"#功能引导\" class=\"headerlink\" title=\"功能引导\"></a>功能引导</h2><p>实现游戏中的目的，是希望玩家紧张，轻松，悬疑，正面负面等等。<br>引导玩家购买欲。</p>\n<h1 id=\"音频与游戏题材玩法的关系\"><a href=\"#音频与游戏题材玩法的关系\" class=\"headerlink\" title=\"音频与游戏题材玩法的关系\"></a>音频与游戏题材玩法的关系</h1><p>关键点：优先级和目的。任何游戏的声音不会十全十美，因此要有着重表现的地方，也就是优先级，而优先级的排序涉及到游戏的开发目的。</p>\n<ul>\n<li>强调自身动作类：ACT、格斗、魂类、FPSRPG）<br>优先级：打击感有关的声音最高<br>当打击声与其他声音矛盾时，牺牲其他声音；当声音的现实感（常识）与打击感违背时，牺牲现实感；把最清晰的主频率让给打击感和受击声。</li>\n</ul>\n<p>设计上突出的点：<br>武器的轻重、材质的不同、角色的差异；<br>不同类型的游戏，音效风格不同</p>\n<ul>\n<li>强调氛围感类（RPG、泛AVG、SIM、艺术感）<br>优先级：环境氛围声优先级最高。<br>当环境氛围声与其他声音矛盾时，牺牲其他声音；当声音的现实感（常识）与打击感违背时，牺牲现实感；把最清晰的主频率让给环境氛围声。</li>\n</ul>\n<p>设计上突出的点：<br>还原场景空间：混响延迟等。<br>画里与画外：《冰汽时代》中，背景音加上了人的咳嗽声。想象力<br>环境的层级细节：性能与表现。<br>不同类型的游戏的做法不同。<br>《八方旅人》，重剧情，重点在音乐上，环境声不复杂但是也能准确的表达不同场景的声音特点。<br>《过山车之星》的分层系统做得很好，模拟经营类侧重环境声和UI声。拉远时和拉近时…. </p>\n<ul>\n<li>强调机械声类（FPS、TPS等枪械类）<br>优先级：一切跟枪械打斗有关的声音，包括1p、3p</li>\n</ul>\n<p>设计上突出的点：<br>还原拟真枪，了解枪械发声原理，知道怎么拆分；设计枪声时基于爽感和功能性，而非现实；了解枪声和距离之间的混响关系。<br>设计非拟真枪（科幻）：处理拟真和科幻的主次比例。加上拟真枪设计逻思路。《守望先锋》<br>提前预估游戏功能，实现音频程序和音效的配合：机械总量、游戏人数体量、受击材质；发射距离，游戏地图规模与核心玩法设计（声音的传播距离）。<br>除了枪械发射之外的声音的贴合度。 </p>\n<ul>\n<li>强调UI类（SIM、SLG、休闲）<br>优先级：着重设计UI契合度和复杂度。</li>\n</ul>\n<p>设计上突出的点：<br>分清正反馈和负反馈；<br>契合游戏背景世界观（风格化）<br>学会使用画外音，脱离UI本身的束缚。《辐射》</p>\n<ul>\n<li>强调功能与声音引导类（AVG、解密、恐怖）<br>优先级：….</li>\n</ul>\n<p>设计上突出的点：<br>持续性音效不可全频段。<br>要学会克制。<br>结合游戏玩法进行设计。<br>《疑案追声》</p>\n<h2 id=\"游戏分析\"><a href=\"#游戏分析\" class=\"headerlink\" title=\"游戏分析\"></a>游戏分析</h2><ul>\n<li>分析游戏的三要素</li>\n<li>分析游戏着重点（可能不止一处）<br>清晰，简洁，明了。<br>不停的玩游戏，分析，建立参考。将优秀的音频片段可以录频留存。<br>游戏分析的具体内容：<br>1.游戏概况<br>游戏类型、游戏平台、游戏画面、美术风格</li>\n</ul>\n<p>2.世界观&amp;游戏设定<br>背景故事、核心设定、人物设定</p>\n<p>3.三要素</p>\n<p>4.着重点（强调点）</p>\n<p>5.音效设计</p>\n<h1 id=\"游戏音频框架\"><a href=\"#游戏音频框架\" class=\"headerlink\" title=\"游戏音频框架\"></a>游戏音频框架</h1><h2 id=\"游戏音频管线\"><a href=\"#游戏音频管线\" class=\"headerlink\" title=\"游戏音频管线\"></a>游戏音频管线</h2><ul>\n<li><p>音频管线，从游戏概念开始，到玩家听到为止。 </p>\n</li>\n<li><p>人员分配：<br>音频组长：做决定的人<br>甲方：检查质量<br>团队成员：一群出谋划策的人</p>\n</li>\n<li><p>了解各种游戏，了解同事、甲方等，得学会团队协作</p>\n</li>\n<li><p>具体的音频部门分配<br>1.音效（Sound Effect&#x2F;SFX&#x2F;SE）<br>2.语音（Voice&#x2F;VO&#x2F;VC）<br>3.音乐（Music&#x2F;BGM）<br>音效总监：音效导演或者音频老大，Audio Director<br>音频部门老大：Audio Lead<br>声音管理：Audio Manager&#x2F;Producer（Project Manager&#x2F;PM）</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"音频技术：Technical-Sound-Designer声音设计：Sound-Designer拟音师：Foley-Artists对白编辑：Dialogue-Editor音乐编辑：Music-Editor…\"><a href=\"#音频技术：Technical-Sound-Designer声音设计：Sound-Designer拟音师：Foley-Artists对白编辑：Dialogue-Editor音乐编辑：Music-Editor…\" class=\"headerlink\" title=\"音频技术：Technical Sound Designer声音设计：Sound Designer拟音师：Foley Artists对白编辑：Dialogue Editor音乐编辑：Music Editor…\"></a>音频技术：Technical Sound Designer<br>声音设计：Sound Designer<br>拟音师：Foley Artists<br>对白编辑：Dialogue Editor<br>音乐编辑：Music Editor<br>…</h2><p>语音：游戏中偏重要的一个部分，特别是MOBA类游戏中<br>主角语音（1p,3p）；<br>其他角色、怪物、广播、群杂(walla)等。<br>音乐：<br>有源音乐（点声源类似的意思）<br>无源音乐（BGM）：动态音乐（交互音乐的意思）&#x2F;静态音乐</p>\n<h1 id=\"典型音效品类设计\"><a href=\"#典型音效品类设计\" class=\"headerlink\" title=\"典型音效品类设计\"></a>典型音效品类设计</h1><p>音频表格<br>游戏品类和表格建立。<br>每一个游戏都有它的核心品类，<br>进行“品类分析”，明确游戏的核心玩法，<br>“建立表格”，设立工作流和表格，<br>“制作”，根据计划完成游戏声音设计。</p>\n<h2 id=\"尼罗河勇士2\"><a href=\"#尼罗河勇士2\" class=\"headerlink\" title=\"尼罗河勇士2\"></a>尼罗河勇士2</h2><p>核心关键词：SLG、战旗、俯视角、特殊题材（埃及）、重点关注（游戏特色：石板玩法）<br>1.与项目组沟通，做出游戏的mind脑图<br>2.根据脑图和demo进行列出游戏音频清单（acb &#x3D; bank ; cue &#x3D; event）<br>音效制作时，</p>\n<h2 id=\"江湖客栈\"><a href=\"#江湖客栈\" class=\"headerlink\" title=\"江湖客栈\"></a>江湖客栈</h2></div>","excerpt":"","more":"<div class=\".article-gallery\"><hr>\n<h2 id=\"title-一罐盐音效设计课程\"><a href=\"#title-一罐盐音效设计课程\" class=\"headerlink\" title=\"title &#x3D; 一罐盐音效设计课程\"></a>title &#x3D; 一罐盐音效设计课程</h2><h1 id=\"完整的音频工作流程\"><a href=\"#完整的音频工作流程\" class=\"headerlink\" title=\"完整的音频工作流程\"></a>完整的音频工作流程</h1><p>体验游戏<br>音频策划案<br>功能策划<br>需求表制作<br>中间件同步研发<br>音频管线<br>制作<br>混音<br>QA<br>上线</p>\n<h1 id=\"游戏音频三要素\"><a href=\"#游戏音频三要素\" class=\"headerlink\" title=\"游戏音频三要素\"></a>游戏音频三要素</h1><p>游戏开发前期，和制作人或者其他同事沟通过程中，通过游戏三要素的沟通同步，能够清晰游戏音频的后续开发方向。</p>\n<h2 id=\"氛围带入\"><a href=\"#氛围带入\" class=\"headerlink\" title=\"氛围带入\"></a>氛围带入</h2><p>玩家能感受到情绪，能够沉浸于游戏世界，能感受到情绪的波动。<br>开发者：需要将虚拟世界的听觉达到统一；建立情感记忆和反馈（玩家的每一个操作都要能感受到反馈）；能够煽动玩家的情绪。<br>游戏更有沉浸感，能让游戏变得更好玩，玩家才会愿意去玩，更有积极性。</p>\n<h2 id=\"文化表现\"><a href=\"#文化表现\" class=\"headerlink\" title=\"文化表现\"></a>文化表现</h2><p>核心玩法、视听体验、故事<br>说白了，风格化，例如：《茶杯头》（滤波器或者降采样等来实现上世纪美国动画复古银色），《空洞骑士》（8bit红白机完全复刻），《银河恶魔城》（切高频）。</p>\n<h2 id=\"功能引导\"><a href=\"#功能引导\" class=\"headerlink\" title=\"功能引导\"></a>功能引导</h2><p>实现游戏中的目的，是希望玩家紧张，轻松，悬疑，正面负面等等。<br>引导玩家购买欲。</p>\n<h1 id=\"音频与游戏题材玩法的关系\"><a href=\"#音频与游戏题材玩法的关系\" class=\"headerlink\" title=\"音频与游戏题材玩法的关系\"></a>音频与游戏题材玩法的关系</h1><p>关键点：优先级和目的。任何游戏的声音不会十全十美，因此要有着重表现的地方，也就是优先级，而优先级的排序涉及到游戏的开发目的。</p>\n<ul>\n<li>强调自身动作类：ACT、格斗、魂类、FPSRPG）<br>优先级：打击感有关的声音最高<br>当打击声与其他声音矛盾时，牺牲其他声音；当声音的现实感（常识）与打击感违背时，牺牲现实感；把最清晰的主频率让给打击感和受击声。</li>\n</ul>\n<p>设计上突出的点：<br>武器的轻重、材质的不同、角色的差异；<br>不同类型的游戏，音效风格不同</p>\n<ul>\n<li>强调氛围感类（RPG、泛AVG、SIM、艺术感）<br>优先级：环境氛围声优先级最高。<br>当环境氛围声与其他声音矛盾时，牺牲其他声音；当声音的现实感（常识）与打击感违背时，牺牲现实感；把最清晰的主频率让给环境氛围声。</li>\n</ul>\n<p>设计上突出的点：<br>还原场景空间：混响延迟等。<br>画里与画外：《冰汽时代》中，背景音加上了人的咳嗽声。想象力<br>环境的层级细节：性能与表现。<br>不同类型的游戏的做法不同。<br>《八方旅人》，重剧情，重点在音乐上，环境声不复杂但是也能准确的表达不同场景的声音特点。<br>《过山车之星》的分层系统做得很好，模拟经营类侧重环境声和UI声。拉远时和拉近时…. </p>\n<ul>\n<li>强调机械声类（FPS、TPS等枪械类）<br>优先级：一切跟枪械打斗有关的声音，包括1p、3p</li>\n</ul>\n<p>设计上突出的点：<br>还原拟真枪，了解枪械发声原理，知道怎么拆分；设计枪声时基于爽感和功能性，而非现实；了解枪声和距离之间的混响关系。<br>设计非拟真枪（科幻）：处理拟真和科幻的主次比例。加上拟真枪设计逻思路。《守望先锋》<br>提前预估游戏功能，实现音频程序和音效的配合：机械总量、游戏人数体量、受击材质；发射距离，游戏地图规模与核心玩法设计（声音的传播距离）。<br>除了枪械发射之外的声音的贴合度。 </p>\n<ul>\n<li>强调UI类（SIM、SLG、休闲）<br>优先级：着重设计UI契合度和复杂度。</li>\n</ul>\n<p>设计上突出的点：<br>分清正反馈和负反馈；<br>契合游戏背景世界观（风格化）<br>学会使用画外音，脱离UI本身的束缚。《辐射》</p>\n<ul>\n<li>强调功能与声音引导类（AVG、解密、恐怖）<br>优先级：….</li>\n</ul>\n<p>设计上突出的点：<br>持续性音效不可全频段。<br>要学会克制。<br>结合游戏玩法进行设计。<br>《疑案追声》</p>\n<h2 id=\"游戏分析\"><a href=\"#游戏分析\" class=\"headerlink\" title=\"游戏分析\"></a>游戏分析</h2><ul>\n<li>分析游戏的三要素</li>\n<li>分析游戏着重点（可能不止一处）<br>清晰，简洁，明了。<br>不停的玩游戏，分析，建立参考。将优秀的音频片段可以录频留存。<br>游戏分析的具体内容：<br>1.游戏概况<br>游戏类型、游戏平台、游戏画面、美术风格</li>\n</ul>\n<p>2.世界观&amp;游戏设定<br>背景故事、核心设定、人物设定</p>\n<p>3.三要素</p>\n<p>4.着重点（强调点）</p>\n<p>5.音效设计</p>\n<h1 id=\"游戏音频框架\"><a href=\"#游戏音频框架\" class=\"headerlink\" title=\"游戏音频框架\"></a>游戏音频框架</h1><h2 id=\"游戏音频管线\"><a href=\"#游戏音频管线\" class=\"headerlink\" title=\"游戏音频管线\"></a>游戏音频管线</h2><ul>\n<li><p>音频管线，从游戏概念开始，到玩家听到为止。 </p>\n</li>\n<li><p>人员分配：<br>音频组长：做决定的人<br>甲方：检查质量<br>团队成员：一群出谋划策的人</p>\n</li>\n<li><p>了解各种游戏，了解同事、甲方等，得学会团队协作</p>\n</li>\n<li><p>具体的音频部门分配<br>1.音效（Sound Effect&#x2F;SFX&#x2F;SE）<br>2.语音（Voice&#x2F;VO&#x2F;VC）<br>3.音乐（Music&#x2F;BGM）<br>音效总监：音效导演或者音频老大，Audio Director<br>音频部门老大：Audio Lead<br>声音管理：Audio Manager&#x2F;Producer（Project Manager&#x2F;PM）</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"音频技术：Technical-Sound-Designer声音设计：Sound-Designer拟音师：Foley-Artists对白编辑：Dialogue-Editor音乐编辑：Music-Editor…\"><a href=\"#音频技术：Technical-Sound-Designer声音设计：Sound-Designer拟音师：Foley-Artists对白编辑：Dialogue-Editor音乐编辑：Music-Editor…\" class=\"headerlink\" title=\"音频技术：Technical Sound Designer声音设计：Sound Designer拟音师：Foley Artists对白编辑：Dialogue Editor音乐编辑：Music Editor…\"></a>音频技术：Technical Sound Designer<br>声音设计：Sound Designer<br>拟音师：Foley Artists<br>对白编辑：Dialogue Editor<br>音乐编辑：Music Editor<br>…</h2><p>语音：游戏中偏重要的一个部分，特别是MOBA类游戏中<br>主角语音（1p,3p）；<br>其他角色、怪物、广播、群杂(walla)等。<br>音乐：<br>有源音乐（点声源类似的意思）<br>无源音乐（BGM）：动态音乐（交互音乐的意思）&#x2F;静态音乐</p>\n<h1 id=\"典型音效品类设计\"><a href=\"#典型音效品类设计\" class=\"headerlink\" title=\"典型音效品类设计\"></a>典型音效品类设计</h1><p>音频表格<br>游戏品类和表格建立。<br>每一个游戏都有它的核心品类，<br>进行“品类分析”，明确游戏的核心玩法，<br>“建立表格”，设立工作流和表格，<br>“制作”，根据计划完成游戏声音设计。</p>\n<h2 id=\"尼罗河勇士2\"><a href=\"#尼罗河勇士2\" class=\"headerlink\" title=\"尼罗河勇士2\"></a>尼罗河勇士2</h2><p>核心关键词：SLG、战旗、俯视角、特殊题材（埃及）、重点关注（游戏特色：石板玩法）<br>1.与项目组沟通，做出游戏的mind脑图<br>2.根据脑图和demo进行列出游戏音频清单（acb &#x3D; bank ; cue &#x3D; event）<br>音效制作时，</p>\n<h2 id=\"江湖客栈\"><a href=\"#江湖客栈\" class=\"headerlink\" title=\"江湖客栈\"></a>江湖客栈</h2></div>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}